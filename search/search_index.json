{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pzp Pure-python fzf-inspired element picker Requirements Python 3.6+ Install pip install pzp Usage from pzp import pzp pzp(['a', 'b', 'c']) Layout The finder by default starts in fullscreen mode. You can make it start below the cursor with fullscreen=False option. Also, with the height argument you can limit the window height. pzp(candidates=range(0, 1000), fullscreen=False, height=20) You can choose between the following layout using the layout option. default Display from the bottom of the screen reverse Display from the top of the screen reverse-list Display from the top of the screen, prompt at the bottom Search syntax The finder starts in \"extended-search mode\" where you can type in multiple search terms delimited by spaces. e.g. ^music .mp3$ sbtrkt !fire Token Match type Description t1 t2 tokens-match Items that include t1 and t2 'star wars line-match (not-splitted) Items that include star wars ^music prefix-exact-match Items that start with music .py$ suffix-exact-match Items that end with .py !fire inverse-exact-match Items that do not include fire !^music inverse-prefix-exact-match Items that do not start with music !.py$ inverse-suffix-exact-match Items that do not end with .py Key/Event Bindings keys_binding argument allows you to bind one or more keys to one action. You can use it to customize key bindings or implementing custom behaviors. try: item = pzp( candidates=candidates, keys_binding={ \"custom-action\": [\"ctrl-o\"], \"exclamation\": [\"!\"] }, ) print(item) except CustomAction as action: print(action.action) print(action.selected_item) Available Keys Key Synonyms type space tab btab shift-tab enter esc insert del bspace bs up down left right home end pgdn page-down pgup page-up f1 - f12 ctrl-/ ctrl-\\ ctrl-] ctrl-^ ctrl-a - ctrl-z any single character Available Actions A key can be bound to one of following actions or to a custom action. Action * Default binding accept enter abort ctrl-c ctrl-g ctrl-q esc beginning-of-line ctrl-a home backward-char ctrl-b left forward-char ctrl-f right end-of-line ctrl-e end backward-delete-char ctrl-h bspace delete-char del up ctrl-k ctrl-p up down ctrl-j ctrl-n down page-down pgdn page-up pgup ignore Licence The MIT License (MIT) Copyright (c) 2013-2022 Andrea Bonomi andrea.bonomi@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Links fzf ANSI Escape Sequences pyte, python terminal emulator Grip, GitHub Readme Instant Preview Black, The Uncompromising Code Formatter mkdocstrings, Automatic documentation from sources","title":"Introduction"},{"location":"#pzp","text":"Pure-python fzf-inspired element picker","title":"pzp"},{"location":"#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"#install","text":"pip install pzp","title":"Install"},{"location":"#usage","text":"from pzp import pzp pzp(['a', 'b', 'c'])","title":"Usage"},{"location":"#layout","text":"The finder by default starts in fullscreen mode. You can make it start below the cursor with fullscreen=False option. Also, with the height argument you can limit the window height. pzp(candidates=range(0, 1000), fullscreen=False, height=20) You can choose between the following layout using the layout option. default Display from the bottom of the screen reverse Display from the top of the screen reverse-list Display from the top of the screen, prompt at the bottom","title":"Layout"},{"location":"#search-syntax","text":"The finder starts in \"extended-search mode\" where you can type in multiple search terms delimited by spaces. e.g. ^music .mp3$ sbtrkt !fire Token Match type Description t1 t2 tokens-match Items that include t1 and t2 'star wars line-match (not-splitted) Items that include star wars ^music prefix-exact-match Items that start with music .py$ suffix-exact-match Items that end with .py !fire inverse-exact-match Items that do not include fire !^music inverse-prefix-exact-match Items that do not start with music !.py$ inverse-suffix-exact-match Items that do not end with .py","title":"Search syntax"},{"location":"#keyevent-bindings","text":"keys_binding argument allows you to bind one or more keys to one action. You can use it to customize key bindings or implementing custom behaviors. try: item = pzp( candidates=candidates, keys_binding={ \"custom-action\": [\"ctrl-o\"], \"exclamation\": [\"!\"] }, ) print(item) except CustomAction as action: print(action.action) print(action.selected_item)","title":"Key/Event Bindings"},{"location":"#available-keys","text":"Key Synonyms type space tab btab shift-tab enter esc insert del bspace bs up down left right home end pgdn page-down pgup page-up f1 - f12 ctrl-/ ctrl-\\ ctrl-] ctrl-^ ctrl-a - ctrl-z any single character","title":"Available Keys"},{"location":"#available-actions","text":"A key can be bound to one of following actions or to a custom action. Action * Default binding accept enter abort ctrl-c ctrl-g ctrl-q esc beginning-of-line ctrl-a home backward-char ctrl-b left forward-char ctrl-f right end-of-line ctrl-e end backward-delete-char ctrl-h bspace delete-char del up ctrl-k ctrl-p up down ctrl-j ctrl-n down page-down pgdn page-up pgup ignore","title":"Available Actions"},{"location":"#licence","text":"The MIT License (MIT) Copyright (c) 2013-2022 Andrea Bonomi andrea.bonomi@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"#links","text":"fzf ANSI Escape Sequences pyte, python terminal emulator Grip, GitHub Readme Instant Preview Black, The Uncompromising Code Formatter mkdocstrings, Automatic documentation from sources","title":"Links"},{"location":"CODE_OF_CONDUCT/","text":"Contributor Covenant Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at andrea.bonomi@gmail.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"CODE_OF_CONDUCT/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at andrea.bonomi@gmail.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"CODE_OF_CONDUCT/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"CODE_OF_CONDUCT/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Attribution"},{"location":"license/","text":"The MIT License (MIT) Copyright (c) 2013-2022 Andrea Bonomi andrea.bonomi@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"api/actions/","text":"Action Source code in pzp/actions.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Action : def __init__ ( self , action : str , keys : Optional [ Sequence [ str ]] = None ) -> None : \"\"\" Action decorator Args: action: Action \"\"\" self . action : str = action self . keys : Sequence [ str ] = keys or [] def __call__ ( self , func : ActionHandler ) -> ActionHandler : setattr ( func , \"pzp_action\" , self . action ) setattr ( func , \"pzp_keys\" , self . keys ) return func __init__ ( action , keys = None ) Action decorator Parameters: action ( str ) \u2013 Action Source code in pzp/actions.py 18 19 20 21 22 23 24 25 26 def __init__ ( self , action : str , keys : Optional [ Sequence [ str ]] = None ) -> None : \"\"\" Action decorator Args: action: Action \"\"\" self . action : str = action self . keys : Sequence [ str ] = keys or [] ActionsHandler Source code in pzp/actions.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 class ActionsHandler : def __init__ ( self , keys_handler : Optional [ KeysHandler ] = None , keys_binding : Optional [ KeysBinding ] = None , ) -> None : \"\"\" Action handler Args: keys_handler: Keys handler keys_binding: Optional[Dict[str, Sequence[str]]] = None, Attributes: actions: map action names to action handlers keys_handler: Keys handler \"\"\" self . keys_handler = keys_handler or KeysHandler () # Collect the methods with the Action decorator self . actions : Dict [ str , ActionHandler ] = {} for name , member in inspect . getmembers ( self ): action : Optional [ str ] = getattr ( member , \"pzp_action\" , None ) if action is not None : self . actions [ action ] = member # Default action if name == \"default\" : self . actions [ \"default\" ] = member # Keys binding keys : Optional [ Sequence [ str ]] = getattr ( member , \"pzp_keys\" , None ) if keys : self . keys_handler . set_keys_binding ( keys , action ) # Override keys binding if keys_binding : self . keys_handler . update ( keys_binding ) def process_key_event ( self , key_event : KeyEvent ) -> None : \"\"\" Execute the action hander for a give key event Args: key_event: Key event to be processed Raises: MissingHander: If there is no handler for the given key event \"\"\" action : str = key_event . action or \"default\" fn = self . actions . get ( action ) if not fn : raise MissingHander ( action = action , ch = key_event . ch ) # Check if the function has the key_event argument if \"key_event\" in inspect . getargs ( fn . __code__ ) . args : fn ( key_event = key_event ) # type: ignore else : fn () # type: ignore __init__ ( keys_handler = None , keys_binding = None ) Action handler Parameters: keys_handler ( Optional [ KeysHandler ] , default: None ) \u2013 Keys handler keys_binding ( Optional [ KeysBinding ] , default: None ) \u2013 Optional[Dict[str, Sequence[str]]] = None, Attributes: actions \u2013 map action names to action handlers keys_handler \u2013 Keys handler Source code in pzp/actions.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def __init__ ( self , keys_handler : Optional [ KeysHandler ] = None , keys_binding : Optional [ KeysBinding ] = None , ) -> None : \"\"\" Action handler Args: keys_handler: Keys handler keys_binding: Optional[Dict[str, Sequence[str]]] = None, Attributes: actions: map action names to action handlers keys_handler: Keys handler \"\"\" self . keys_handler = keys_handler or KeysHandler () # Collect the methods with the Action decorator self . actions : Dict [ str , ActionHandler ] = {} for name , member in inspect . getmembers ( self ): action : Optional [ str ] = getattr ( member , \"pzp_action\" , None ) if action is not None : self . actions [ action ] = member # Default action if name == \"default\" : self . actions [ \"default\" ] = member # Keys binding keys : Optional [ Sequence [ str ]] = getattr ( member , \"pzp_keys\" , None ) if keys : self . keys_handler . set_keys_binding ( keys , action ) # Override keys binding if keys_binding : self . keys_handler . update ( keys_binding ) process_key_event ( key_event ) Execute the action hander for a give key event Parameters: key_event ( KeyEvent ) \u2013 Key event to be processed Raises: MissingHander \u2013 If there is no handler for the given key event Source code in pzp/actions.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def process_key_event ( self , key_event : KeyEvent ) -> None : \"\"\" Execute the action hander for a give key event Args: key_event: Key event to be processed Raises: MissingHander: If there is no handler for the given key event \"\"\" action : str = key_event . action or \"default\" fn = self . actions . get ( action ) if not fn : raise MissingHander ( action = action , ch = key_event . ch ) # Check if the function has the key_event argument if \"key_event\" in inspect . getargs ( fn . __code__ ) . args : fn ( key_event = key_event ) # type: ignore else : fn () # type: ignore","title":"pzp.actions"},{"location":"api/actions/#pzp.actions.Action","text":"Source code in pzp/actions.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Action : def __init__ ( self , action : str , keys : Optional [ Sequence [ str ]] = None ) -> None : \"\"\" Action decorator Args: action: Action \"\"\" self . action : str = action self . keys : Sequence [ str ] = keys or [] def __call__ ( self , func : ActionHandler ) -> ActionHandler : setattr ( func , \"pzp_action\" , self . action ) setattr ( func , \"pzp_keys\" , self . keys ) return func","title":"Action"},{"location":"api/actions/#pzp.actions.Action.__init__","text":"Action decorator Parameters: action ( str ) \u2013 Action Source code in pzp/actions.py 18 19 20 21 22 23 24 25 26 def __init__ ( self , action : str , keys : Optional [ Sequence [ str ]] = None ) -> None : \"\"\" Action decorator Args: action: Action \"\"\" self . action : str = action self . keys : Sequence [ str ] = keys or []","title":"__init__"},{"location":"api/actions/#pzp.actions.ActionsHandler","text":"Source code in pzp/actions.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 class ActionsHandler : def __init__ ( self , keys_handler : Optional [ KeysHandler ] = None , keys_binding : Optional [ KeysBinding ] = None , ) -> None : \"\"\" Action handler Args: keys_handler: Keys handler keys_binding: Optional[Dict[str, Sequence[str]]] = None, Attributes: actions: map action names to action handlers keys_handler: Keys handler \"\"\" self . keys_handler = keys_handler or KeysHandler () # Collect the methods with the Action decorator self . actions : Dict [ str , ActionHandler ] = {} for name , member in inspect . getmembers ( self ): action : Optional [ str ] = getattr ( member , \"pzp_action\" , None ) if action is not None : self . actions [ action ] = member # Default action if name == \"default\" : self . actions [ \"default\" ] = member # Keys binding keys : Optional [ Sequence [ str ]] = getattr ( member , \"pzp_keys\" , None ) if keys : self . keys_handler . set_keys_binding ( keys , action ) # Override keys binding if keys_binding : self . keys_handler . update ( keys_binding ) def process_key_event ( self , key_event : KeyEvent ) -> None : \"\"\" Execute the action hander for a give key event Args: key_event: Key event to be processed Raises: MissingHander: If there is no handler for the given key event \"\"\" action : str = key_event . action or \"default\" fn = self . actions . get ( action ) if not fn : raise MissingHander ( action = action , ch = key_event . ch ) # Check if the function has the key_event argument if \"key_event\" in inspect . getargs ( fn . __code__ ) . args : fn ( key_event = key_event ) # type: ignore else : fn () # type: ignore","title":"ActionsHandler"},{"location":"api/actions/#pzp.actions.ActionsHandler.__init__","text":"Action handler Parameters: keys_handler ( Optional [ KeysHandler ] , default: None ) \u2013 Keys handler keys_binding ( Optional [ KeysBinding ] , default: None ) \u2013 Optional[Dict[str, Sequence[str]]] = None, Attributes: actions \u2013 map action names to action handlers keys_handler \u2013 Keys handler Source code in pzp/actions.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def __init__ ( self , keys_handler : Optional [ KeysHandler ] = None , keys_binding : Optional [ KeysBinding ] = None , ) -> None : \"\"\" Action handler Args: keys_handler: Keys handler keys_binding: Optional[Dict[str, Sequence[str]]] = None, Attributes: actions: map action names to action handlers keys_handler: Keys handler \"\"\" self . keys_handler = keys_handler or KeysHandler () # Collect the methods with the Action decorator self . actions : Dict [ str , ActionHandler ] = {} for name , member in inspect . getmembers ( self ): action : Optional [ str ] = getattr ( member , \"pzp_action\" , None ) if action is not None : self . actions [ action ] = member # Default action if name == \"default\" : self . actions [ \"default\" ] = member # Keys binding keys : Optional [ Sequence [ str ]] = getattr ( member , \"pzp_keys\" , None ) if keys : self . keys_handler . set_keys_binding ( keys , action ) # Override keys binding if keys_binding : self . keys_handler . update ( keys_binding )","title":"__init__"},{"location":"api/actions/#pzp.actions.ActionsHandler.process_key_event","text":"Execute the action hander for a give key event Parameters: key_event ( KeyEvent ) \u2013 Key event to be processed Raises: MissingHander \u2013 If there is no handler for the given key event Source code in pzp/actions.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def process_key_event ( self , key_event : KeyEvent ) -> None : \"\"\" Execute the action hander for a give key event Args: key_event: Key event to be processed Raises: MissingHander: If there is no handler for the given key event \"\"\" action : str = key_event . action or \"default\" fn = self . actions . get ( action ) if not fn : raise MissingHander ( action = action , ch = key_event . ch ) # Check if the function has the key_event argument if \"key_event\" in inspect . getargs ( fn . __code__ ) . args : fn ( key_event = key_event ) # type: ignore else : fn () # type: ignore","title":"process_key_event"},{"location":"api/ansi/","text":"BLACK = f ' { ESC } [30m' module-attribute Black foreground color BLACK_BG = f ' { ESC } [40m' module-attribute Black background color BLUE = f ' { ESC } [34m' module-attribute Blue foreground color BLUE_BG = f ' { ESC } [44m' module-attribute Blue background color BOLD = f ' { ESC } [1m' module-attribute Set bold mode CURSOR_RESTORE_POS = f ' { ESC } 8' module-attribute Restores the cursor to the last saved position CURSOR_SAVE_POS = f ' { ESC } 7' module-attribute Save cursor position CYAN = f ' { ESC } [36m' module-attribute Cyan foreground color CYAN_BG = f ' { ESC } [46m' module-attribute Cyan background color ERASE_LINE = f ' { ESC } [2K' module-attribute Erase the entire line GREEN = f ' { ESC } [32m' module-attribute Green foreground color GREEN_BG = f ' { ESC } [42m' module-attribute Green background color NEGATIVE = f ' { ESC } [7m' module-attribute Set inverse mode PURPLE = f ' { ESC } [35m' module-attribute Purple foreground color PURPLE_BG = f ' { ESC } [45m' module-attribute Purple background color RED = f ' { ESC } [31m' module-attribute Red foreground color RED_BG = f ' { ESC } [41m' module-attribute Red background color RESET = f ' { ESC } [0m' module-attribute Reset styles and colors WHITE = f ' { ESC } [37m' module-attribute White foreground color WHITE_BG = f ' { ESC } [47m' module-attribute White background color YELLOW = f ' { ESC } [33m' module-attribute Yellow foreground color YELLOW_BG = f ' { ESC } [43m' module-attribute Yellow background color ansi_len ( s ) Get string length, excluding ansi sequences Source code in pzp/ansi.py 89 90 91 def ansi_len ( s : str ) -> int : \"Get string length, excluding ansi sequences\" return len ( ANSI_RE . sub ( \"\" , s ))","title":"pzp.ansi"},{"location":"api/ansi/#pzp.ansi.BLACK","text":"Black foreground color","title":"BLACK"},{"location":"api/ansi/#pzp.ansi.BLACK_BG","text":"Black background color","title":"BLACK_BG"},{"location":"api/ansi/#pzp.ansi.BLUE","text":"Blue foreground color","title":"BLUE"},{"location":"api/ansi/#pzp.ansi.BLUE_BG","text":"Blue background color","title":"BLUE_BG"},{"location":"api/ansi/#pzp.ansi.BOLD","text":"Set bold mode","title":"BOLD"},{"location":"api/ansi/#pzp.ansi.CURSOR_RESTORE_POS","text":"Restores the cursor to the last saved position","title":"CURSOR_RESTORE_POS"},{"location":"api/ansi/#pzp.ansi.CURSOR_SAVE_POS","text":"Save cursor position","title":"CURSOR_SAVE_POS"},{"location":"api/ansi/#pzp.ansi.CYAN","text":"Cyan foreground color","title":"CYAN"},{"location":"api/ansi/#pzp.ansi.CYAN_BG","text":"Cyan background color","title":"CYAN_BG"},{"location":"api/ansi/#pzp.ansi.ERASE_LINE","text":"Erase the entire line","title":"ERASE_LINE"},{"location":"api/ansi/#pzp.ansi.GREEN","text":"Green foreground color","title":"GREEN"},{"location":"api/ansi/#pzp.ansi.GREEN_BG","text":"Green background color","title":"GREEN_BG"},{"location":"api/ansi/#pzp.ansi.NEGATIVE","text":"Set inverse mode","title":"NEGATIVE"},{"location":"api/ansi/#pzp.ansi.PURPLE","text":"Purple foreground color","title":"PURPLE"},{"location":"api/ansi/#pzp.ansi.PURPLE_BG","text":"Purple background color","title":"PURPLE_BG"},{"location":"api/ansi/#pzp.ansi.RED","text":"Red foreground color","title":"RED"},{"location":"api/ansi/#pzp.ansi.RED_BG","text":"Red background color","title":"RED_BG"},{"location":"api/ansi/#pzp.ansi.RESET","text":"Reset styles and colors","title":"RESET"},{"location":"api/ansi/#pzp.ansi.WHITE","text":"White foreground color","title":"WHITE"},{"location":"api/ansi/#pzp.ansi.WHITE_BG","text":"White background color","title":"WHITE_BG"},{"location":"api/ansi/#pzp.ansi.YELLOW","text":"Yellow foreground color","title":"YELLOW"},{"location":"api/ansi/#pzp.ansi.YELLOW_BG","text":"Yellow background color","title":"YELLOW_BG"},{"location":"api/ansi/#pzp.ansi.ansi_len","text":"Get string length, excluding ansi sequences Source code in pzp/ansi.py 89 90 91 def ansi_len ( s : str ) -> int : \"Get string length, excluding ansi sequences\" return len ( ANSI_RE . sub ( \"\" , s ))","title":"ansi_len"},{"location":"api/exceptions/","text":"AbortAction Bases: GenericAction The AbortAction exception is raised when the user presses a key that is mapped to the \"abort\" action. Parameters: action ( str ) \u2013 action ch ( Optional [ str ] ) \u2013 pressed key selected_item ( Any , default: None ) \u2013 selected item, if any line ( Optional [ str ] , default: None ) \u2013 user input Attributes: action \u2013 action ch \u2013 pressed key selected_item \u2013 selected item, if any line \u2013 user input Source code in pzp/exceptions.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 class AbortAction ( GenericAction ): \"\"\" The AbortAction exception is raised when the user presses a key that is mapped to the \"abort\" action. Args: action: action ch: pressed key selected_item: selected item, if any line: user input Attributes: action: action ch: pressed key selected_item: selected item, if any line: user input \"\"\" def __init__ ( self , action : str , ch : Optional [ str ], selected_item : Any = None , line : Optional [ str ] = None ): super () . __init__ ( action , ch , selected_item , line ) AcceptAction Bases: GenericAction The AcceptAction exception is raised when the user presses a key that is mapped to the \"accept\" action. Parameters: action ( str ) \u2013 action ch ( Optional [ str ] ) \u2013 pressed key selected_item ( Any , default: None ) \u2013 selected item, if any line ( Optional [ str ] , default: None ) \u2013 user input Attributes: action \u2013 action ch \u2013 pressed key selected_item \u2013 selected item, if any line \u2013 user input Source code in pzp/exceptions.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 class AcceptAction ( GenericAction ): \"\"\" The AcceptAction exception is raised when the user presses a key that is mapped to the \"accept\" action. Args: action: action ch: pressed key selected_item: selected item, if any line: user input Attributes: action: action ch: pressed key selected_item: selected item, if any line: user input \"\"\" def __init__ ( self , action : str , ch : Optional [ str ], selected_item : Any = None , line : Optional [ str ] = None ): super () . __init__ ( action , ch , selected_item , line ) CustomAction Bases: GenericAction The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Parameters: action ( str ) \u2013 action selected_item ( Any , default: None ) \u2013 selected item, if any ch ( Optional [ str ] ) \u2013 pressed key line ( Optional [ str ] , default: None ) \u2013 user input Attributes: action \u2013 action selected_item \u2013 selected item, if any ch \u2013 pressed key line \u2013 user input Source code in pzp/exceptions.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 class CustomAction ( GenericAction ): \"\"\" The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Args: action: action selected_item: selected item, if any ch: pressed key line: user input Attributes: action: action selected_item: selected item, if any ch: pressed key line: user input \"\"\" def __init__ ( self , action : str , ch : Optional [ str ], selected_item : Any = None , line : Optional [ str ] = None ): super () . __init__ ( action , ch , selected_item , line ) GenericAction Bases: PZPException Generic Action Event Parameters: action ( str ) \u2013 action ch ( Optional [ str ] ) \u2013 pressed key selected_item ( Any , default: None ) \u2013 selected item, if any line ( Optional [ str ] , default: None ) \u2013 user input Attributes: action \u2013 action ch \u2013 pressed key selected_item \u2013 selected item, if any line \u2013 user input Source code in pzp/exceptions.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class GenericAction ( PZPException ): \"\"\" Generic Action Event Args: action: action ch: pressed key selected_item: selected item, if any line: user input Attributes: action: action ch: pressed key selected_item: selected item, if any line: user input \"\"\" def __init__ ( self , action : str , ch : Optional [ str ], selected_item : Any = None , line : Optional [ str ] = None ): super () . __init__ ( action ) self . action = action self . ch = ch self . selected_item = selected_item self . line = line MissingHander Bases: PZPException The MissingHander exception is raised when there is no handler for an action. Parameters: action ( str ) \u2013 action ch ( Optional [ str ] ) \u2013 pressed key Attributes: action \u2013 action ch \u2013 pressed key Source code in pzp/exceptions.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 class MissingHander ( PZPException ): \"\"\" The MissingHander exception is raised when there is no handler for an action. Args: action: action ch: pressed key Attributes: action: action ch: pressed key \"\"\" def __init__ ( self , action : str , ch : Optional [ str ]): super () . __init__ ( action ) self . action = action self . ch = ch PZPException Bases: Exception Generic PZP Exception Source code in pzp/exceptions.py 15 16 17 18 class PZPException ( Exception ): \"\"\" Generic PZP Exception \"\"\"","title":"pzp.exceptions"},{"location":"api/exceptions/#pzp.exceptions.AbortAction","text":"Bases: GenericAction The AbortAction exception is raised when the user presses a key that is mapped to the \"abort\" action. Parameters: action ( str ) \u2013 action ch ( Optional [ str ] ) \u2013 pressed key selected_item ( Any , default: None ) \u2013 selected item, if any line ( Optional [ str ] , default: None ) \u2013 user input Attributes: action \u2013 action ch \u2013 pressed key selected_item \u2013 selected item, if any line \u2013 user input Source code in pzp/exceptions.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 class AbortAction ( GenericAction ): \"\"\" The AbortAction exception is raised when the user presses a key that is mapped to the \"abort\" action. Args: action: action ch: pressed key selected_item: selected item, if any line: user input Attributes: action: action ch: pressed key selected_item: selected item, if any line: user input \"\"\" def __init__ ( self , action : str , ch : Optional [ str ], selected_item : Any = None , line : Optional [ str ] = None ): super () . __init__ ( action , ch , selected_item , line )","title":"AbortAction"},{"location":"api/exceptions/#pzp.exceptions.AcceptAction","text":"Bases: GenericAction The AcceptAction exception is raised when the user presses a key that is mapped to the \"accept\" action. Parameters: action ( str ) \u2013 action ch ( Optional [ str ] ) \u2013 pressed key selected_item ( Any , default: None ) \u2013 selected item, if any line ( Optional [ str ] , default: None ) \u2013 user input Attributes: action \u2013 action ch \u2013 pressed key selected_item \u2013 selected item, if any line \u2013 user input Source code in pzp/exceptions.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 class AcceptAction ( GenericAction ): \"\"\" The AcceptAction exception is raised when the user presses a key that is mapped to the \"accept\" action. Args: action: action ch: pressed key selected_item: selected item, if any line: user input Attributes: action: action ch: pressed key selected_item: selected item, if any line: user input \"\"\" def __init__ ( self , action : str , ch : Optional [ str ], selected_item : Any = None , line : Optional [ str ] = None ): super () . __init__ ( action , ch , selected_item , line )","title":"AcceptAction"},{"location":"api/exceptions/#pzp.exceptions.CustomAction","text":"Bases: GenericAction The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Parameters: action ( str ) \u2013 action selected_item ( Any , default: None ) \u2013 selected item, if any ch ( Optional [ str ] ) \u2013 pressed key line ( Optional [ str ] , default: None ) \u2013 user input Attributes: action \u2013 action selected_item \u2013 selected item, if any ch \u2013 pressed key line \u2013 user input Source code in pzp/exceptions.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 class CustomAction ( GenericAction ): \"\"\" The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Args: action: action selected_item: selected item, if any ch: pressed key line: user input Attributes: action: action selected_item: selected item, if any ch: pressed key line: user input \"\"\" def __init__ ( self , action : str , ch : Optional [ str ], selected_item : Any = None , line : Optional [ str ] = None ): super () . __init__ ( action , ch , selected_item , line )","title":"CustomAction"},{"location":"api/exceptions/#pzp.exceptions.GenericAction","text":"Bases: PZPException Generic Action Event Parameters: action ( str ) \u2013 action ch ( Optional [ str ] ) \u2013 pressed key selected_item ( Any , default: None ) \u2013 selected item, if any line ( Optional [ str ] , default: None ) \u2013 user input Attributes: action \u2013 action ch \u2013 pressed key selected_item \u2013 selected item, if any line \u2013 user input Source code in pzp/exceptions.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class GenericAction ( PZPException ): \"\"\" Generic Action Event Args: action: action ch: pressed key selected_item: selected item, if any line: user input Attributes: action: action ch: pressed key selected_item: selected item, if any line: user input \"\"\" def __init__ ( self , action : str , ch : Optional [ str ], selected_item : Any = None , line : Optional [ str ] = None ): super () . __init__ ( action ) self . action = action self . ch = ch self . selected_item = selected_item self . line = line","title":"GenericAction"},{"location":"api/exceptions/#pzp.exceptions.MissingHander","text":"Bases: PZPException The MissingHander exception is raised when there is no handler for an action. Parameters: action ( str ) \u2013 action ch ( Optional [ str ] ) \u2013 pressed key Attributes: action \u2013 action ch \u2013 pressed key Source code in pzp/exceptions.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 class MissingHander ( PZPException ): \"\"\" The MissingHander exception is raised when there is no handler for an action. Args: action: action ch: pressed key Attributes: action: action ch: pressed key \"\"\" def __init__ ( self , action : str , ch : Optional [ str ]): super () . __init__ ( action ) self . action = action self . ch = ch","title":"MissingHander"},{"location":"api/exceptions/#pzp.exceptions.PZPException","text":"Bases: Exception Generic PZP Exception Source code in pzp/exceptions.py 15 16 17 18 class PZPException ( Exception ): \"\"\" Generic PZP Exception \"\"\"","title":"PZPException"},{"location":"api/finder/","text":"DEFAULT_HEADER = '' module-attribute Default header DEFAULT_LAYOUT = 'default' module-attribute Default layout DEFAULT_MATCHER = 'extended' module-attribute Default matcher DEFAULT_POINTER = '>' module-attribute Default pointer DEFAULT_PROMPT = '> ' module-attribute Default input prompt Finder Bases: ActionsHandler Source code in pzp/finder.pyclass Finder ( ActionsHandler ): def __init__ ( self , candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], fullscreen : bool = True , height : Optional [ int ] = None , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Union [ Type [ Layout ], str ] = DEFAULT_LAYOUT , info_style : Union [ InfoStyle , str ] = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ], str ] = DEFAULT_MATCHER , lazy : bool = False , output_stream : TextIO = sys . stderr , auto_refresh : Optional [ int ] = None , ): \"\"\" Initializate Finder object Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher lazy: Lazy mode, starts the finder only if the candidates are more than one output_stream: Output stream auto_refresh: Auto refresh period (in seconds) \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . config = Config ( fullscreen , height , format_fn , info_style , pointer_str , prompt_str , header_str , lazy , output_stream , auto_refresh , ) self . candidates = Candidates ( candidates = candidates , format_fn = format_fn , matcher = matcher ) self . layout : Layout = get_layout ( layout = layout , config = self . config , candidates = self . candidates ) def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Finder execution Args: input: initial search string \"\"\" self . line_editor = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) # Load the candidate list self . refresh_candidates () # Filter the items, calculate the screen offset self . apply_filter () # If lazy mode is enabled, starts the finder only if the candidates are more than one if self . config . lazy and self . candidates . matching_candidates_len <= 1 : raise AcceptAction ( action = \"lazy-accept\" , ch = None , selected_item = self . prepare_result (), line = self . line_editor . line ) # Calculate the required height and setup the screen self . layout . screen_setup ( self . line_editor ) def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial search string Raises: AcceptAction: Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction: Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction: Raises when the user presses a key that is mapped to the \"custom\" action. \"\"\" try : self . setup ( input = input ) while True : self . process_key () self . apply_filter () self . update_screen () finally : self . layout . cleanup () def refresh_candidates ( self ) -> None : \"Load/reload the candidate list\" self . candidates . refresh_candidates () self . selected : int = 0 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch , timeout = self . config . auto_refresh ) try : self . line_editor . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line , ) # type: ignore def apply_filter ( self ) -> None : \"Filter the items\" if self . config . auto_refresh : self . candidates . refresh_candidates () self . candidates . apply_filter ( pattern = str ( self . line_editor )) self . selected = max ( min ( self . selected , self . candidates . matching_candidates_len - 1 ), 0 ) def update_screen ( self ) -> None : \"Update the screen - erase the old items, print the filtered items and the prompt\" self . layout . update_screen ( selected = self . selected ) def prepare_result ( self ) -> Any : \"Output the selected item, if any\" try : return self . candidates . matching_candidates [ self . selected ] except IndexError : return None @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line ) @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch , line = self . line_editor . line ) @Action ( \"down\" , keys = [ \"ctrl-j\" , \"ctrl-n\" , \"down\" ]) def down ( self ) -> None : \"Move one line down\" self . selected = self . layout . move_selection ( self . selected , lines =- 1 ) @Action ( \"up\" , keys = [ \"ctrl-k\" , \"ctrl-p\" , \"up\" ]) def up ( self ) -> None : \"Move one line up\" self . selected = self . layout . move_selection ( self . selected , lines =+ 1 ) @Action ( \"page-down\" , keys = [ \"page-down\" , \"pgdn\" ]) def page_down ( self ) -> None : \"Move one page down\" self . selected = self . layout . move_selection ( self . selected , pages =- 1 ) @Action ( \"page-up\" , keys = [ \"page-up\" , \"pgup\" ]) def page_up ( self ) -> None : \"Move one page up\" self . selected = self . layout . move_selection ( self . selected , pages =+ 1 ) @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass __init__ ( candidates , fullscreen = True , height = None , format_fn = lambda x : str ( x ), layout = DEFAULT_LAYOUT , info_style = InfoStyle . DEFAULT , pointer_str = DEFAULT_POINTER , prompt_str = DEFAULT_PROMPT , header_str = DEFAULT_HEADER , keys_binding = None , matcher = DEFAULT_MATCHER , lazy = False , output_stream = sys . stderr , auto_refresh = None ) Initializate Finder object Parameters: candidates ( Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]] ) \u2013 Candidates fullscreen ( bool , default: True ) \u2013 Full screen mode height ( Optional [ int ] , default: None ) \u2013 Finder window height format_fn ( Callable [[ Any ], str ] , default: lambda x: str ( x ) ) \u2013 Items format function layout ( Union [ Type [ Layout ], str ] , default: DEFAULT_LAYOUT ) \u2013 Finder layout info_style ( Union [ InfoStyle , str ] , default: DEFAULT ) \u2013 Determines the display style of finder info pointer_str ( str , default: DEFAULT_POINTER ) \u2013 Pointer to the current line prompt_str ( str , default: DEFAULT_PROMPT ) \u2013 Input prompt header_str ( str , default: DEFAULT_HEADER ) \u2013 Header keys_binding ( Optional [ KeysBinding ] , default: None ) \u2013 Custom keys binding matcher ( Union [ Matcher , Type [ Matcher ], str ] , default: DEFAULT_MATCHER ) \u2013 Matcher lazy ( bool , default: False ) \u2013 Lazy mode, starts the finder only if the candidates are more than one output_stream ( TextIO , default: stderr ) \u2013 Output stream auto_refresh ( Optional [ int ] , default: None ) \u2013 Auto refresh period (in seconds) Source code in pzp/finder.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def __init__ ( self , candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], fullscreen : bool = True , height : Optional [ int ] = None , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Union [ Type [ Layout ], str ] = DEFAULT_LAYOUT , info_style : Union [ InfoStyle , str ] = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ], str ] = DEFAULT_MATCHER , lazy : bool = False , output_stream : TextIO = sys . stderr , auto_refresh : Optional [ int ] = None , ): \"\"\" Initializate Finder object Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher lazy: Lazy mode, starts the finder only if the candidates are more than one output_stream: Output stream auto_refresh: Auto refresh period (in seconds) \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . config = Config ( fullscreen , height , format_fn , info_style , pointer_str , prompt_str , header_str , lazy , output_stream , auto_refresh , ) self . candidates = Candidates ( candidates = candidates , format_fn = format_fn , matcher = matcher ) self . layout : Layout = get_layout ( layout = layout , config = self . config , candidates = self . candidates ) abort ( key_event ) Cancel Source code in pzp/finder.py 173 174 175 176 @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch , line = self . line_editor . line ) accept ( key_event ) Confirm Source code in pzp/finder.py 168 169 170 171 @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line ) apply_filter () Filter the items Source code in pzp/finder.py 150 151 152 153 154 155 def apply_filter ( self ) -> None : \"Filter the items\" if self . config . auto_refresh : self . candidates . refresh_candidates () self . candidates . apply_filter ( pattern = str ( self . line_editor )) self . selected = max ( min ( self . selected , self . candidates . matching_candidates_len - 1 ), 0 ) down () Move one line down Source code in pzp/finder.py 178 179 180 181 @Action ( \"down\" , keys = [ \"ctrl-j\" , \"ctrl-n\" , \"down\" ]) def down ( self ) -> None : \"Move one line down\" self . selected = self . layout . move_selection ( self . selected , lines =- 1 ) ignore () Do nothing Source code in pzp/finder.py 198 199 200 201 @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass page_down () Move one page down Source code in pzp/finder.py 188 189 190 191 @Action ( \"page-down\" , keys = [ \"page-down\" , \"pgdn\" ]) def page_down ( self ) -> None : \"Move one page down\" self . selected = self . layout . move_selection ( self . selected , pages =- 1 ) page_up () Move one page up Source code in pzp/finder.py 193 194 195 196 @Action ( \"page-up\" , keys = [ \"page-up\" , \"pgup\" ]) def page_up ( self ) -> None : \"Move one page up\" self . selected = self . layout . move_selection ( self . selected , pages =+ 1 ) prepare_result () Output the selected item, if any Source code in pzp/finder.py 161 162 163 164 165 166 def prepare_result ( self ) -> Any : \"Output the selected item, if any\" try : return self . candidates . matching_candidates [ self . selected ] except IndexError : return None process_key ( ch = None ) Process the pressed key Source code in pzp/finder.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch , timeout = self . config . auto_refresh ) try : self . line_editor . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line , ) # type: ignore refresh_candidates () Load/reload the candidate list Source code in pzp/finder.py 129 130 131 132 def refresh_candidates ( self ) -> None : \"Load/reload the candidate list\" self . candidates . refresh_candidates () self . selected : int = 0 setup ( input = None ) Setup Finder execution Parameters: input ( Optional [ str ] , default: None ) \u2013 initial search string Source code in pzp/finder.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Finder execution Args: input: initial search string \"\"\" self . line_editor = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) # Load the candidate list self . refresh_candidates () # Filter the items, calculate the screen offset self . apply_filter () # If lazy mode is enabled, starts the finder only if the candidates are more than one if self . config . lazy and self . candidates . matching_candidates_len <= 1 : raise AcceptAction ( action = \"lazy-accept\" , ch = None , selected_item = self . prepare_result (), line = self . line_editor . line ) # Calculate the required height and setup the screen self . layout . screen_setup ( self . line_editor ) show ( input = None ) Open pzp and return the selected element Parameters: input ( Optional [ str ] , default: None ) \u2013 initial search string Raises: AcceptAction \u2013 Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction \u2013 Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction \u2013 Raises when the user presses a key that is mapped to the \"custom\" action. Source code in pzp/finder.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial search string Raises: AcceptAction: Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction: Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction: Raises when the user presses a key that is mapped to the \"custom\" action. \"\"\" try : self . setup ( input = input ) while True : self . process_key () self . apply_filter () self . update_screen () finally : self . layout . cleanup () up () Move one line up Source code in pzp/finder.py 183 184 185 186 @Action ( \"up\" , keys = [ \"ctrl-k\" , \"ctrl-p\" , \"up\" ]) def up ( self ) -> None : \"Move one line up\" self . selected = self . layout . move_selection ( self . selected , lines =+ 1 ) update_screen () Update the screen - erase the old items, print the filtered items and the prompt Source code in pzp/finder.py 157 158 159 def update_screen ( self ) -> None : \"Update the screen - erase the old items, print the filtered items and the prompt\" self . layout . update_screen ( selected = self . selected )","title":"pzp.finder"},{"location":"api/finder/#pzp.finder.DEFAULT_HEADER","text":"Default header","title":"DEFAULT_HEADER"},{"location":"api/finder/#pzp.finder.DEFAULT_LAYOUT","text":"Default layout","title":"DEFAULT_LAYOUT"},{"location":"api/finder/#pzp.finder.DEFAULT_MATCHER","text":"Default matcher","title":"DEFAULT_MATCHER"},{"location":"api/finder/#pzp.finder.DEFAULT_POINTER","text":"Default pointer","title":"DEFAULT_POINTER"},{"location":"api/finder/#pzp.finder.DEFAULT_PROMPT","text":"Default input prompt","title":"DEFAULT_PROMPT"},{"location":"api/finder/#pzp.finder.Finder","text":"Bases: ActionsHandler Source code in pzp/finder.pyclass Finder ( ActionsHandler ): def __init__ ( self , candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], fullscreen : bool = True , height : Optional [ int ] = None , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Union [ Type [ Layout ], str ] = DEFAULT_LAYOUT , info_style : Union [ InfoStyle , str ] = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ], str ] = DEFAULT_MATCHER , lazy : bool = False , output_stream : TextIO = sys . stderr , auto_refresh : Optional [ int ] = None , ): \"\"\" Initializate Finder object Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher lazy: Lazy mode, starts the finder only if the candidates are more than one output_stream: Output stream auto_refresh: Auto refresh period (in seconds) \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . config = Config ( fullscreen , height , format_fn , info_style , pointer_str , prompt_str , header_str , lazy , output_stream , auto_refresh , ) self . candidates = Candidates ( candidates = candidates , format_fn = format_fn , matcher = matcher ) self . layout : Layout = get_layout ( layout = layout , config = self . config , candidates = self . candidates ) def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Finder execution Args: input: initial search string \"\"\" self . line_editor = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) # Load the candidate list self . refresh_candidates () # Filter the items, calculate the screen offset self . apply_filter () # If lazy mode is enabled, starts the finder only if the candidates are more than one if self . config . lazy and self . candidates . matching_candidates_len <= 1 : raise AcceptAction ( action = \"lazy-accept\" , ch = None , selected_item = self . prepare_result (), line = self . line_editor . line ) # Calculate the required height and setup the screen self . layout . screen_setup ( self . line_editor ) def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial search string Raises: AcceptAction: Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction: Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction: Raises when the user presses a key that is mapped to the \"custom\" action. \"\"\" try : self . setup ( input = input ) while True : self . process_key () self . apply_filter () self . update_screen () finally : self . layout . cleanup () def refresh_candidates ( self ) -> None : \"Load/reload the candidate list\" self . candidates . refresh_candidates () self . selected : int = 0 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch , timeout = self . config . auto_refresh ) try : self . line_editor . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line , ) # type: ignore def apply_filter ( self ) -> None : \"Filter the items\" if self . config . auto_refresh : self . candidates . refresh_candidates () self . candidates . apply_filter ( pattern = str ( self . line_editor )) self . selected = max ( min ( self . selected , self . candidates . matching_candidates_len - 1 ), 0 ) def update_screen ( self ) -> None : \"Update the screen - erase the old items, print the filtered items and the prompt\" self . layout . update_screen ( selected = self . selected ) def prepare_result ( self ) -> Any : \"Output the selected item, if any\" try : return self . candidates . matching_candidates [ self . selected ] except IndexError : return None @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line ) @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch , line = self . line_editor . line ) @Action ( \"down\" , keys = [ \"ctrl-j\" , \"ctrl-n\" , \"down\" ]) def down ( self ) -> None : \"Move one line down\" self . selected = self . layout . move_selection ( self . selected , lines =- 1 ) @Action ( \"up\" , keys = [ \"ctrl-k\" , \"ctrl-p\" , \"up\" ]) def up ( self ) -> None : \"Move one line up\" self . selected = self . layout . move_selection ( self . selected , lines =+ 1 ) @Action ( \"page-down\" , keys = [ \"page-down\" , \"pgdn\" ]) def page_down ( self ) -> None : \"Move one page down\" self . selected = self . layout . move_selection ( self . selected , pages =- 1 ) @Action ( \"page-up\" , keys = [ \"page-up\" , \"pgup\" ]) def page_up ( self ) -> None : \"Move one page up\" self . selected = self . layout . move_selection ( self . selected , pages =+ 1 ) @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass","title":"Finder"},{"location":"api/finder/#pzp.finder.Finder.__init__","text":"Initializate Finder object Parameters: candidates ( Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]] ) \u2013 Candidates fullscreen ( bool , default: True ) \u2013 Full screen mode height ( Optional [ int ] , default: None ) \u2013 Finder window height format_fn ( Callable [[ Any ], str ] , default: lambda x: str ( x ) ) \u2013 Items format function layout ( Union [ Type [ Layout ], str ] , default: DEFAULT_LAYOUT ) \u2013 Finder layout info_style ( Union [ InfoStyle , str ] , default: DEFAULT ) \u2013 Determines the display style of finder info pointer_str ( str , default: DEFAULT_POINTER ) \u2013 Pointer to the current line prompt_str ( str , default: DEFAULT_PROMPT ) \u2013 Input prompt header_str ( str , default: DEFAULT_HEADER ) \u2013 Header keys_binding ( Optional [ KeysBinding ] , default: None ) \u2013 Custom keys binding matcher ( Union [ Matcher , Type [ Matcher ], str ] , default: DEFAULT_MATCHER ) \u2013 Matcher lazy ( bool , default: False ) \u2013 Lazy mode, starts the finder only if the candidates are more than one output_stream ( TextIO , default: stderr ) \u2013 Output stream auto_refresh ( Optional [ int ] , default: None ) \u2013 Auto refresh period (in seconds) Source code in pzp/finder.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def __init__ ( self , candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], fullscreen : bool = True , height : Optional [ int ] = None , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Union [ Type [ Layout ], str ] = DEFAULT_LAYOUT , info_style : Union [ InfoStyle , str ] = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ], str ] = DEFAULT_MATCHER , lazy : bool = False , output_stream : TextIO = sys . stderr , auto_refresh : Optional [ int ] = None , ): \"\"\" Initializate Finder object Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher lazy: Lazy mode, starts the finder only if the candidates are more than one output_stream: Output stream auto_refresh: Auto refresh period (in seconds) \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . config = Config ( fullscreen , height , format_fn , info_style , pointer_str , prompt_str , header_str , lazy , output_stream , auto_refresh , ) self . candidates = Candidates ( candidates = candidates , format_fn = format_fn , matcher = matcher ) self . layout : Layout = get_layout ( layout = layout , config = self . config , candidates = self . candidates )","title":"__init__"},{"location":"api/finder/#pzp.finder.Finder.abort","text":"Cancel Source code in pzp/finder.py 173 174 175 176 @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch , line = self . line_editor . line )","title":"abort"},{"location":"api/finder/#pzp.finder.Finder.accept","text":"Confirm Source code in pzp/finder.py 168 169 170 171 @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line )","title":"accept"},{"location":"api/finder/#pzp.finder.Finder.apply_filter","text":"Filter the items Source code in pzp/finder.py 150 151 152 153 154 155 def apply_filter ( self ) -> None : \"Filter the items\" if self . config . auto_refresh : self . candidates . refresh_candidates () self . candidates . apply_filter ( pattern = str ( self . line_editor )) self . selected = max ( min ( self . selected , self . candidates . matching_candidates_len - 1 ), 0 )","title":"apply_filter"},{"location":"api/finder/#pzp.finder.Finder.down","text":"Move one line down Source code in pzp/finder.py 178 179 180 181 @Action ( \"down\" , keys = [ \"ctrl-j\" , \"ctrl-n\" , \"down\" ]) def down ( self ) -> None : \"Move one line down\" self . selected = self . layout . move_selection ( self . selected , lines =- 1 )","title":"down"},{"location":"api/finder/#pzp.finder.Finder.ignore","text":"Do nothing Source code in pzp/finder.py 198 199 200 201 @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass","title":"ignore"},{"location":"api/finder/#pzp.finder.Finder.page_down","text":"Move one page down Source code in pzp/finder.py 188 189 190 191 @Action ( \"page-down\" , keys = [ \"page-down\" , \"pgdn\" ]) def page_down ( self ) -> None : \"Move one page down\" self . selected = self . layout . move_selection ( self . selected , pages =- 1 )","title":"page_down"},{"location":"api/finder/#pzp.finder.Finder.page_up","text":"Move one page up Source code in pzp/finder.py 193 194 195 196 @Action ( \"page-up\" , keys = [ \"page-up\" , \"pgup\" ]) def page_up ( self ) -> None : \"Move one page up\" self . selected = self . layout . move_selection ( self . selected , pages =+ 1 )","title":"page_up"},{"location":"api/finder/#pzp.finder.Finder.prepare_result","text":"Output the selected item, if any Source code in pzp/finder.py 161 162 163 164 165 166 def prepare_result ( self ) -> Any : \"Output the selected item, if any\" try : return self . candidates . matching_candidates [ self . selected ] except IndexError : return None","title":"prepare_result"},{"location":"api/finder/#pzp.finder.Finder.process_key","text":"Process the pressed key Source code in pzp/finder.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch , timeout = self . config . auto_refresh ) try : self . line_editor . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line , ) # type: ignore","title":"process_key"},{"location":"api/finder/#pzp.finder.Finder.refresh_candidates","text":"Load/reload the candidate list Source code in pzp/finder.py 129 130 131 132 def refresh_candidates ( self ) -> None : \"Load/reload the candidate list\" self . candidates . refresh_candidates () self . selected : int = 0","title":"refresh_candidates"},{"location":"api/finder/#pzp.finder.Finder.setup","text":"Setup Finder execution Parameters: input ( Optional [ str ] , default: None ) \u2013 initial search string Source code in pzp/finder.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Finder execution Args: input: initial search string \"\"\" self . line_editor = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) # Load the candidate list self . refresh_candidates () # Filter the items, calculate the screen offset self . apply_filter () # If lazy mode is enabled, starts the finder only if the candidates are more than one if self . config . lazy and self . candidates . matching_candidates_len <= 1 : raise AcceptAction ( action = \"lazy-accept\" , ch = None , selected_item = self . prepare_result (), line = self . line_editor . line ) # Calculate the required height and setup the screen self . layout . screen_setup ( self . line_editor )","title":"setup"},{"location":"api/finder/#pzp.finder.Finder.show","text":"Open pzp and return the selected element Parameters: input ( Optional [ str ] , default: None ) \u2013 initial search string Raises: AcceptAction \u2013 Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction \u2013 Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction \u2013 Raises when the user presses a key that is mapped to the \"custom\" action. Source code in pzp/finder.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial search string Raises: AcceptAction: Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction: Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction: Raises when the user presses a key that is mapped to the \"custom\" action. \"\"\" try : self . setup ( input = input ) while True : self . process_key () self . apply_filter () self . update_screen () finally : self . layout . cleanup ()","title":"show"},{"location":"api/finder/#pzp.finder.Finder.up","text":"Move one line up Source code in pzp/finder.py 183 184 185 186 @Action ( \"up\" , keys = [ \"ctrl-k\" , \"ctrl-p\" , \"up\" ]) def up ( self ) -> None : \"Move one line up\" self . selected = self . layout . move_selection ( self . selected , lines =+ 1 )","title":"up"},{"location":"api/finder/#pzp.finder.Finder.update_screen","text":"Update the screen - erase the old items, print the filtered items and the prompt Source code in pzp/finder.py 157 158 159 def update_screen ( self ) -> None : \"Update the screen - erase the old items, print the filtered items and the prompt\" self . layout . update_screen ( selected = self . selected )","title":"update_screen"},{"location":"api/input/","text":"get_char ( timeout = None ) Read a keypress and return the resulting character as a string. Returns: char ( Optional [ str ] ) \u2013 the pressed key or the key description (e.g. \"home\") Source code in pzp/input_win.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def get_char ( timeout : Optional [ int ] = None ) -> Optional [ str ]: \"\"\" Read a keypress and return the resulting character as a string. Returns: char: the pressed key or the key description (e.g. \"home\") \"\"\" ch : str = getwch () if ch == WIN_ESC or ch == NULL : # When reading arrow/insert/del key, the first call returnx 0xe0 keys_mapping = KEYS_MAPPING while keys_mapping : ch = ch + getwch () keys_mapping = { k : v for k , v in keys_mapping . items () if k . startswith ( ch )} if len ( keys_mapping ) == 1 and next ( iter ( keys_mapping . keys ())) == ch : result = next ( iter ( keys_mapping . values ())) return result return \"\" return ch","title":"pzp.input"},{"location":"api/input/#pzp.input.get_char","text":"Read a keypress and return the resulting character as a string. Returns: char ( Optional [ str ] ) \u2013 the pressed key or the key description (e.g. \"home\") Source code in pzp/input_win.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def get_char ( timeout : Optional [ int ] = None ) -> Optional [ str ]: \"\"\" Read a keypress and return the resulting character as a string. Returns: char: the pressed key or the key description (e.g. \"home\") \"\"\" ch : str = getwch () if ch == WIN_ESC or ch == NULL : # When reading arrow/insert/del key, the first call returnx 0xe0 keys_mapping = KEYS_MAPPING while keys_mapping : ch = ch + getwch () keys_mapping = { k : v for k , v in keys_mapping . items () if k . startswith ( ch )} if len ( keys_mapping ) == 1 and next ( iter ( keys_mapping . keys ())) == ch : result = next ( iter ( keys_mapping . values ())) return result return \"\" return ch","title":"get_char"},{"location":"api/keys/","text":"KeyEvent Source code in pzp/keys.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 class KeyEvent : def __init__ ( self , ch : str , action : Optional [ str ]) -> None : \"\"\" Key Event represents a key action on the keyboard. Args: ch: Pressed key action: Action Attributes: ch: Pressed key action: Action \"\"\" self . ch = ch self . action = action def __str__ ( self ) -> str : return f \"< { key_to_str ( self . ch ) } , { self . action or '-' } >\" # pragma: no cover __init__ ( ch , action ) Key Event represents a key action on the keyboard. Parameters: ch ( str ) \u2013 Pressed key action ( Optional [ str ] ) \u2013 Action Attributes: ch \u2013 Pressed key action \u2013 Action Source code in pzp/keys.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def __init__ ( self , ch : str , action : Optional [ str ]) -> None : \"\"\" Key Event represents a key action on the keyboard. Args: ch: Pressed key action: Action Attributes: ch: Pressed key action: Action \"\"\" self . ch = ch self . action = action KeysHandler Source code in pzp/keys.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 class KeysHandler : def __init__ ( self , keys_binding : Optional [ KeysBinding ] = None ) -> None : \"\"\" Keys handler is a collection of bindings of keys to actions. Args: keys_binding: Custom key binding Attributes: keycodes_actions: key => action mapping \"\"\" self . keycodes_actions : Dict [ str , str ] = {} if keys_binding : self . update ( keys_binding ) def update ( self , keys_binding : KeysBinding ) -> None : for action , keys in keys_binding . items (): self . set_keys_binding ( keys , action ) def set_keys_binding ( self , keys : Sequence [ str ], action : str ) -> None : \"Add a binding for one or more keys to an action\" for key in keys : self . set_key_binding ( key , action ) def set_key_binding ( self , key : str , action : str ) -> None : \"Add a binding for one key to an action\" self . keycodes_actions [ KEYS [ key ] if len ( key ) > 1 else key ] = action def get_key_event ( self , ch : Optional [ str ] = None , timeout : Optional [ int ] = None ) -> KeyEvent : if ch is None : ch = get_char ( timeout ) if ch is None : ch = \" \\0 \" action = None else : action = self . keycodes_actions . get ( ch ) return KeyEvent ( ch = ch , action = action ) def __str__ ( self ) -> str : return \" \\n \" . join ( f \"< { key_to_str ( ch ) } , { action or '-' } >\" for ch , action in self . keycodes_actions . items ()) # pragma: no cover __init__ ( keys_binding = None ) Keys handler is a collection of bindings of keys to actions. Parameters: keys_binding ( Optional [ KeysBinding ] , default: None ) \u2013 Custom key binding Attributes: keycodes_actions \u2013 key => action mapping Source code in pzp/keys.py 91 92 93 94 95 96 97 98 99 100 101 102 103 def __init__ ( self , keys_binding : Optional [ KeysBinding ] = None ) -> None : \"\"\" Keys handler is a collection of bindings of keys to actions. Args: keys_binding: Custom key binding Attributes: keycodes_actions: key => action mapping \"\"\" self . keycodes_actions : Dict [ str , str ] = {} if keys_binding : self . update ( keys_binding ) set_key_binding ( key , action ) Add a binding for one key to an action Source code in pzp/keys.py 114 115 116 def set_key_binding ( self , key : str , action : str ) -> None : \"Add a binding for one key to an action\" self . keycodes_actions [ KEYS [ key ] if len ( key ) > 1 else key ] = action set_keys_binding ( keys , action ) Add a binding for one or more keys to an action Source code in pzp/keys.py 109 110 111 112 def set_keys_binding ( self , keys : Sequence [ str ], action : str ) -> None : \"Add a binding for one or more keys to an action\" for key in keys : self . set_key_binding ( key , action ) key_to_str ( ch ) Return the textual representation of a char Source code in pzp/keys.py 65 66 67 def key_to_str ( ch : str ) -> str : \"Return the textual representation of a char\" return f \"0x { ord ( ch ) : x } \" if len ( ch ) == 1 else f \" { ch } \"","title":"pzp.keys"},{"location":"api/keys/#pzp.keys.KeyEvent","text":"Source code in pzp/keys.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 class KeyEvent : def __init__ ( self , ch : str , action : Optional [ str ]) -> None : \"\"\" Key Event represents a key action on the keyboard. Args: ch: Pressed key action: Action Attributes: ch: Pressed key action: Action \"\"\" self . ch = ch self . action = action def __str__ ( self ) -> str : return f \"< { key_to_str ( self . ch ) } , { self . action or '-' } >\" # pragma: no cover","title":"KeyEvent"},{"location":"api/keys/#pzp.keys.KeyEvent.__init__","text":"Key Event represents a key action on the keyboard. Parameters: ch ( str ) \u2013 Pressed key action ( Optional [ str ] ) \u2013 Action Attributes: ch \u2013 Pressed key action \u2013 Action Source code in pzp/keys.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def __init__ ( self , ch : str , action : Optional [ str ]) -> None : \"\"\" Key Event represents a key action on the keyboard. Args: ch: Pressed key action: Action Attributes: ch: Pressed key action: Action \"\"\" self . ch = ch self . action = action","title":"__init__"},{"location":"api/keys/#pzp.keys.KeysHandler","text":"Source code in pzp/keys.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 class KeysHandler : def __init__ ( self , keys_binding : Optional [ KeysBinding ] = None ) -> None : \"\"\" Keys handler is a collection of bindings of keys to actions. Args: keys_binding: Custom key binding Attributes: keycodes_actions: key => action mapping \"\"\" self . keycodes_actions : Dict [ str , str ] = {} if keys_binding : self . update ( keys_binding ) def update ( self , keys_binding : KeysBinding ) -> None : for action , keys in keys_binding . items (): self . set_keys_binding ( keys , action ) def set_keys_binding ( self , keys : Sequence [ str ], action : str ) -> None : \"Add a binding for one or more keys to an action\" for key in keys : self . set_key_binding ( key , action ) def set_key_binding ( self , key : str , action : str ) -> None : \"Add a binding for one key to an action\" self . keycodes_actions [ KEYS [ key ] if len ( key ) > 1 else key ] = action def get_key_event ( self , ch : Optional [ str ] = None , timeout : Optional [ int ] = None ) -> KeyEvent : if ch is None : ch = get_char ( timeout ) if ch is None : ch = \" \\0 \" action = None else : action = self . keycodes_actions . get ( ch ) return KeyEvent ( ch = ch , action = action ) def __str__ ( self ) -> str : return \" \\n \" . join ( f \"< { key_to_str ( ch ) } , { action or '-' } >\" for ch , action in self . keycodes_actions . items ()) # pragma: no cover","title":"KeysHandler"},{"location":"api/keys/#pzp.keys.KeysHandler.__init__","text":"Keys handler is a collection of bindings of keys to actions. Parameters: keys_binding ( Optional [ KeysBinding ] , default: None ) \u2013 Custom key binding Attributes: keycodes_actions \u2013 key => action mapping Source code in pzp/keys.py 91 92 93 94 95 96 97 98 99 100 101 102 103 def __init__ ( self , keys_binding : Optional [ KeysBinding ] = None ) -> None : \"\"\" Keys handler is a collection of bindings of keys to actions. Args: keys_binding: Custom key binding Attributes: keycodes_actions: key => action mapping \"\"\" self . keycodes_actions : Dict [ str , str ] = {} if keys_binding : self . update ( keys_binding )","title":"__init__"},{"location":"api/keys/#pzp.keys.KeysHandler.set_key_binding","text":"Add a binding for one key to an action Source code in pzp/keys.py 114 115 116 def set_key_binding ( self , key : str , action : str ) -> None : \"Add a binding for one key to an action\" self . keycodes_actions [ KEYS [ key ] if len ( key ) > 1 else key ] = action","title":"set_key_binding"},{"location":"api/keys/#pzp.keys.KeysHandler.set_keys_binding","text":"Add a binding for one or more keys to an action Source code in pzp/keys.py 109 110 111 112 def set_keys_binding ( self , keys : Sequence [ str ], action : str ) -> None : \"Add a binding for one or more keys to an action\" for key in keys : self . set_key_binding ( key , action )","title":"set_keys_binding"},{"location":"api/keys/#pzp.keys.key_to_str","text":"Return the textual representation of a char Source code in pzp/keys.py 65 66 67 def key_to_str ( ch : str ) -> str : \"Return the textual representation of a char\" return f \"0x { ord ( ch ) : x } \" if len ( ch ) == 1 else f \" { ch } \"","title":"key_to_str"},{"location":"api/line_editor/","text":"LineEditor Bases: ActionsHandler Source code in pzp/line_editor.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 class LineEditor ( ActionsHandler ): def __init__ ( self , line : Optional [ str ] = None , keys_handler : Optional [ KeysHandler ] = None ) -> None : \"\"\" Line editor Args: line: Initial value keys_handler: Keys handler \"\"\" super () . __init__ ( keys_handler = keys_handler ) self . line = line or \"\" self . cursor_pos : int = len ( self . line ) def set_cursor_pos ( self , cursor_pos : int ) -> None : \"Set cursor position (absolute)\" self . cursor_pos = max ( min ( cursor_pos , len ( self . line )), 0 ) def adj_cursor_pos ( self , characters : int ) -> None : \"Set cursor position (relative to current position)\" self . cursor_pos = max ( min ( self . cursor_pos + characters , len ( self . line )), 0 ) def insert ( self , ch : str ) -> None : \"Insert characters at the current cursor position\" if ch >= SPACE : # Add the character to line self . line = self . line [ 0 : self . cursor_pos ] + ch + self . line [ self . cursor_pos :] self . adj_cursor_pos ( len ( ch )) @Action ( \"backward-char\" , keys = [ \"ctrl-b\" , \"left\" ]) def backward_char ( self ) -> None : \"Move the cursor back one character\" self . set_cursor_pos ( self . cursor_pos - 1 ) @Action ( \"forward-char\" , keys = [ \"ctrl-f\" , \"right\" ]) def forward_char ( self ) -> None : \"Move the cursor forward one character\" self . set_cursor_pos ( self . cursor_pos + 1 ) @Action ( \"beginning-of-line\" , keys = [ \"ctrl-a\" , \"home\" ]) def beginning_of_line ( self ) -> None : \"Move the cursor to the line start\" self . set_cursor_pos ( 0 ) @Action ( \"end-of-line\" , keys = [ \"ctrl-e\" , \"end\" ]) def end_of_line ( self ) -> None : \"Move the cursor to the line end\" self . set_cursor_pos ( len ( self )) @Action ( \"backward-delete-char\" , keys = [ \"ctrl-h\" , \"bspace\" ]) def delete_backward_char ( self ) -> None : \"Delete the previous character\" if self . cursor_pos > 0 : self . line = self . line [: self . cursor_pos - 1 ] + self . line [ self . cursor_pos :] self . adj_cursor_pos ( - 1 ) @Action ( \"delete-char\" , keys = [ \"ctrl-d\" , \"del\" ]) def delete_char ( self ) -> None : \"Delete the current character\" self . line = self . line [: self . cursor_pos ] + self . line [ self . cursor_pos + 1 :] self . adj_cursor_pos ( 0 ) @Action ( \"default\" ) def default ( self , key_event : KeyEvent ) -> None : self . insert ( key_event . ch ) def print ( self , screen : \"Screen\" ) -> None : \"\"\" Print the line and set the cursor position Args: screen: Screen instance \"\"\" screen . write ( self . line ) . move_left ( len ( self ) - self . cursor_pos ) def __len__ ( self ) -> int : \"Return line length\" return len ( self . line ) def __str__ ( self ) -> str : \"Return the line\" return self . line __init__ ( line = None , keys_handler = None ) Line editor Parameters: line ( Optional [ str ] , default: None ) \u2013 Initial value keys_handler ( Optional [ KeysHandler ] , default: None ) \u2013 Keys handler Source code in pzp/line_editor.py 16 17 18 19 20 21 22 23 24 25 26 def __init__ ( self , line : Optional [ str ] = None , keys_handler : Optional [ KeysHandler ] = None ) -> None : \"\"\" Line editor Args: line: Initial value keys_handler: Keys handler \"\"\" super () . __init__ ( keys_handler = keys_handler ) self . line = line or \"\" self . cursor_pos : int = len ( self . line ) __len__ () Return line length Source code in pzp/line_editor.py 88 89 90 def __len__ ( self ) -> int : \"Return line length\" return len ( self . line ) __str__ () Return the line Source code in pzp/line_editor.py 92 93 94 def __str__ ( self ) -> str : \"Return the line\" return self . line adj_cursor_pos ( characters ) Set cursor position (relative to current position) Source code in pzp/line_editor.py 32 33 34 def adj_cursor_pos ( self , characters : int ) -> None : \"Set cursor position (relative to current position)\" self . cursor_pos = max ( min ( self . cursor_pos + characters , len ( self . line )), 0 ) backward_char () Move the cursor back one character Source code in pzp/line_editor.py 42 43 44 45 @Action ( \"backward-char\" , keys = [ \"ctrl-b\" , \"left\" ]) def backward_char ( self ) -> None : \"Move the cursor back one character\" self . set_cursor_pos ( self . cursor_pos - 1 ) beginning_of_line () Move the cursor to the line start Source code in pzp/line_editor.py 52 53 54 55 @Action ( \"beginning-of-line\" , keys = [ \"ctrl-a\" , \"home\" ]) def beginning_of_line ( self ) -> None : \"Move the cursor to the line start\" self . set_cursor_pos ( 0 ) delete_backward_char () Delete the previous character Source code in pzp/line_editor.py 62 63 64 65 66 67 @Action ( \"backward-delete-char\" , keys = [ \"ctrl-h\" , \"bspace\" ]) def delete_backward_char ( self ) -> None : \"Delete the previous character\" if self . cursor_pos > 0 : self . line = self . line [: self . cursor_pos - 1 ] + self . line [ self . cursor_pos :] self . adj_cursor_pos ( - 1 ) delete_char () Delete the current character Source code in pzp/line_editor.py 69 70 71 72 73 @Action ( \"delete-char\" , keys = [ \"ctrl-d\" , \"del\" ]) def delete_char ( self ) -> None : \"Delete the current character\" self . line = self . line [: self . cursor_pos ] + self . line [ self . cursor_pos + 1 :] self . adj_cursor_pos ( 0 ) end_of_line () Move the cursor to the line end Source code in pzp/line_editor.py 57 58 59 60 @Action ( \"end-of-line\" , keys = [ \"ctrl-e\" , \"end\" ]) def end_of_line ( self ) -> None : \"Move the cursor to the line end\" self . set_cursor_pos ( len ( self )) forward_char () Move the cursor forward one character Source code in pzp/line_editor.py 47 48 49 50 @Action ( \"forward-char\" , keys = [ \"ctrl-f\" , \"right\" ]) def forward_char ( self ) -> None : \"Move the cursor forward one character\" self . set_cursor_pos ( self . cursor_pos + 1 ) insert ( ch ) Insert characters at the current cursor position Source code in pzp/line_editor.py 36 37 38 39 40 def insert ( self , ch : str ) -> None : \"Insert characters at the current cursor position\" if ch >= SPACE : # Add the character to line self . line = self . line [ 0 : self . cursor_pos ] + ch + self . line [ self . cursor_pos :] self . adj_cursor_pos ( len ( ch )) print ( screen ) Print the line and set the cursor position Parameters: screen ( Screen ) \u2013 Screen instance Source code in pzp/line_editor.py 79 80 81 82 83 84 85 86 def print ( self , screen : \"Screen\" ) -> None : \"\"\" Print the line and set the cursor position Args: screen: Screen instance \"\"\" screen . write ( self . line ) . move_left ( len ( self ) - self . cursor_pos ) set_cursor_pos ( cursor_pos ) Set cursor position (absolute) Source code in pzp/line_editor.py 28 29 30 def set_cursor_pos ( self , cursor_pos : int ) -> None : \"Set cursor position (absolute)\" self . cursor_pos = max ( min ( cursor_pos , len ( self . line )), 0 )","title":"pzp.line_editor"},{"location":"api/line_editor/#pzp.line_editor.LineEditor","text":"Bases: ActionsHandler Source code in pzp/line_editor.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 class LineEditor ( ActionsHandler ): def __init__ ( self , line : Optional [ str ] = None , keys_handler : Optional [ KeysHandler ] = None ) -> None : \"\"\" Line editor Args: line: Initial value keys_handler: Keys handler \"\"\" super () . __init__ ( keys_handler = keys_handler ) self . line = line or \"\" self . cursor_pos : int = len ( self . line ) def set_cursor_pos ( self , cursor_pos : int ) -> None : \"Set cursor position (absolute)\" self . cursor_pos = max ( min ( cursor_pos , len ( self . line )), 0 ) def adj_cursor_pos ( self , characters : int ) -> None : \"Set cursor position (relative to current position)\" self . cursor_pos = max ( min ( self . cursor_pos + characters , len ( self . line )), 0 ) def insert ( self , ch : str ) -> None : \"Insert characters at the current cursor position\" if ch >= SPACE : # Add the character to line self . line = self . line [ 0 : self . cursor_pos ] + ch + self . line [ self . cursor_pos :] self . adj_cursor_pos ( len ( ch )) @Action ( \"backward-char\" , keys = [ \"ctrl-b\" , \"left\" ]) def backward_char ( self ) -> None : \"Move the cursor back one character\" self . set_cursor_pos ( self . cursor_pos - 1 ) @Action ( \"forward-char\" , keys = [ \"ctrl-f\" , \"right\" ]) def forward_char ( self ) -> None : \"Move the cursor forward one character\" self . set_cursor_pos ( self . cursor_pos + 1 ) @Action ( \"beginning-of-line\" , keys = [ \"ctrl-a\" , \"home\" ]) def beginning_of_line ( self ) -> None : \"Move the cursor to the line start\" self . set_cursor_pos ( 0 ) @Action ( \"end-of-line\" , keys = [ \"ctrl-e\" , \"end\" ]) def end_of_line ( self ) -> None : \"Move the cursor to the line end\" self . set_cursor_pos ( len ( self )) @Action ( \"backward-delete-char\" , keys = [ \"ctrl-h\" , \"bspace\" ]) def delete_backward_char ( self ) -> None : \"Delete the previous character\" if self . cursor_pos > 0 : self . line = self . line [: self . cursor_pos - 1 ] + self . line [ self . cursor_pos :] self . adj_cursor_pos ( - 1 ) @Action ( \"delete-char\" , keys = [ \"ctrl-d\" , \"del\" ]) def delete_char ( self ) -> None : \"Delete the current character\" self . line = self . line [: self . cursor_pos ] + self . line [ self . cursor_pos + 1 :] self . adj_cursor_pos ( 0 ) @Action ( \"default\" ) def default ( self , key_event : KeyEvent ) -> None : self . insert ( key_event . ch ) def print ( self , screen : \"Screen\" ) -> None : \"\"\" Print the line and set the cursor position Args: screen: Screen instance \"\"\" screen . write ( self . line ) . move_left ( len ( self ) - self . cursor_pos ) def __len__ ( self ) -> int : \"Return line length\" return len ( self . line ) def __str__ ( self ) -> str : \"Return the line\" return self . line","title":"LineEditor"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.__init__","text":"Line editor Parameters: line ( Optional [ str ] , default: None ) \u2013 Initial value keys_handler ( Optional [ KeysHandler ] , default: None ) \u2013 Keys handler Source code in pzp/line_editor.py 16 17 18 19 20 21 22 23 24 25 26 def __init__ ( self , line : Optional [ str ] = None , keys_handler : Optional [ KeysHandler ] = None ) -> None : \"\"\" Line editor Args: line: Initial value keys_handler: Keys handler \"\"\" super () . __init__ ( keys_handler = keys_handler ) self . line = line or \"\" self . cursor_pos : int = len ( self . line )","title":"__init__"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.__len__","text":"Return line length Source code in pzp/line_editor.py 88 89 90 def __len__ ( self ) -> int : \"Return line length\" return len ( self . line )","title":"__len__"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.__str__","text":"Return the line Source code in pzp/line_editor.py 92 93 94 def __str__ ( self ) -> str : \"Return the line\" return self . line","title":"__str__"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.adj_cursor_pos","text":"Set cursor position (relative to current position) Source code in pzp/line_editor.py 32 33 34 def adj_cursor_pos ( self , characters : int ) -> None : \"Set cursor position (relative to current position)\" self . cursor_pos = max ( min ( self . cursor_pos + characters , len ( self . line )), 0 )","title":"adj_cursor_pos"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.backward_char","text":"Move the cursor back one character Source code in pzp/line_editor.py 42 43 44 45 @Action ( \"backward-char\" , keys = [ \"ctrl-b\" , \"left\" ]) def backward_char ( self ) -> None : \"Move the cursor back one character\" self . set_cursor_pos ( self . cursor_pos - 1 )","title":"backward_char"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.beginning_of_line","text":"Move the cursor to the line start Source code in pzp/line_editor.py 52 53 54 55 @Action ( \"beginning-of-line\" , keys = [ \"ctrl-a\" , \"home\" ]) def beginning_of_line ( self ) -> None : \"Move the cursor to the line start\" self . set_cursor_pos ( 0 )","title":"beginning_of_line"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.delete_backward_char","text":"Delete the previous character Source code in pzp/line_editor.py 62 63 64 65 66 67 @Action ( \"backward-delete-char\" , keys = [ \"ctrl-h\" , \"bspace\" ]) def delete_backward_char ( self ) -> None : \"Delete the previous character\" if self . cursor_pos > 0 : self . line = self . line [: self . cursor_pos - 1 ] + self . line [ self . cursor_pos :] self . adj_cursor_pos ( - 1 )","title":"delete_backward_char"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.delete_char","text":"Delete the current character Source code in pzp/line_editor.py 69 70 71 72 73 @Action ( \"delete-char\" , keys = [ \"ctrl-d\" , \"del\" ]) def delete_char ( self ) -> None : \"Delete the current character\" self . line = self . line [: self . cursor_pos ] + self . line [ self . cursor_pos + 1 :] self . adj_cursor_pos ( 0 )","title":"delete_char"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.end_of_line","text":"Move the cursor to the line end Source code in pzp/line_editor.py 57 58 59 60 @Action ( \"end-of-line\" , keys = [ \"ctrl-e\" , \"end\" ]) def end_of_line ( self ) -> None : \"Move the cursor to the line end\" self . set_cursor_pos ( len ( self ))","title":"end_of_line"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.forward_char","text":"Move the cursor forward one character Source code in pzp/line_editor.py 47 48 49 50 @Action ( \"forward-char\" , keys = [ \"ctrl-f\" , \"right\" ]) def forward_char ( self ) -> None : \"Move the cursor forward one character\" self . set_cursor_pos ( self . cursor_pos + 1 )","title":"forward_char"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.insert","text":"Insert characters at the current cursor position Source code in pzp/line_editor.py 36 37 38 39 40 def insert ( self , ch : str ) -> None : \"Insert characters at the current cursor position\" if ch >= SPACE : # Add the character to line self . line = self . line [ 0 : self . cursor_pos ] + ch + self . line [ self . cursor_pos :] self . adj_cursor_pos ( len ( ch ))","title":"insert"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.print","text":"Print the line and set the cursor position Parameters: screen ( Screen ) \u2013 Screen instance Source code in pzp/line_editor.py 79 80 81 82 83 84 85 86 def print ( self , screen : \"Screen\" ) -> None : \"\"\" Print the line and set the cursor position Args: screen: Screen instance \"\"\" screen . write ( self . line ) . move_left ( len ( self ) - self . cursor_pos )","title":"print"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.set_cursor_pos","text":"Set cursor position (absolute) Source code in pzp/line_editor.py 28 29 30 def set_cursor_pos ( self , cursor_pos : int ) -> None : \"Set cursor position (absolute)\" self . cursor_pos = max ( min ( cursor_pos , len ( self . line )), 0 )","title":"set_cursor_pos"},{"location":"api/matcher/","text":"ExactMatcher Bases: Matcher Exact matcher Source code in pzp/matcher.py 46 47 48 49 50 51 52 53 class ExactMatcher ( Matcher , option = \"exact\" ): \"\"\" Exact matcher \"\"\" def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: pattern = pattern . lower () return [ item for item in candidates if pattern in format_fn ( item ) . lower ()] ExtendedMatcher Bases: Matcher Extended Matcher This matcher accept multiple patterns delimited by spaces, such as: term ^start end$ !not If patter is prefixed by a single-quote character ', it will not be splitted by spaces. A backslash can be prepend to a space to match a literal space character. A term can be prefixed by ^, or suffixed by $ to become an anchored-match term. Then matcher will search for the lines that start with or end with the given string. If a term is prefixed by !, the matcher will exclude the lines that satisfy the term from the result. Source code in pzp/matcher.py 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 class ExtendedMatcher ( Matcher , option = \"extended\" ): \"\"\" Extended Matcher This matcher accept multiple patterns delimited by spaces, such as: term ^start end$ !not If patter is prefixed by a single-quote character ', it will not be splitted by spaces. A backslash can be prepend to a space to match a literal space character. A term can be prefixed by ^, or suffixed by $ to become an anchored-match term. Then matcher will search for the lines that start with or end with the given string. If a term is prefixed by !, the matcher will exclude the lines that satisfy the term from the result. \"\"\" def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: # Prepare the filters filters = [ ExtendedMatcherFilter ( term ) for term in self . split_pattern ( pattern )] # Filter items return [ item for item in candidates if self . filter_item ( filters , item , format_fn )] def filter_item ( self , filters : Sequence [ ExtendedMatcherFilter ], item : Any , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ) ) -> bool : txt : str = format_fn ( item ) . lower () return all ([ filter_fn ( txt ) for filter_fn in filters ]) def split_pattern ( self , pattern : str ) -> Sequence [ str ]: \"Split a pattern into terms\" if pattern . startswith ( \"'\" ) or pattern . startswith ( \"!'\" ): # quote - keep spaces return [ pattern . lower ()] else : return [ term . replace ( \" \\\\ \" , \"\" ) for term in SPLIT_ESCAPED_RE . split ( pattern . lower ()) if term ] split_pattern ( pattern ) Split a pattern into terms Source code in pzp/matcher.py 149 150 151 152 153 154 def split_pattern ( self , pattern : str ) -> Sequence [ str ]: \"Split a pattern into terms\" if pattern . startswith ( \"'\" ) or pattern . startswith ( \"!'\" ): # quote - keep spaces return [ pattern . lower ()] else : return [ term . replace ( \" \\\\ \" , \"\" ) for term in SPLIT_ESCAPED_RE . split ( pattern . lower ()) if term ] ExtendedMatcherFilter Source code in pzp/matcher.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class ExtendedMatcherFilter : def __init__ ( self , term : str ) -> None : self . prefix , self . term , self . suffix = self . split ( term ) # If a term is prefixed by !, the filter will exclude the lines that satisfy the term if \"!\" in self . prefix : self . exclude = True else : self . exclude = False if not self . term : self . exclude = False self . fn = self . always elif \"'\" in self . prefix : # Quoted - Check if the text contains the given term self . fn = self . in_match elif \"^\" in self . prefix : # If a term is prefixed by ^, the filter will include the lines than start with the given term if \"$\" in self . suffix : self . fn = self . exact_match else : self . fn = self . startswith_match elif \"$\" in self . suffix : # If a term is suffixed by $, the filter will include the lines than end with the given term self . fn = self . endswith_match else : # Check if the text contains the given term self . fn = self . in_match @classmethod def split ( cls , term : str ) -> Tuple [ str , str , str ]: \"Split term in prefix, term, suffix\" term , prefix = first_or_default ([( term [ len ( p ) :], p ) for p in PREFIXES if term . startswith ( p )], ( term , \"\" )) term , suffix = first_or_default ([( term [: len ( term ) - len ( s )], s ) for s in SUFFIXES if term . endswith ( s )], ( term , \"\" )) return prefix , term , suffix def __call__ ( self , txt : str ) -> bool : \"Evaluate the filter on the given text\" if self . exclude : return not self . fn ( txt ) else : return self . fn ( txt ) def startswith_match ( self , txt : str ) -> bool : \"True if the text startswith the given term\" return txt . startswith ( self . term ) def endswith_match ( self , txt : str ) -> bool : \"True if the text endswith the given term\" return txt . endswith ( self . term ) def in_match ( self , txt : str ) -> bool : \"True if the text contains the given term\" return self . term in txt def exact_match ( self , txt : str ) -> bool : \"Exact match\" return self . term == txt def always ( self , txt : str ) -> bool : \"Always return True\" return True def __str__ ( self ) -> str : return f \"< { self . prefix } , { self . term } , { self . suffix } >\" # pragma: no cover __call__ ( txt ) Evaluate the filter on the given text Source code in pzp/matcher.py 90 91 92 93 94 95 def __call__ ( self , txt : str ) -> bool : \"Evaluate the filter on the given text\" if self . exclude : return not self . fn ( txt ) else : return self . fn ( txt ) always ( txt ) Always return True Source code in pzp/matcher.py 113 114 115 def always ( self , txt : str ) -> bool : \"Always return True\" return True endswith_match ( txt ) True if the text endswith the given term Source code in pzp/matcher.py 101 102 103 def endswith_match ( self , txt : str ) -> bool : \"True if the text endswith the given term\" return txt . endswith ( self . term ) exact_match ( txt ) Exact match Source code in pzp/matcher.py 109 110 111 def exact_match ( self , txt : str ) -> bool : \"Exact match\" return self . term == txt in_match ( txt ) True if the text contains the given term Source code in pzp/matcher.py 105 106 107 def in_match ( self , txt : str ) -> bool : \"True if the text contains the given term\" return self . term in txt split ( term ) classmethod Split term in prefix, term, suffix Source code in pzp/matcher.py 83 84 85 86 87 88 @classmethod def split ( cls , term : str ) -> Tuple [ str , str , str ]: \"Split term in prefix, term, suffix\" term , prefix = first_or_default ([( term [ len ( p ) :], p ) for p in PREFIXES if term . startswith ( p )], ( term , \"\" )) term , suffix = first_or_default ([( term [: len ( term ) - len ( s )], s ) for s in SUFFIXES if term . endswith ( s )], ( term , \"\" )) return prefix , term , suffix startswith_match ( txt ) True if the text startswith the given term Source code in pzp/matcher.py 97 98 99 def startswith_match ( self , txt : str ) -> bool : \"True if the text startswith the given term\" return txt . startswith ( self . term ) Matcher Bases: ABC Source code in pzp/matcher.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class Matcher ( ABC ): def __init_subclass__ ( cls , option : str , ** kwargs : Dict [ str , Any ]) -> None : \"Register a subclass\" super () . __init_subclass__ ( ** kwargs ) matchers [ option ] = cls @abstractmethod def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: \"\"\" Filter candidates according to the given pattern Args: pattern: Pattern candidates: Candidates format_fn: Items format function Returns: result: Filtered candidates \"\"\" pass # pragma: no cover __init_subclass__ ( option , ** kwargs ) Register a subclass Source code in pzp/matcher.py 25 26 27 28 def __init_subclass__ ( cls , option : str , ** kwargs : Dict [ str , Any ]) -> None : \"Register a subclass\" super () . __init_subclass__ ( ** kwargs ) matchers [ option ] = cls filter ( pattern , candidates , format_fn = lambda x : str ( x )) abstractmethod Filter candidates according to the given pattern Parameters: pattern ( str ) \u2013 Pattern candidates ( Sequence [ Any ] ) \u2013 Candidates format_fn ( Callable [[ Any ], str ] , default: lambda x: str ( x ) ) \u2013 Items format function Returns: result ( Sequence [ Any ] ) \u2013 Filtered candidates Source code in pzp/matcher.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @abstractmethod def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: \"\"\" Filter candidates according to the given pattern Args: pattern: Pattern candidates: Candidates format_fn: Items format function Returns: result: Filtered candidates \"\"\" pass # pragma: no cover get_matcher ( matcher ) Get a matcher instance by name or by class Source code in pzp/matcher.py 157 158 159 160 161 162 163 164 def get_matcher ( matcher : Union [ Matcher , Type [ Matcher ], str ]) -> Matcher : \"Get a matcher instance by name or by class\" if isinstance ( matcher , Matcher ): return matcher elif isinstance ( matcher , str ): return matchers [ matcher ]() else : return matcher () list_matchers () List matchers Source code in pzp/matcher.py 167 168 169 def list_matchers () -> Sequence [ str ]: \"List matchers\" return list ( matchers . keys ())","title":"pzp.matcher"},{"location":"api/matcher/#pzp.matcher.ExactMatcher","text":"Bases: Matcher Exact matcher Source code in pzp/matcher.py 46 47 48 49 50 51 52 53 class ExactMatcher ( Matcher , option = \"exact\" ): \"\"\" Exact matcher \"\"\" def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: pattern = pattern . lower () return [ item for item in candidates if pattern in format_fn ( item ) . lower ()]","title":"ExactMatcher"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcher","text":"Bases: Matcher Extended Matcher This matcher accept multiple patterns delimited by spaces, such as: term ^start end$ !not If patter is prefixed by a single-quote character ', it will not be splitted by spaces. A backslash can be prepend to a space to match a literal space character. A term can be prefixed by ^, or suffixed by $ to become an anchored-match term. Then matcher will search for the lines that start with or end with the given string. If a term is prefixed by !, the matcher will exclude the lines that satisfy the term from the result. Source code in pzp/matcher.py 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 class ExtendedMatcher ( Matcher , option = \"extended\" ): \"\"\" Extended Matcher This matcher accept multiple patterns delimited by spaces, such as: term ^start end$ !not If patter is prefixed by a single-quote character ', it will not be splitted by spaces. A backslash can be prepend to a space to match a literal space character. A term can be prefixed by ^, or suffixed by $ to become an anchored-match term. Then matcher will search for the lines that start with or end with the given string. If a term is prefixed by !, the matcher will exclude the lines that satisfy the term from the result. \"\"\" def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: # Prepare the filters filters = [ ExtendedMatcherFilter ( term ) for term in self . split_pattern ( pattern )] # Filter items return [ item for item in candidates if self . filter_item ( filters , item , format_fn )] def filter_item ( self , filters : Sequence [ ExtendedMatcherFilter ], item : Any , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ) ) -> bool : txt : str = format_fn ( item ) . lower () return all ([ filter_fn ( txt ) for filter_fn in filters ]) def split_pattern ( self , pattern : str ) -> Sequence [ str ]: \"Split a pattern into terms\" if pattern . startswith ( \"'\" ) or pattern . startswith ( \"!'\" ): # quote - keep spaces return [ pattern . lower ()] else : return [ term . replace ( \" \\\\ \" , \"\" ) for term in SPLIT_ESCAPED_RE . split ( pattern . lower ()) if term ]","title":"ExtendedMatcher"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcher.split_pattern","text":"Split a pattern into terms Source code in pzp/matcher.py 149 150 151 152 153 154 def split_pattern ( self , pattern : str ) -> Sequence [ str ]: \"Split a pattern into terms\" if pattern . startswith ( \"'\" ) or pattern . startswith ( \"!'\" ): # quote - keep spaces return [ pattern . lower ()] else : return [ term . replace ( \" \\\\ \" , \"\" ) for term in SPLIT_ESCAPED_RE . split ( pattern . lower ()) if term ]","title":"split_pattern"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter","text":"Source code in pzp/matcher.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class ExtendedMatcherFilter : def __init__ ( self , term : str ) -> None : self . prefix , self . term , self . suffix = self . split ( term ) # If a term is prefixed by !, the filter will exclude the lines that satisfy the term if \"!\" in self . prefix : self . exclude = True else : self . exclude = False if not self . term : self . exclude = False self . fn = self . always elif \"'\" in self . prefix : # Quoted - Check if the text contains the given term self . fn = self . in_match elif \"^\" in self . prefix : # If a term is prefixed by ^, the filter will include the lines than start with the given term if \"$\" in self . suffix : self . fn = self . exact_match else : self . fn = self . startswith_match elif \"$\" in self . suffix : # If a term is suffixed by $, the filter will include the lines than end with the given term self . fn = self . endswith_match else : # Check if the text contains the given term self . fn = self . in_match @classmethod def split ( cls , term : str ) -> Tuple [ str , str , str ]: \"Split term in prefix, term, suffix\" term , prefix = first_or_default ([( term [ len ( p ) :], p ) for p in PREFIXES if term . startswith ( p )], ( term , \"\" )) term , suffix = first_or_default ([( term [: len ( term ) - len ( s )], s ) for s in SUFFIXES if term . endswith ( s )], ( term , \"\" )) return prefix , term , suffix def __call__ ( self , txt : str ) -> bool : \"Evaluate the filter on the given text\" if self . exclude : return not self . fn ( txt ) else : return self . fn ( txt ) def startswith_match ( self , txt : str ) -> bool : \"True if the text startswith the given term\" return txt . startswith ( self . term ) def endswith_match ( self , txt : str ) -> bool : \"True if the text endswith the given term\" return txt . endswith ( self . term ) def in_match ( self , txt : str ) -> bool : \"True if the text contains the given term\" return self . term in txt def exact_match ( self , txt : str ) -> bool : \"Exact match\" return self . term == txt def always ( self , txt : str ) -> bool : \"Always return True\" return True def __str__ ( self ) -> str : return f \"< { self . prefix } , { self . term } , { self . suffix } >\" # pragma: no cover","title":"ExtendedMatcherFilter"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.__call__","text":"Evaluate the filter on the given text Source code in pzp/matcher.py 90 91 92 93 94 95 def __call__ ( self , txt : str ) -> bool : \"Evaluate the filter on the given text\" if self . exclude : return not self . fn ( txt ) else : return self . fn ( txt )","title":"__call__"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.always","text":"Always return True Source code in pzp/matcher.py 113 114 115 def always ( self , txt : str ) -> bool : \"Always return True\" return True","title":"always"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.endswith_match","text":"True if the text endswith the given term Source code in pzp/matcher.py 101 102 103 def endswith_match ( self , txt : str ) -> bool : \"True if the text endswith the given term\" return txt . endswith ( self . term )","title":"endswith_match"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.exact_match","text":"Exact match Source code in pzp/matcher.py 109 110 111 def exact_match ( self , txt : str ) -> bool : \"Exact match\" return self . term == txt","title":"exact_match"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.in_match","text":"True if the text contains the given term Source code in pzp/matcher.py 105 106 107 def in_match ( self , txt : str ) -> bool : \"True if the text contains the given term\" return self . term in txt","title":"in_match"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.split","text":"Split term in prefix, term, suffix Source code in pzp/matcher.py 83 84 85 86 87 88 @classmethod def split ( cls , term : str ) -> Tuple [ str , str , str ]: \"Split term in prefix, term, suffix\" term , prefix = first_or_default ([( term [ len ( p ) :], p ) for p in PREFIXES if term . startswith ( p )], ( term , \"\" )) term , suffix = first_or_default ([( term [: len ( term ) - len ( s )], s ) for s in SUFFIXES if term . endswith ( s )], ( term , \"\" )) return prefix , term , suffix","title":"split"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.startswith_match","text":"True if the text startswith the given term Source code in pzp/matcher.py 97 98 99 def startswith_match ( self , txt : str ) -> bool : \"True if the text startswith the given term\" return txt . startswith ( self . term )","title":"startswith_match"},{"location":"api/matcher/#pzp.matcher.Matcher","text":"Bases: ABC Source code in pzp/matcher.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class Matcher ( ABC ): def __init_subclass__ ( cls , option : str , ** kwargs : Dict [ str , Any ]) -> None : \"Register a subclass\" super () . __init_subclass__ ( ** kwargs ) matchers [ option ] = cls @abstractmethod def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: \"\"\" Filter candidates according to the given pattern Args: pattern: Pattern candidates: Candidates format_fn: Items format function Returns: result: Filtered candidates \"\"\" pass # pragma: no cover","title":"Matcher"},{"location":"api/matcher/#pzp.matcher.Matcher.__init_subclass__","text":"Register a subclass Source code in pzp/matcher.py 25 26 27 28 def __init_subclass__ ( cls , option : str , ** kwargs : Dict [ str , Any ]) -> None : \"Register a subclass\" super () . __init_subclass__ ( ** kwargs ) matchers [ option ] = cls","title":"__init_subclass__"},{"location":"api/matcher/#pzp.matcher.Matcher.filter","text":"Filter candidates according to the given pattern Parameters: pattern ( str ) \u2013 Pattern candidates ( Sequence [ Any ] ) \u2013 Candidates format_fn ( Callable [[ Any ], str ] , default: lambda x: str ( x ) ) \u2013 Items format function Returns: result ( Sequence [ Any ] ) \u2013 Filtered candidates Source code in pzp/matcher.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @abstractmethod def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: \"\"\" Filter candidates according to the given pattern Args: pattern: Pattern candidates: Candidates format_fn: Items format function Returns: result: Filtered candidates \"\"\" pass # pragma: no cover","title":"filter"},{"location":"api/matcher/#pzp.matcher.get_matcher","text":"Get a matcher instance by name or by class Source code in pzp/matcher.py 157 158 159 160 161 162 163 164 def get_matcher ( matcher : Union [ Matcher , Type [ Matcher ], str ]) -> Matcher : \"Get a matcher instance by name or by class\" if isinstance ( matcher , Matcher ): return matcher elif isinstance ( matcher , str ): return matchers [ matcher ]() else : return matcher ()","title":"get_matcher"},{"location":"api/matcher/#pzp.matcher.list_matchers","text":"List matchers Source code in pzp/matcher.py 167 168 169 def list_matchers () -> Sequence [ str ]: \"List matchers\" return list ( matchers . keys ())","title":"list_matchers"},{"location":"api/module/","text":"__version__ = '0.0.24' module-attribute PZP Version CustomAction Bases: GenericAction The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Parameters: action ( str ) \u2013 action selected_item ( Any , default: None ) \u2013 selected item, if any ch ( Optional [ str ] ) \u2013 pressed key line ( Optional [ str ] , default: None ) \u2013 user input Attributes: action \u2013 action selected_item \u2013 selected item, if any ch \u2013 pressed key line \u2013 user input Source code in pzp/exceptions.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 class CustomAction ( GenericAction ): \"\"\" The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Args: action: action selected_item: selected item, if any ch: pressed key line: user input Attributes: action: action selected_item: selected item, if any ch: pressed key line: user input \"\"\" def __init__ ( self , action : str , ch : Optional [ str ], selected_item : Any = None , line : Optional [ str ] = None ): super () . __init__ ( action , ch , selected_item , line ) Finder Bases: ActionsHandler Source code in pzp/finder.pyclass Finder ( ActionsHandler ): def __init__ ( self , candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], fullscreen : bool = True , height : Optional [ int ] = None , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Union [ Type [ Layout ], str ] = DEFAULT_LAYOUT , info_style : Union [ InfoStyle , str ] = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ], str ] = DEFAULT_MATCHER , lazy : bool = False , output_stream : TextIO = sys . stderr , auto_refresh : Optional [ int ] = None , ): \"\"\" Initializate Finder object Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher lazy: Lazy mode, starts the finder only if the candidates are more than one output_stream: Output stream auto_refresh: Auto refresh period (in seconds) \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . config = Config ( fullscreen , height , format_fn , info_style , pointer_str , prompt_str , header_str , lazy , output_stream , auto_refresh , ) self . candidates = Candidates ( candidates = candidates , format_fn = format_fn , matcher = matcher ) self . layout : Layout = get_layout ( layout = layout , config = self . config , candidates = self . candidates ) def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Finder execution Args: input: initial search string \"\"\" self . line_editor = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) # Load the candidate list self . refresh_candidates () # Filter the items, calculate the screen offset self . apply_filter () # If lazy mode is enabled, starts the finder only if the candidates are more than one if self . config . lazy and self . candidates . matching_candidates_len <= 1 : raise AcceptAction ( action = \"lazy-accept\" , ch = None , selected_item = self . prepare_result (), line = self . line_editor . line ) # Calculate the required height and setup the screen self . layout . screen_setup ( self . line_editor ) def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial search string Raises: AcceptAction: Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction: Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction: Raises when the user presses a key that is mapped to the \"custom\" action. \"\"\" try : self . setup ( input = input ) while True : self . process_key () self . apply_filter () self . update_screen () finally : self . layout . cleanup () def refresh_candidates ( self ) -> None : \"Load/reload the candidate list\" self . candidates . refresh_candidates () self . selected : int = 0 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch , timeout = self . config . auto_refresh ) try : self . line_editor . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line , ) # type: ignore def apply_filter ( self ) -> None : \"Filter the items\" if self . config . auto_refresh : self . candidates . refresh_candidates () self . candidates . apply_filter ( pattern = str ( self . line_editor )) self . selected = max ( min ( self . selected , self . candidates . matching_candidates_len - 1 ), 0 ) def update_screen ( self ) -> None : \"Update the screen - erase the old items, print the filtered items and the prompt\" self . layout . update_screen ( selected = self . selected ) def prepare_result ( self ) -> Any : \"Output the selected item, if any\" try : return self . candidates . matching_candidates [ self . selected ] except IndexError : return None @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line ) @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch , line = self . line_editor . line ) @Action ( \"down\" , keys = [ \"ctrl-j\" , \"ctrl-n\" , \"down\" ]) def down ( self ) -> None : \"Move one line down\" self . selected = self . layout . move_selection ( self . selected , lines =- 1 ) @Action ( \"up\" , keys = [ \"ctrl-k\" , \"ctrl-p\" , \"up\" ]) def up ( self ) -> None : \"Move one line up\" self . selected = self . layout . move_selection ( self . selected , lines =+ 1 ) @Action ( \"page-down\" , keys = [ \"page-down\" , \"pgdn\" ]) def page_down ( self ) -> None : \"Move one page down\" self . selected = self . layout . move_selection ( self . selected , pages =- 1 ) @Action ( \"page-up\" , keys = [ \"page-up\" , \"pgup\" ]) def page_up ( self ) -> None : \"Move one page up\" self . selected = self . layout . move_selection ( self . selected , pages =+ 1 ) @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass __init__ ( candidates , fullscreen = True , height = None , format_fn = lambda x : str ( x ), layout = DEFAULT_LAYOUT , info_style = InfoStyle . DEFAULT , pointer_str = DEFAULT_POINTER , prompt_str = DEFAULT_PROMPT , header_str = DEFAULT_HEADER , keys_binding = None , matcher = DEFAULT_MATCHER , lazy = False , output_stream = sys . stderr , auto_refresh = None ) Initializate Finder object Parameters: candidates ( Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]] ) \u2013 Candidates fullscreen ( bool , default: True ) \u2013 Full screen mode height ( Optional [ int ] , default: None ) \u2013 Finder window height format_fn ( Callable [[ Any ], str ] , default: lambda x: str ( x ) ) \u2013 Items format function layout ( Union [ Type [ Layout ], str ] , default: DEFAULT_LAYOUT ) \u2013 Finder layout info_style ( Union [ InfoStyle , str ] , default: DEFAULT ) \u2013 Determines the display style of finder info pointer_str ( str , default: DEFAULT_POINTER ) \u2013 Pointer to the current line prompt_str ( str , default: DEFAULT_PROMPT ) \u2013 Input prompt header_str ( str , default: DEFAULT_HEADER ) \u2013 Header keys_binding ( Optional [ KeysBinding ] , default: None ) \u2013 Custom keys binding matcher ( Union [ Matcher , Type [ Matcher ], str ] , default: DEFAULT_MATCHER ) \u2013 Matcher lazy ( bool , default: False ) \u2013 Lazy mode, starts the finder only if the candidates are more than one output_stream ( TextIO , default: stderr ) \u2013 Output stream auto_refresh ( Optional [ int ] , default: None ) \u2013 Auto refresh period (in seconds) Source code in pzp/finder.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def __init__ ( self , candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], fullscreen : bool = True , height : Optional [ int ] = None , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Union [ Type [ Layout ], str ] = DEFAULT_LAYOUT , info_style : Union [ InfoStyle , str ] = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ], str ] = DEFAULT_MATCHER , lazy : bool = False , output_stream : TextIO = sys . stderr , auto_refresh : Optional [ int ] = None , ): \"\"\" Initializate Finder object Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher lazy: Lazy mode, starts the finder only if the candidates are more than one output_stream: Output stream auto_refresh: Auto refresh period (in seconds) \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . config = Config ( fullscreen , height , format_fn , info_style , pointer_str , prompt_str , header_str , lazy , output_stream , auto_refresh , ) self . candidates = Candidates ( candidates = candidates , format_fn = format_fn , matcher = matcher ) self . layout : Layout = get_layout ( layout = layout , config = self . config , candidates = self . candidates ) abort ( key_event ) Cancel Source code in pzp/finder.py 173 174 175 176 @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch , line = self . line_editor . line ) accept ( key_event ) Confirm Source code in pzp/finder.py 168 169 170 171 @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line ) apply_filter () Filter the items Source code in pzp/finder.py 150 151 152 153 154 155 def apply_filter ( self ) -> None : \"Filter the items\" if self . config . auto_refresh : self . candidates . refresh_candidates () self . candidates . apply_filter ( pattern = str ( self . line_editor )) self . selected = max ( min ( self . selected , self . candidates . matching_candidates_len - 1 ), 0 ) down () Move one line down Source code in pzp/finder.py 178 179 180 181 @Action ( \"down\" , keys = [ \"ctrl-j\" , \"ctrl-n\" , \"down\" ]) def down ( self ) -> None : \"Move one line down\" self . selected = self . layout . move_selection ( self . selected , lines =- 1 ) ignore () Do nothing Source code in pzp/finder.py 198 199 200 201 @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass page_down () Move one page down Source code in pzp/finder.py 188 189 190 191 @Action ( \"page-down\" , keys = [ \"page-down\" , \"pgdn\" ]) def page_down ( self ) -> None : \"Move one page down\" self . selected = self . layout . move_selection ( self . selected , pages =- 1 ) page_up () Move one page up Source code in pzp/finder.py 193 194 195 196 @Action ( \"page-up\" , keys = [ \"page-up\" , \"pgup\" ]) def page_up ( self ) -> None : \"Move one page up\" self . selected = self . layout . move_selection ( self . selected , pages =+ 1 ) prepare_result () Output the selected item, if any Source code in pzp/finder.py 161 162 163 164 165 166 def prepare_result ( self ) -> Any : \"Output the selected item, if any\" try : return self . candidates . matching_candidates [ self . selected ] except IndexError : return None process_key ( ch = None ) Process the pressed key Source code in pzp/finder.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch , timeout = self . config . auto_refresh ) try : self . line_editor . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line , ) # type: ignore refresh_candidates () Load/reload the candidate list Source code in pzp/finder.py 129 130 131 132 def refresh_candidates ( self ) -> None : \"Load/reload the candidate list\" self . candidates . refresh_candidates () self . selected : int = 0 setup ( input = None ) Setup Finder execution Parameters: input ( Optional [ str ] , default: None ) \u2013 initial search string Source code in pzp/finder.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Finder execution Args: input: initial search string \"\"\" self . line_editor = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) # Load the candidate list self . refresh_candidates () # Filter the items, calculate the screen offset self . apply_filter () # If lazy mode is enabled, starts the finder only if the candidates are more than one if self . config . lazy and self . candidates . matching_candidates_len <= 1 : raise AcceptAction ( action = \"lazy-accept\" , ch = None , selected_item = self . prepare_result (), line = self . line_editor . line ) # Calculate the required height and setup the screen self . layout . screen_setup ( self . line_editor ) show ( input = None ) Open pzp and return the selected element Parameters: input ( Optional [ str ] , default: None ) \u2013 initial search string Raises: AcceptAction \u2013 Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction \u2013 Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction \u2013 Raises when the user presses a key that is mapped to the \"custom\" action. Source code in pzp/finder.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial search string Raises: AcceptAction: Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction: Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction: Raises when the user presses a key that is mapped to the \"custom\" action. \"\"\" try : self . setup ( input = input ) while True : self . process_key () self . apply_filter () self . update_screen () finally : self . layout . cleanup () up () Move one line up Source code in pzp/finder.py 183 184 185 186 @Action ( \"up\" , keys = [ \"ctrl-k\" , \"ctrl-p\" , \"up\" ]) def up ( self ) -> None : \"Move one line up\" self . selected = self . layout . move_selection ( self . selected , lines =+ 1 ) update_screen () Update the screen - erase the old items, print the filtered items and the prompt Source code in pzp/finder.py 157 158 159 def update_screen ( self ) -> None : \"Update the screen - erase the old items, print the filtered items and the prompt\" self . layout . update_screen ( selected = self . selected ) GenericAction Bases: PZPException Generic Action Event Parameters: action ( str ) \u2013 action ch ( Optional [ str ] ) \u2013 pressed key selected_item ( Any , default: None ) \u2013 selected item, if any line ( Optional [ str ] , default: None ) \u2013 user input Attributes: action \u2013 action ch \u2013 pressed key selected_item \u2013 selected item, if any line \u2013 user input Source code in pzp/exceptions.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class GenericAction ( PZPException ): \"\"\" Generic Action Event Args: action: action ch: pressed key selected_item: selected item, if any line: user input Attributes: action: action ch: pressed key selected_item: selected item, if any line: user input \"\"\" def __init__ ( self , action : str , ch : Optional [ str ], selected_item : Any = None , line : Optional [ str ] = None ): super () . __init__ ( action ) self . action = action self . ch = ch self . selected_item = selected_item self . line = line pzp ( candidates , height = None , fullscreen = True , format_fn = lambda x : str ( x ), layout = DEFAULT_LAYOUT , info_style = InfoStyle . DEFAULT , pointer_str = DEFAULT_POINTER , prompt_str = DEFAULT_PROMPT , header_str = DEFAULT_HEADER , keys_binding = None , matcher = DEFAULT_MATCHER , lazy = False , handle_actions = { AcceptAction , AbortAction }, input = None , auto_refresh = None ) Open pzp and return the selected element If the Lazy mode is enabled, starts the finder only if the candidates are more than one. If there is only one match returns the only match, if there is no match returns None. Examples: >>> pzp ( candidates = list ( Path ( '.' ) . iterdir ())) PosixPath('README.md') Parameters: candidates ( Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]] ) \u2013 Candidates fullscreen ( bool , default: True ) \u2013 Full screen mode height ( Optional [ int ] , default: None ) \u2013 Finder window height format_fn ( Callable [[ Any ], str ] , default: lambda x: str ( x ) ) \u2013 Items format function layout ( Union [ Type [ Layout ], str ] , default: DEFAULT_LAYOUT ) \u2013 Finder layout info_style ( InfoStyle , default: DEFAULT ) \u2013 Determines the display style of finder info pointer_str ( str , default: DEFAULT_POINTER ) \u2013 Pointer to the current line prompt_str ( str , default: DEFAULT_PROMPT ) \u2013 Input prompt header_str ( str , default: DEFAULT_HEADER ) \u2013 Header keys_binding ( Optional [ KeysBinding ] , default: None ) \u2013 Custom keys binding matcher ( Union [ Matcher , Type [ Matcher ], str ] , default: DEFAULT_MATCHER ) \u2013 Matcher lazy ( bool , default: False ) \u2013 Lazy mode, starts the finder only if the candidates are more than one handle_actions ( Set [ Type [ GenericAction ]] , default: { AcceptAction , AbortAction } ) \u2013 Actions to be handled auto_refresh ( Optional [ int ] , default: None ) \u2013 Auto refresh period (in seconds) Returns: item ( Any ) \u2013 the selected item Source code in pzp/__init__.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def pzp ( candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], height : Optional [ int ] = None , fullscreen : bool = True , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Union [ Type [ Layout ], str ] = DEFAULT_LAYOUT , info_style : InfoStyle = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ], str ] = DEFAULT_MATCHER , lazy : bool = False , handle_actions : Set [ Type [ GenericAction ]] = { AcceptAction , AbortAction }, input : Optional [ str ] = None , auto_refresh : Optional [ int ] = None , ) -> Any : \"\"\" Open pzp and return the selected element If the Lazy mode is enabled, starts the finder only if the candidates are more than one. If there is only one match returns the only match, if there is no match returns None. Examples: >>> pzp(candidates=list(Path('.').iterdir())) PosixPath('README.md') Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher lazy: Lazy mode, starts the finder only if the candidates are more than one handle_actions: Actions to be handled auto_refresh: Auto refresh period (in seconds) Returns: item: the selected item \"\"\" finder = Finder ( candidates = candidates , fullscreen = fullscreen , height = height , format_fn = format_fn , layout = layout , info_style = info_style , pointer_str = pointer_str , prompt_str = prompt_str , header_str = header_str , keys_binding = keys_binding , matcher = matcher , lazy = lazy , auto_refresh = auto_refresh , ) try : finder . show ( input = input ) except GenericAction as ex : if type ( ex ) in ( handle_actions or set ()): return ex . selected_item if isinstance ( ex , AcceptAction ) else None else : raise","title":"pzp"},{"location":"api/module/#pzp.__version__","text":"PZP Version","title":"__version__"},{"location":"api/module/#pzp.CustomAction","text":"Bases: GenericAction The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Parameters: action ( str ) \u2013 action selected_item ( Any , default: None ) \u2013 selected item, if any ch ( Optional [ str ] ) \u2013 pressed key line ( Optional [ str ] , default: None ) \u2013 user input Attributes: action \u2013 action selected_item \u2013 selected item, if any ch \u2013 pressed key line \u2013 user input Source code in pzp/exceptions.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 class CustomAction ( GenericAction ): \"\"\" The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Args: action: action selected_item: selected item, if any ch: pressed key line: user input Attributes: action: action selected_item: selected item, if any ch: pressed key line: user input \"\"\" def __init__ ( self , action : str , ch : Optional [ str ], selected_item : Any = None , line : Optional [ str ] = None ): super () . __init__ ( action , ch , selected_item , line )","title":"CustomAction"},{"location":"api/module/#pzp.Finder","text":"Bases: ActionsHandler Source code in pzp/finder.pyclass Finder ( ActionsHandler ): def __init__ ( self , candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], fullscreen : bool = True , height : Optional [ int ] = None , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Union [ Type [ Layout ], str ] = DEFAULT_LAYOUT , info_style : Union [ InfoStyle , str ] = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ], str ] = DEFAULT_MATCHER , lazy : bool = False , output_stream : TextIO = sys . stderr , auto_refresh : Optional [ int ] = None , ): \"\"\" Initializate Finder object Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher lazy: Lazy mode, starts the finder only if the candidates are more than one output_stream: Output stream auto_refresh: Auto refresh period (in seconds) \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . config = Config ( fullscreen , height , format_fn , info_style , pointer_str , prompt_str , header_str , lazy , output_stream , auto_refresh , ) self . candidates = Candidates ( candidates = candidates , format_fn = format_fn , matcher = matcher ) self . layout : Layout = get_layout ( layout = layout , config = self . config , candidates = self . candidates ) def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Finder execution Args: input: initial search string \"\"\" self . line_editor = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) # Load the candidate list self . refresh_candidates () # Filter the items, calculate the screen offset self . apply_filter () # If lazy mode is enabled, starts the finder only if the candidates are more than one if self . config . lazy and self . candidates . matching_candidates_len <= 1 : raise AcceptAction ( action = \"lazy-accept\" , ch = None , selected_item = self . prepare_result (), line = self . line_editor . line ) # Calculate the required height and setup the screen self . layout . screen_setup ( self . line_editor ) def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial search string Raises: AcceptAction: Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction: Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction: Raises when the user presses a key that is mapped to the \"custom\" action. \"\"\" try : self . setup ( input = input ) while True : self . process_key () self . apply_filter () self . update_screen () finally : self . layout . cleanup () def refresh_candidates ( self ) -> None : \"Load/reload the candidate list\" self . candidates . refresh_candidates () self . selected : int = 0 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch , timeout = self . config . auto_refresh ) try : self . line_editor . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line , ) # type: ignore def apply_filter ( self ) -> None : \"Filter the items\" if self . config . auto_refresh : self . candidates . refresh_candidates () self . candidates . apply_filter ( pattern = str ( self . line_editor )) self . selected = max ( min ( self . selected , self . candidates . matching_candidates_len - 1 ), 0 ) def update_screen ( self ) -> None : \"Update the screen - erase the old items, print the filtered items and the prompt\" self . layout . update_screen ( selected = self . selected ) def prepare_result ( self ) -> Any : \"Output the selected item, if any\" try : return self . candidates . matching_candidates [ self . selected ] except IndexError : return None @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line ) @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch , line = self . line_editor . line ) @Action ( \"down\" , keys = [ \"ctrl-j\" , \"ctrl-n\" , \"down\" ]) def down ( self ) -> None : \"Move one line down\" self . selected = self . layout . move_selection ( self . selected , lines =- 1 ) @Action ( \"up\" , keys = [ \"ctrl-k\" , \"ctrl-p\" , \"up\" ]) def up ( self ) -> None : \"Move one line up\" self . selected = self . layout . move_selection ( self . selected , lines =+ 1 ) @Action ( \"page-down\" , keys = [ \"page-down\" , \"pgdn\" ]) def page_down ( self ) -> None : \"Move one page down\" self . selected = self . layout . move_selection ( self . selected , pages =- 1 ) @Action ( \"page-up\" , keys = [ \"page-up\" , \"pgup\" ]) def page_up ( self ) -> None : \"Move one page up\" self . selected = self . layout . move_selection ( self . selected , pages =+ 1 ) @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass","title":"Finder"},{"location":"api/module/#pzp.Finder.__init__","text":"Initializate Finder object Parameters: candidates ( Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]] ) \u2013 Candidates fullscreen ( bool , default: True ) \u2013 Full screen mode height ( Optional [ int ] , default: None ) \u2013 Finder window height format_fn ( Callable [[ Any ], str ] , default: lambda x: str ( x ) ) \u2013 Items format function layout ( Union [ Type [ Layout ], str ] , default: DEFAULT_LAYOUT ) \u2013 Finder layout info_style ( Union [ InfoStyle , str ] , default: DEFAULT ) \u2013 Determines the display style of finder info pointer_str ( str , default: DEFAULT_POINTER ) \u2013 Pointer to the current line prompt_str ( str , default: DEFAULT_PROMPT ) \u2013 Input prompt header_str ( str , default: DEFAULT_HEADER ) \u2013 Header keys_binding ( Optional [ KeysBinding ] , default: None ) \u2013 Custom keys binding matcher ( Union [ Matcher , Type [ Matcher ], str ] , default: DEFAULT_MATCHER ) \u2013 Matcher lazy ( bool , default: False ) \u2013 Lazy mode, starts the finder only if the candidates are more than one output_stream ( TextIO , default: stderr ) \u2013 Output stream auto_refresh ( Optional [ int ] , default: None ) \u2013 Auto refresh period (in seconds) Source code in pzp/finder.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def __init__ ( self , candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], fullscreen : bool = True , height : Optional [ int ] = None , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Union [ Type [ Layout ], str ] = DEFAULT_LAYOUT , info_style : Union [ InfoStyle , str ] = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ], str ] = DEFAULT_MATCHER , lazy : bool = False , output_stream : TextIO = sys . stderr , auto_refresh : Optional [ int ] = None , ): \"\"\" Initializate Finder object Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher lazy: Lazy mode, starts the finder only if the candidates are more than one output_stream: Output stream auto_refresh: Auto refresh period (in seconds) \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . config = Config ( fullscreen , height , format_fn , info_style , pointer_str , prompt_str , header_str , lazy , output_stream , auto_refresh , ) self . candidates = Candidates ( candidates = candidates , format_fn = format_fn , matcher = matcher ) self . layout : Layout = get_layout ( layout = layout , config = self . config , candidates = self . candidates )","title":"__init__"},{"location":"api/module/#pzp.Finder.abort","text":"Cancel Source code in pzp/finder.py 173 174 175 176 @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch , line = self . line_editor . line )","title":"abort"},{"location":"api/module/#pzp.Finder.accept","text":"Confirm Source code in pzp/finder.py 168 169 170 171 @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line )","title":"accept"},{"location":"api/module/#pzp.Finder.apply_filter","text":"Filter the items Source code in pzp/finder.py 150 151 152 153 154 155 def apply_filter ( self ) -> None : \"Filter the items\" if self . config . auto_refresh : self . candidates . refresh_candidates () self . candidates . apply_filter ( pattern = str ( self . line_editor )) self . selected = max ( min ( self . selected , self . candidates . matching_candidates_len - 1 ), 0 )","title":"apply_filter"},{"location":"api/module/#pzp.Finder.down","text":"Move one line down Source code in pzp/finder.py 178 179 180 181 @Action ( \"down\" , keys = [ \"ctrl-j\" , \"ctrl-n\" , \"down\" ]) def down ( self ) -> None : \"Move one line down\" self . selected = self . layout . move_selection ( self . selected , lines =- 1 )","title":"down"},{"location":"api/module/#pzp.Finder.ignore","text":"Do nothing Source code in pzp/finder.py 198 199 200 201 @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass","title":"ignore"},{"location":"api/module/#pzp.Finder.page_down","text":"Move one page down Source code in pzp/finder.py 188 189 190 191 @Action ( \"page-down\" , keys = [ \"page-down\" , \"pgdn\" ]) def page_down ( self ) -> None : \"Move one page down\" self . selected = self . layout . move_selection ( self . selected , pages =- 1 )","title":"page_down"},{"location":"api/module/#pzp.Finder.page_up","text":"Move one page up Source code in pzp/finder.py 193 194 195 196 @Action ( \"page-up\" , keys = [ \"page-up\" , \"pgup\" ]) def page_up ( self ) -> None : \"Move one page up\" self . selected = self . layout . move_selection ( self . selected , pages =+ 1 )","title":"page_up"},{"location":"api/module/#pzp.Finder.prepare_result","text":"Output the selected item, if any Source code in pzp/finder.py 161 162 163 164 165 166 def prepare_result ( self ) -> Any : \"Output the selected item, if any\" try : return self . candidates . matching_candidates [ self . selected ] except IndexError : return None","title":"prepare_result"},{"location":"api/module/#pzp.Finder.process_key","text":"Process the pressed key Source code in pzp/finder.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch , timeout = self . config . auto_refresh ) try : self . line_editor . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line , ) # type: ignore","title":"process_key"},{"location":"api/module/#pzp.Finder.refresh_candidates","text":"Load/reload the candidate list Source code in pzp/finder.py 129 130 131 132 def refresh_candidates ( self ) -> None : \"Load/reload the candidate list\" self . candidates . refresh_candidates () self . selected : int = 0","title":"refresh_candidates"},{"location":"api/module/#pzp.Finder.setup","text":"Setup Finder execution Parameters: input ( Optional [ str ] , default: None ) \u2013 initial search string Source code in pzp/finder.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Finder execution Args: input: initial search string \"\"\" self . line_editor = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) # Load the candidate list self . refresh_candidates () # Filter the items, calculate the screen offset self . apply_filter () # If lazy mode is enabled, starts the finder only if the candidates are more than one if self . config . lazy and self . candidates . matching_candidates_len <= 1 : raise AcceptAction ( action = \"lazy-accept\" , ch = None , selected_item = self . prepare_result (), line = self . line_editor . line ) # Calculate the required height and setup the screen self . layout . screen_setup ( self . line_editor )","title":"setup"},{"location":"api/module/#pzp.Finder.show","text":"Open pzp and return the selected element Parameters: input ( Optional [ str ] , default: None ) \u2013 initial search string Raises: AcceptAction \u2013 Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction \u2013 Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction \u2013 Raises when the user presses a key that is mapped to the \"custom\" action. Source code in pzp/finder.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial search string Raises: AcceptAction: Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction: Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction: Raises when the user presses a key that is mapped to the \"custom\" action. \"\"\" try : self . setup ( input = input ) while True : self . process_key () self . apply_filter () self . update_screen () finally : self . layout . cleanup ()","title":"show"},{"location":"api/module/#pzp.Finder.up","text":"Move one line up Source code in pzp/finder.py 183 184 185 186 @Action ( \"up\" , keys = [ \"ctrl-k\" , \"ctrl-p\" , \"up\" ]) def up ( self ) -> None : \"Move one line up\" self . selected = self . layout . move_selection ( self . selected , lines =+ 1 )","title":"up"},{"location":"api/module/#pzp.Finder.update_screen","text":"Update the screen - erase the old items, print the filtered items and the prompt Source code in pzp/finder.py 157 158 159 def update_screen ( self ) -> None : \"Update the screen - erase the old items, print the filtered items and the prompt\" self . layout . update_screen ( selected = self . selected )","title":"update_screen"},{"location":"api/module/#pzp.GenericAction","text":"Bases: PZPException Generic Action Event Parameters: action ( str ) \u2013 action ch ( Optional [ str ] ) \u2013 pressed key selected_item ( Any , default: None ) \u2013 selected item, if any line ( Optional [ str ] , default: None ) \u2013 user input Attributes: action \u2013 action ch \u2013 pressed key selected_item \u2013 selected item, if any line \u2013 user input Source code in pzp/exceptions.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class GenericAction ( PZPException ): \"\"\" Generic Action Event Args: action: action ch: pressed key selected_item: selected item, if any line: user input Attributes: action: action ch: pressed key selected_item: selected item, if any line: user input \"\"\" def __init__ ( self , action : str , ch : Optional [ str ], selected_item : Any = None , line : Optional [ str ] = None ): super () . __init__ ( action ) self . action = action self . ch = ch self . selected_item = selected_item self . line = line","title":"GenericAction"},{"location":"api/module/#pzp.pzp","text":"Open pzp and return the selected element If the Lazy mode is enabled, starts the finder only if the candidates are more than one. If there is only one match returns the only match, if there is no match returns None. Examples: >>> pzp ( candidates = list ( Path ( '.' ) . iterdir ())) PosixPath('README.md') Parameters: candidates ( Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]] ) \u2013 Candidates fullscreen ( bool , default: True ) \u2013 Full screen mode height ( Optional [ int ] , default: None ) \u2013 Finder window height format_fn ( Callable [[ Any ], str ] , default: lambda x: str ( x ) ) \u2013 Items format function layout ( Union [ Type [ Layout ], str ] , default: DEFAULT_LAYOUT ) \u2013 Finder layout info_style ( InfoStyle , default: DEFAULT ) \u2013 Determines the display style of finder info pointer_str ( str , default: DEFAULT_POINTER ) \u2013 Pointer to the current line prompt_str ( str , default: DEFAULT_PROMPT ) \u2013 Input prompt header_str ( str , default: DEFAULT_HEADER ) \u2013 Header keys_binding ( Optional [ KeysBinding ] , default: None ) \u2013 Custom keys binding matcher ( Union [ Matcher , Type [ Matcher ], str ] , default: DEFAULT_MATCHER ) \u2013 Matcher lazy ( bool , default: False ) \u2013 Lazy mode, starts the finder only if the candidates are more than one handle_actions ( Set [ Type [ GenericAction ]] , default: { AcceptAction , AbortAction } ) \u2013 Actions to be handled auto_refresh ( Optional [ int ] , default: None ) \u2013 Auto refresh period (in seconds) Returns: item ( Any ) \u2013 the selected item Source code in pzp/__init__.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def pzp ( candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], height : Optional [ int ] = None , fullscreen : bool = True , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Union [ Type [ Layout ], str ] = DEFAULT_LAYOUT , info_style : InfoStyle = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ], str ] = DEFAULT_MATCHER , lazy : bool = False , handle_actions : Set [ Type [ GenericAction ]] = { AcceptAction , AbortAction }, input : Optional [ str ] = None , auto_refresh : Optional [ int ] = None , ) -> Any : \"\"\" Open pzp and return the selected element If the Lazy mode is enabled, starts the finder only if the candidates are more than one. If there is only one match returns the only match, if there is no match returns None. Examples: >>> pzp(candidates=list(Path('.').iterdir())) PosixPath('README.md') Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher lazy: Lazy mode, starts the finder only if the candidates are more than one handle_actions: Actions to be handled auto_refresh: Auto refresh period (in seconds) Returns: item: the selected item \"\"\" finder = Finder ( candidates = candidates , fullscreen = fullscreen , height = height , format_fn = format_fn , layout = layout , info_style = info_style , pointer_str = pointer_str , prompt_str = prompt_str , header_str = header_str , keys_binding = keys_binding , matcher = matcher , lazy = lazy , auto_refresh = auto_refresh , ) try : finder . show ( input = input ) except GenericAction as ex : if type ( ex ) in ( handle_actions or set ()): return ex . selected_item if isinstance ( ex , AcceptAction ) else None else : raise","title":"pzp"},{"location":"api/prompt/","text":"Prompt Bases: ActionsHandler Source code in pzp/prompt.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 class Prompt ( ActionsHandler ): def __init__ ( self , default : Optional [ Any ] = None , prompt_str : str = \"\" , type : Optional [ Any ] = None , value_proc : Optional [ Callable [[ str ], Any ]] = None , keys_binding : Optional [ KeysBinding ] = None , output_stream : TextIO = sys . stderr , ): \"\"\" Initializate Prompt object Args: default: The default value to use if no input happens prompt_str: The input prompt type: The type to use to check the value against value_proc: Type conversion function keys_binding: Custom keys binding output_stream: Output stream \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . default = default self . prompt_str = prompt_str self . output_stream = output_stream if value_proc is not None : self . value_proc : Optional [ Callable [[ str ], Any ]] = value_proc elif ( type is not None ) or ( default is not None and not isinstance ( default , str )): from click.types import convert_type self . value_proc = convert_type ( type , default ) else : self . value_proc = None def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Prompt execution Args: input: initial string \"\"\" self . line_editor = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) self . screen = Screen ( stream = self . output_stream , fullscreen = False ) self . update_screen () def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial string Raises: AcceptAction: Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction: Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction: Raises when the user presses a key that is mapped to the \"custom\" action. \"\"\" self . setup ( input = input ) while True : self . process_key () self . update_screen () def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch ) try : self . line_editor . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line , ) # type: ignore def update_screen ( self ) -> None : \"Update the screen\" self . screen . write ( \" \\r \" ) . erase_line () self . screen . erase_line () . write ( self . prompt_str ) . reset () self . line_editor . print ( self . screen ) self . screen . flush () def prepare_result ( self ) -> Any : \"Return the line converted to the correct type or the default value if the line is empty\" if not self . line_editor . line : return self . default elif self . value_proc is not None : # value_proc raises an exception if the value is invalid return self . value_proc ( self . line_editor . line ) else : return self . line_editor . line @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" try : selected_item = self . prepare_result () except Exception as ex : self . screen . write ( f \" \\n Error: The value you entered was invalid: { ex } \\n \" ) self . screen . flush () return raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = selected_item , line = self . line_editor . line ) @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch , line = self . line_editor . line ) @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass __init__ ( default = None , prompt_str = '' , type = None , value_proc = None , keys_binding = None , output_stream = sys . stderr ) Initializate Prompt object Parameters: default ( Optional [ Any ] , default: None ) \u2013 The default value to use if no input happens prompt_str ( str , default: '' ) \u2013 The input prompt type ( Optional [ Any ] , default: None ) \u2013 The type to use to check the value against value_proc ( Optional [ Callable [[ str ], Any ]] , default: None ) \u2013 Type conversion function keys_binding ( Optional [ KeysBinding ] , default: None ) \u2013 Custom keys binding output_stream ( TextIO , default: stderr ) \u2013 Output stream Source code in pzp/prompt.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def __init__ ( self , default : Optional [ Any ] = None , prompt_str : str = \"\" , type : Optional [ Any ] = None , value_proc : Optional [ Callable [[ str ], Any ]] = None , keys_binding : Optional [ KeysBinding ] = None , output_stream : TextIO = sys . stderr , ): \"\"\" Initializate Prompt object Args: default: The default value to use if no input happens prompt_str: The input prompt type: The type to use to check the value against value_proc: Type conversion function keys_binding: Custom keys binding output_stream: Output stream \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . default = default self . prompt_str = prompt_str self . output_stream = output_stream if value_proc is not None : self . value_proc : Optional [ Callable [[ str ], Any ]] = value_proc elif ( type is not None ) or ( default is not None and not isinstance ( default , str )): from click.types import convert_type self . value_proc = convert_type ( type , default ) else : self . value_proc = None abort ( key_event ) Cancel Source code in pzp/prompt.py 123 124 125 126 @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch , line = self . line_editor . line ) accept ( key_event ) Confirm Source code in pzp/prompt.py 112 113 114 115 116 117 118 119 120 121 @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" try : selected_item = self . prepare_result () except Exception as ex : self . screen . write ( f \" \\n Error: The value you entered was invalid: { ex } \\n \" ) self . screen . flush () return raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = selected_item , line = self . line_editor . line ) ignore () Do nothing Source code in pzp/prompt.py 128 129 130 131 @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass prepare_result () Return the line converted to the correct type or the default value if the line is empty Source code in pzp/prompt.py 102 103 104 105 106 107 108 109 110 def prepare_result ( self ) -> Any : \"Return the line converted to the correct type or the default value if the line is empty\" if not self . line_editor . line : return self . default elif self . value_proc is not None : # value_proc raises an exception if the value is invalid return self . value_proc ( self . line_editor . line ) else : return self . line_editor . line process_key ( ch = None ) Process the pressed key Source code in pzp/prompt.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch ) try : self . line_editor . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line , ) # type: ignore setup ( input = None ) Setup Prompt execution Parameters: input ( Optional [ str ] , default: None ) \u2013 initial string Source code in pzp/prompt.py 51 52 53 54 55 56 57 58 59 60 def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Prompt execution Args: input: initial string \"\"\" self . line_editor = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) self . screen = Screen ( stream = self . output_stream , fullscreen = False ) self . update_screen () show ( input = None ) Open pzp and return the selected element Parameters: input ( Optional [ str ] , default: None ) \u2013 initial string Raises: AcceptAction \u2013 Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction \u2013 Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction \u2013 Raises when the user presses a key that is mapped to the \"custom\" action. Source code in pzp/prompt.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial string Raises: AcceptAction: Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction: Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction: Raises when the user presses a key that is mapped to the \"custom\" action. \"\"\" self . setup ( input = input ) while True : self . process_key () self . update_screen () update_screen () Update the screen Source code in pzp/prompt.py 95 96 97 98 99 100 def update_screen ( self ) -> None : \"Update the screen\" self . screen . write ( \" \\r \" ) . erase_line () self . screen . erase_line () . write ( self . prompt_str ) . reset () self . line_editor . print ( self . screen ) self . screen . flush ()","title":"pzp.prompt"},{"location":"api/prompt/#pzp.prompt.Prompt","text":"Bases: ActionsHandler Source code in pzp/prompt.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 class Prompt ( ActionsHandler ): def __init__ ( self , default : Optional [ Any ] = None , prompt_str : str = \"\" , type : Optional [ Any ] = None , value_proc : Optional [ Callable [[ str ], Any ]] = None , keys_binding : Optional [ KeysBinding ] = None , output_stream : TextIO = sys . stderr , ): \"\"\" Initializate Prompt object Args: default: The default value to use if no input happens prompt_str: The input prompt type: The type to use to check the value against value_proc: Type conversion function keys_binding: Custom keys binding output_stream: Output stream \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . default = default self . prompt_str = prompt_str self . output_stream = output_stream if value_proc is not None : self . value_proc : Optional [ Callable [[ str ], Any ]] = value_proc elif ( type is not None ) or ( default is not None and not isinstance ( default , str )): from click.types import convert_type self . value_proc = convert_type ( type , default ) else : self . value_proc = None def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Prompt execution Args: input: initial string \"\"\" self . line_editor = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) self . screen = Screen ( stream = self . output_stream , fullscreen = False ) self . update_screen () def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial string Raises: AcceptAction: Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction: Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction: Raises when the user presses a key that is mapped to the \"custom\" action. \"\"\" self . setup ( input = input ) while True : self . process_key () self . update_screen () def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch ) try : self . line_editor . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line , ) # type: ignore def update_screen ( self ) -> None : \"Update the screen\" self . screen . write ( \" \\r \" ) . erase_line () self . screen . erase_line () . write ( self . prompt_str ) . reset () self . line_editor . print ( self . screen ) self . screen . flush () def prepare_result ( self ) -> Any : \"Return the line converted to the correct type or the default value if the line is empty\" if not self . line_editor . line : return self . default elif self . value_proc is not None : # value_proc raises an exception if the value is invalid return self . value_proc ( self . line_editor . line ) else : return self . line_editor . line @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" try : selected_item = self . prepare_result () except Exception as ex : self . screen . write ( f \" \\n Error: The value you entered was invalid: { ex } \\n \" ) self . screen . flush () return raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = selected_item , line = self . line_editor . line ) @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch , line = self . line_editor . line ) @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass","title":"Prompt"},{"location":"api/prompt/#pzp.prompt.Prompt.__init__","text":"Initializate Prompt object Parameters: default ( Optional [ Any ] , default: None ) \u2013 The default value to use if no input happens prompt_str ( str , default: '' ) \u2013 The input prompt type ( Optional [ Any ] , default: None ) \u2013 The type to use to check the value against value_proc ( Optional [ Callable [[ str ], Any ]] , default: None ) \u2013 Type conversion function keys_binding ( Optional [ KeysBinding ] , default: None ) \u2013 Custom keys binding output_stream ( TextIO , default: stderr ) \u2013 Output stream Source code in pzp/prompt.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def __init__ ( self , default : Optional [ Any ] = None , prompt_str : str = \"\" , type : Optional [ Any ] = None , value_proc : Optional [ Callable [[ str ], Any ]] = None , keys_binding : Optional [ KeysBinding ] = None , output_stream : TextIO = sys . stderr , ): \"\"\" Initializate Prompt object Args: default: The default value to use if no input happens prompt_str: The input prompt type: The type to use to check the value against value_proc: Type conversion function keys_binding: Custom keys binding output_stream: Output stream \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . default = default self . prompt_str = prompt_str self . output_stream = output_stream if value_proc is not None : self . value_proc : Optional [ Callable [[ str ], Any ]] = value_proc elif ( type is not None ) or ( default is not None and not isinstance ( default , str )): from click.types import convert_type self . value_proc = convert_type ( type , default ) else : self . value_proc = None","title":"__init__"},{"location":"api/prompt/#pzp.prompt.Prompt.abort","text":"Cancel Source code in pzp/prompt.py 123 124 125 126 @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch , line = self . line_editor . line )","title":"abort"},{"location":"api/prompt/#pzp.prompt.Prompt.accept","text":"Confirm Source code in pzp/prompt.py 112 113 114 115 116 117 118 119 120 121 @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" try : selected_item = self . prepare_result () except Exception as ex : self . screen . write ( f \" \\n Error: The value you entered was invalid: { ex } \\n \" ) self . screen . flush () return raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = selected_item , line = self . line_editor . line )","title":"accept"},{"location":"api/prompt/#pzp.prompt.Prompt.ignore","text":"Do nothing Source code in pzp/prompt.py 128 129 130 131 @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass","title":"ignore"},{"location":"api/prompt/#pzp.prompt.Prompt.prepare_result","text":"Return the line converted to the correct type or the default value if the line is empty Source code in pzp/prompt.py 102 103 104 105 106 107 108 109 110 def prepare_result ( self ) -> Any : \"Return the line converted to the correct type or the default value if the line is empty\" if not self . line_editor . line : return self . default elif self . value_proc is not None : # value_proc raises an exception if the value is invalid return self . value_proc ( self . line_editor . line ) else : return self . line_editor . line","title":"prepare_result"},{"location":"api/prompt/#pzp.prompt.Prompt.process_key","text":"Process the pressed key Source code in pzp/prompt.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch ) try : self . line_editor . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result (), line = self . line_editor . line , ) # type: ignore","title":"process_key"},{"location":"api/prompt/#pzp.prompt.Prompt.setup","text":"Setup Prompt execution Parameters: input ( Optional [ str ] , default: None ) \u2013 initial string Source code in pzp/prompt.py 51 52 53 54 55 56 57 58 59 60 def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Prompt execution Args: input: initial string \"\"\" self . line_editor = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) self . screen = Screen ( stream = self . output_stream , fullscreen = False ) self . update_screen ()","title":"setup"},{"location":"api/prompt/#pzp.prompt.Prompt.show","text":"Open pzp and return the selected element Parameters: input ( Optional [ str ] , default: None ) \u2013 initial string Raises: AcceptAction \u2013 Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction \u2013 Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction \u2013 Raises when the user presses a key that is mapped to the \"custom\" action. Source code in pzp/prompt.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial string Raises: AcceptAction: Raises when the user presses a key that is mapped to the \"accept\" action. AbortAction: Raises when the user presses a key that is mapped to the \"abort\" action. CustomAction: Raises when the user presses a key that is mapped to the \"custom\" action. \"\"\" self . setup ( input = input ) while True : self . process_key () self . update_screen ()","title":"show"},{"location":"api/prompt/#pzp.prompt.Prompt.update_screen","text":"Update the screen Source code in pzp/prompt.py 95 96 97 98 99 100 def update_screen ( self ) -> None : \"Update the screen\" self . screen . write ( \" \\r \" ) . erase_line () self . screen . erase_line () . write ( self . prompt_str ) . reset () self . line_editor . print ( self . screen ) self . screen . flush ()","title":"update_screen"},{"location":"api/screen/","text":"DEFAULT_HEIGHT = 24 module-attribute Default screen height DEFAULT_WIDTH = 80 module-attribute Default screen width DummyScreen Bases: Screen Source code in pzp/screen.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 class DummyScreen ( Screen ): def __init__ ( self ) -> None : \"\"\" Initialize dummy screen Attributes: fullscreen: Full screen mode (always False) height: Screen height (always 0) width: Screen width (always 0) \"\"\" self . fullscreen = False self . height = 0 self . width = 0 def write ( self , line : str ) -> \"Screen\" : \"Do nothing\" return self def flush ( self ) -> \"Screen\" : \"Do nothing\" return self __init__ () Initialize dummy screen Attributes: fullscreen \u2013 Full screen mode (always False) height \u2013 Screen height (always 0) width \u2013 Screen width (always 0) Source code in pzp/screen.py 192 193 194 195 196 197 198 199 200 201 202 203 def __init__ ( self ) -> None : \"\"\" Initialize dummy screen Attributes: fullscreen: Full screen mode (always False) height: Screen height (always 0) width: Screen width (always 0) \"\"\" self . fullscreen = False self . height = 0 self . width = 0 flush () Do nothing Source code in pzp/screen.py 209 210 211 def flush ( self ) -> \"Screen\" : \"Do nothing\" return self write ( line ) Do nothing Source code in pzp/screen.py 205 206 207 def write ( self , line : str ) -> \"Screen\" : \"Do nothing\" return self Screen Source code in pzp/screen.pyclass Screen : def __init__ ( self , stream : TextIO = sys . stderr , fullscreen : bool = True , height : Optional [ int ] = None ): \"\"\" Initialize screen Args: stream: Output stream fullscreen: Full screen mode height: Screen height Attributes: stream: Output stream data: Data to be written on the stream fullscreen: Full screen mode height: Screen height width: Screen width \"\"\" self . stream : TextIO = stream self . data : List [ str ] = [] self . fullscreen = fullscreen size : terminal_size = self . get_terminal_size () if self . fullscreen or height is None : self . height : int = size . lines else : self . height = min ( height , size . lines ) self . width = size . columns # Save cursor position self . write ( f \" { CURSOR_SAVE_POS } \" ) self . flush () @classmethod def get_terminal_size ( cls ) -> terminal_size : \"\"\" Get the terminal size Returns: terminal_size: terminal window size (columns, lines) \"\"\" return shutil . get_terminal_size ( fallback = ( DEFAULT_WIDTH , DEFAULT_HEIGHT )) def write ( self , line : str ) -> \"Screen\" : \"Add data to be written on the stream\" self . data . append ( line ) return self def flush ( self ) -> \"Screen\" : \"Write data to the stream and flush it\" self . stream . write ( \"\" . join ( self . data )) self . data = [] self . stream . flush () return self def cleanup ( self ) -> \"Screen\" : \"Clean screen and restore cursor position\" self . erase_screen () if self . fullscreen : self . write ( f \" { CURSOR_RESTORE_POS } \" ) self . move_up ( self . height - 1 ) self . flush () return self def nl ( self , lines : int = 1 ) -> \"Screen\" : \"\"\" Add n newlines Args: lines: number of newlines to be added \"\"\" self . write ( f \" { NL } \" * lines ) return self def space ( self , num : int = 1 ) -> \"Screen\" : \"\"\" Add n spaces Args: num: number of spaces \"\"\" self . write ( \" \" * num ) return self def reset ( self ) -> \"Screen\" : \"Reset style and color\" self . write ( f \" { RESET } \" ) return self def bold ( self ) -> \"Screen\" : \"Set bold mode\" self . write ( f \" { BOLD } \" ) return self def erase_screen ( self ) -> \"Screen\" : \"Erase the screen\" lines : int = self . height - 1 return self . erase_line () . move_up ( lines ) . erase_lines ( lines ) def erase_line ( self ) -> \"Screen\" : \"Erase the current line\" self . write ( f \" { ERASE_LINE } \" ) return self def erase_lines ( self , lines : int ) -> \"Screen\" : \"\"\" Erase n lines Args: lines: number of lines to be erased \"\"\" self . write ( f \" { ERASE_LINE }{ NL } \" * lines ) return self . move_up ( lines ) def move_up ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor up If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } A\" ) def move_down ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor down If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } B\" ) def move_right ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor right If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } C\" ) return self def move_left ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor left If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } D\" ) return self __init__ ( stream = sys . stderr , fullscreen = True , height = None ) Initialize screen Parameters: stream ( TextIO , default: stderr ) \u2013 Output stream fullscreen ( bool , default: True ) \u2013 Full screen mode height ( Optional [ int ] , default: None ) \u2013 Screen height Attributes: stream \u2013 Output stream data \u2013 Data to be written on the stream fullscreen \u2013 Full screen mode height \u2013 Screen height width \u2013 Screen width Source code in pzp/screen.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def __init__ ( self , stream : TextIO = sys . stderr , fullscreen : bool = True , height : Optional [ int ] = None ): \"\"\" Initialize screen Args: stream: Output stream fullscreen: Full screen mode height: Screen height Attributes: stream: Output stream data: Data to be written on the stream fullscreen: Full screen mode height: Screen height width: Screen width \"\"\" self . stream : TextIO = stream self . data : List [ str ] = [] self . fullscreen = fullscreen size : terminal_size = self . get_terminal_size () if self . fullscreen or height is None : self . height : int = size . lines else : self . height = min ( height , size . lines ) self . width = size . columns # Save cursor position self . write ( f \" { CURSOR_SAVE_POS } \" ) self . flush () bold () Set bold mode Source code in pzp/screen.py 121 122 123 124 def bold ( self ) -> \"Screen\" : \"Set bold mode\" self . write ( f \" { BOLD } \" ) return self cleanup () Clean screen and restore cursor position Source code in pzp/screen.py 87 88 89 90 91 92 93 94 def cleanup ( self ) -> \"Screen\" : \"Clean screen and restore cursor position\" self . erase_screen () if self . fullscreen : self . write ( f \" { CURSOR_RESTORE_POS } \" ) self . move_up ( self . height - 1 ) self . flush () return self erase_line () Erase the current line Source code in pzp/screen.py 131 132 133 134 def erase_line ( self ) -> \"Screen\" : \"Erase the current line\" self . write ( f \" { ERASE_LINE } \" ) return self erase_lines ( lines ) Erase n lines Parameters: lines ( int ) \u2013 number of lines to be erased Source code in pzp/screen.py 136 137 138 139 140 141 142 143 144 def erase_lines ( self , lines : int ) -> \"Screen\" : \"\"\" Erase n lines Args: lines: number of lines to be erased \"\"\" self . write ( f \" { ERASE_LINE }{ NL } \" * lines ) return self . move_up ( lines ) erase_screen () Erase the screen Source code in pzp/screen.py 126 127 128 129 def erase_screen ( self ) -> \"Screen\" : \"Erase the screen\" lines : int = self . height - 1 return self . erase_line () . move_up ( lines ) . erase_lines ( lines ) flush () Write data to the stream and flush it Source code in pzp/screen.py 80 81 82 83 84 85 def flush ( self ) -> \"Screen\" : \"Write data to the stream and flush it\" self . stream . write ( \"\" . join ( self . data )) self . data = [] self . stream . flush () return self get_terminal_size () classmethod Get the terminal size Returns: terminal_size ( terminal_size ) \u2013 terminal window size (columns, lines) Source code in pzp/screen.py 65 66 67 68 69 70 71 72 73 @classmethod def get_terminal_size ( cls ) -> terminal_size : \"\"\" Get the terminal size Returns: terminal_size: terminal window size (columns, lines) \"\"\" return shutil . get_terminal_size ( fallback = ( DEFAULT_WIDTH , DEFAULT_HEIGHT )) move_down ( lines ) Move cursor down If the cursor is already at the edge of the screen, this has no effect. Parameters: lines ( int ) \u2013 number of lines Source code in pzp/screen.py 156 157 158 159 160 161 162 163 164 def move_down ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor down If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } B\" ) move_left ( characters ) Move cursor left If the cursor is already at the edge of the screen, this has no effect. Parameters: characters ( int ) \u2013 number of characters Source code in pzp/screen.py 178 179 180 181 182 183 184 185 186 187 188 def move_left ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor left If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } D\" ) return self move_right ( characters ) Move cursor right If the cursor is already at the edge of the screen, this has no effect. Parameters: characters ( int ) \u2013 number of characters Source code in pzp/screen.py 166 167 168 169 170 171 172 173 174 175 176 def move_right ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor right If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } C\" ) return self move_up ( lines ) Move cursor up If the cursor is already at the edge of the screen, this has no effect. Parameters: lines ( int ) \u2013 number of lines Source code in pzp/screen.py 146 147 148 149 150 151 152 153 154 def move_up ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor up If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } A\" ) nl ( lines = 1 ) Add n newlines Parameters: lines ( int , default: 1 ) \u2013 number of newlines to be added Source code in pzp/screen.py 96 97 98 99 100 101 102 103 104 def nl ( self , lines : int = 1 ) -> \"Screen\" : \"\"\" Add n newlines Args: lines: number of newlines to be added \"\"\" self . write ( f \" { NL } \" * lines ) return self reset () Reset style and color Source code in pzp/screen.py 116 117 118 119 def reset ( self ) -> \"Screen\" : \"Reset style and color\" self . write ( f \" { RESET } \" ) return self space ( num = 1 ) Add n spaces Parameters: num ( int , default: 1 ) \u2013 number of spaces Source code in pzp/screen.py 106 107 108 109 110 111 112 113 114 def space ( self , num : int = 1 ) -> \"Screen\" : \"\"\" Add n spaces Args: num: number of spaces \"\"\" self . write ( \" \" * num ) return self write ( line ) Add data to be written on the stream Source code in pzp/screen.py 75 76 77 78 def write ( self , line : str ) -> \"Screen\" : \"Add data to be written on the stream\" self . data . append ( line ) return self","title":"pzp.screen"},{"location":"api/screen/#pzp.screen.DEFAULT_HEIGHT","text":"Default screen height","title":"DEFAULT_HEIGHT"},{"location":"api/screen/#pzp.screen.DEFAULT_WIDTH","text":"Default screen width","title":"DEFAULT_WIDTH"},{"location":"api/screen/#pzp.screen.DummyScreen","text":"Bases: Screen Source code in pzp/screen.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 class DummyScreen ( Screen ): def __init__ ( self ) -> None : \"\"\" Initialize dummy screen Attributes: fullscreen: Full screen mode (always False) height: Screen height (always 0) width: Screen width (always 0) \"\"\" self . fullscreen = False self . height = 0 self . width = 0 def write ( self , line : str ) -> \"Screen\" : \"Do nothing\" return self def flush ( self ) -> \"Screen\" : \"Do nothing\" return self","title":"DummyScreen"},{"location":"api/screen/#pzp.screen.DummyScreen.__init__","text":"Initialize dummy screen Attributes: fullscreen \u2013 Full screen mode (always False) height \u2013 Screen height (always 0) width \u2013 Screen width (always 0) Source code in pzp/screen.py 192 193 194 195 196 197 198 199 200 201 202 203 def __init__ ( self ) -> None : \"\"\" Initialize dummy screen Attributes: fullscreen: Full screen mode (always False) height: Screen height (always 0) width: Screen width (always 0) \"\"\" self . fullscreen = False self . height = 0 self . width = 0","title":"__init__"},{"location":"api/screen/#pzp.screen.DummyScreen.flush","text":"Do nothing Source code in pzp/screen.py 209 210 211 def flush ( self ) -> \"Screen\" : \"Do nothing\" return self","title":"flush"},{"location":"api/screen/#pzp.screen.DummyScreen.write","text":"Do nothing Source code in pzp/screen.py 205 206 207 def write ( self , line : str ) -> \"Screen\" : \"Do nothing\" return self","title":"write"},{"location":"api/screen/#pzp.screen.Screen","text":"Source code in pzp/screen.pyclass Screen : def __init__ ( self , stream : TextIO = sys . stderr , fullscreen : bool = True , height : Optional [ int ] = None ): \"\"\" Initialize screen Args: stream: Output stream fullscreen: Full screen mode height: Screen height Attributes: stream: Output stream data: Data to be written on the stream fullscreen: Full screen mode height: Screen height width: Screen width \"\"\" self . stream : TextIO = stream self . data : List [ str ] = [] self . fullscreen = fullscreen size : terminal_size = self . get_terminal_size () if self . fullscreen or height is None : self . height : int = size . lines else : self . height = min ( height , size . lines ) self . width = size . columns # Save cursor position self . write ( f \" { CURSOR_SAVE_POS } \" ) self . flush () @classmethod def get_terminal_size ( cls ) -> terminal_size : \"\"\" Get the terminal size Returns: terminal_size: terminal window size (columns, lines) \"\"\" return shutil . get_terminal_size ( fallback = ( DEFAULT_WIDTH , DEFAULT_HEIGHT )) def write ( self , line : str ) -> \"Screen\" : \"Add data to be written on the stream\" self . data . append ( line ) return self def flush ( self ) -> \"Screen\" : \"Write data to the stream and flush it\" self . stream . write ( \"\" . join ( self . data )) self . data = [] self . stream . flush () return self def cleanup ( self ) -> \"Screen\" : \"Clean screen and restore cursor position\" self . erase_screen () if self . fullscreen : self . write ( f \" { CURSOR_RESTORE_POS } \" ) self . move_up ( self . height - 1 ) self . flush () return self def nl ( self , lines : int = 1 ) -> \"Screen\" : \"\"\" Add n newlines Args: lines: number of newlines to be added \"\"\" self . write ( f \" { NL } \" * lines ) return self def space ( self , num : int = 1 ) -> \"Screen\" : \"\"\" Add n spaces Args: num: number of spaces \"\"\" self . write ( \" \" * num ) return self def reset ( self ) -> \"Screen\" : \"Reset style and color\" self . write ( f \" { RESET } \" ) return self def bold ( self ) -> \"Screen\" : \"Set bold mode\" self . write ( f \" { BOLD } \" ) return self def erase_screen ( self ) -> \"Screen\" : \"Erase the screen\" lines : int = self . height - 1 return self . erase_line () . move_up ( lines ) . erase_lines ( lines ) def erase_line ( self ) -> \"Screen\" : \"Erase the current line\" self . write ( f \" { ERASE_LINE } \" ) return self def erase_lines ( self , lines : int ) -> \"Screen\" : \"\"\" Erase n lines Args: lines: number of lines to be erased \"\"\" self . write ( f \" { ERASE_LINE }{ NL } \" * lines ) return self . move_up ( lines ) def move_up ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor up If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } A\" ) def move_down ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor down If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } B\" ) def move_right ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor right If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } C\" ) return self def move_left ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor left If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } D\" ) return self","title":"Screen"},{"location":"api/screen/#pzp.screen.Screen.__init__","text":"Initialize screen Parameters: stream ( TextIO , default: stderr ) \u2013 Output stream fullscreen ( bool , default: True ) \u2013 Full screen mode height ( Optional [ int ] , default: None ) \u2013 Screen height Attributes: stream \u2013 Output stream data \u2013 Data to be written on the stream fullscreen \u2013 Full screen mode height \u2013 Screen height width \u2013 Screen width Source code in pzp/screen.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def __init__ ( self , stream : TextIO = sys . stderr , fullscreen : bool = True , height : Optional [ int ] = None ): \"\"\" Initialize screen Args: stream: Output stream fullscreen: Full screen mode height: Screen height Attributes: stream: Output stream data: Data to be written on the stream fullscreen: Full screen mode height: Screen height width: Screen width \"\"\" self . stream : TextIO = stream self . data : List [ str ] = [] self . fullscreen = fullscreen size : terminal_size = self . get_terminal_size () if self . fullscreen or height is None : self . height : int = size . lines else : self . height = min ( height , size . lines ) self . width = size . columns # Save cursor position self . write ( f \" { CURSOR_SAVE_POS } \" ) self . flush ()","title":"__init__"},{"location":"api/screen/#pzp.screen.Screen.bold","text":"Set bold mode Source code in pzp/screen.py 121 122 123 124 def bold ( self ) -> \"Screen\" : \"Set bold mode\" self . write ( f \" { BOLD } \" ) return self","title":"bold"},{"location":"api/screen/#pzp.screen.Screen.cleanup","text":"Clean screen and restore cursor position Source code in pzp/screen.py 87 88 89 90 91 92 93 94 def cleanup ( self ) -> \"Screen\" : \"Clean screen and restore cursor position\" self . erase_screen () if self . fullscreen : self . write ( f \" { CURSOR_RESTORE_POS } \" ) self . move_up ( self . height - 1 ) self . flush () return self","title":"cleanup"},{"location":"api/screen/#pzp.screen.Screen.erase_line","text":"Erase the current line Source code in pzp/screen.py 131 132 133 134 def erase_line ( self ) -> \"Screen\" : \"Erase the current line\" self . write ( f \" { ERASE_LINE } \" ) return self","title":"erase_line"},{"location":"api/screen/#pzp.screen.Screen.erase_lines","text":"Erase n lines Parameters: lines ( int ) \u2013 number of lines to be erased Source code in pzp/screen.py 136 137 138 139 140 141 142 143 144 def erase_lines ( self , lines : int ) -> \"Screen\" : \"\"\" Erase n lines Args: lines: number of lines to be erased \"\"\" self . write ( f \" { ERASE_LINE }{ NL } \" * lines ) return self . move_up ( lines )","title":"erase_lines"},{"location":"api/screen/#pzp.screen.Screen.erase_screen","text":"Erase the screen Source code in pzp/screen.py 126 127 128 129 def erase_screen ( self ) -> \"Screen\" : \"Erase the screen\" lines : int = self . height - 1 return self . erase_line () . move_up ( lines ) . erase_lines ( lines )","title":"erase_screen"},{"location":"api/screen/#pzp.screen.Screen.flush","text":"Write data to the stream and flush it Source code in pzp/screen.py 80 81 82 83 84 85 def flush ( self ) -> \"Screen\" : \"Write data to the stream and flush it\" self . stream . write ( \"\" . join ( self . data )) self . data = [] self . stream . flush () return self","title":"flush"},{"location":"api/screen/#pzp.screen.Screen.get_terminal_size","text":"Get the terminal size Returns: terminal_size ( terminal_size ) \u2013 terminal window size (columns, lines) Source code in pzp/screen.py 65 66 67 68 69 70 71 72 73 @classmethod def get_terminal_size ( cls ) -> terminal_size : \"\"\" Get the terminal size Returns: terminal_size: terminal window size (columns, lines) \"\"\" return shutil . get_terminal_size ( fallback = ( DEFAULT_WIDTH , DEFAULT_HEIGHT ))","title":"get_terminal_size"},{"location":"api/screen/#pzp.screen.Screen.move_down","text":"Move cursor down If the cursor is already at the edge of the screen, this has no effect. Parameters: lines ( int ) \u2013 number of lines Source code in pzp/screen.py 156 157 158 159 160 161 162 163 164 def move_down ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor down If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } B\" )","title":"move_down"},{"location":"api/screen/#pzp.screen.Screen.move_left","text":"Move cursor left If the cursor is already at the edge of the screen, this has no effect. Parameters: characters ( int ) \u2013 number of characters Source code in pzp/screen.py 178 179 180 181 182 183 184 185 186 187 188 def move_left ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor left If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } D\" ) return self","title":"move_left"},{"location":"api/screen/#pzp.screen.Screen.move_right","text":"Move cursor right If the cursor is already at the edge of the screen, this has no effect. Parameters: characters ( int ) \u2013 number of characters Source code in pzp/screen.py 166 167 168 169 170 171 172 173 174 175 176 def move_right ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor right If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } C\" ) return self","title":"move_right"},{"location":"api/screen/#pzp.screen.Screen.move_up","text":"Move cursor up If the cursor is already at the edge of the screen, this has no effect. Parameters: lines ( int ) \u2013 number of lines Source code in pzp/screen.py 146 147 148 149 150 151 152 153 154 def move_up ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor up If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } A\" )","title":"move_up"},{"location":"api/screen/#pzp.screen.Screen.nl","text":"Add n newlines Parameters: lines ( int , default: 1 ) \u2013 number of newlines to be added Source code in pzp/screen.py 96 97 98 99 100 101 102 103 104 def nl ( self , lines : int = 1 ) -> \"Screen\" : \"\"\" Add n newlines Args: lines: number of newlines to be added \"\"\" self . write ( f \" { NL } \" * lines ) return self","title":"nl"},{"location":"api/screen/#pzp.screen.Screen.reset","text":"Reset style and color Source code in pzp/screen.py 116 117 118 119 def reset ( self ) -> \"Screen\" : \"Reset style and color\" self . write ( f \" { RESET } \" ) return self","title":"reset"},{"location":"api/screen/#pzp.screen.Screen.space","text":"Add n spaces Parameters: num ( int , default: 1 ) \u2013 number of spaces Source code in pzp/screen.py 106 107 108 109 110 111 112 113 114 def space ( self , num : int = 1 ) -> \"Screen\" : \"\"\" Add n spaces Args: num: number of spaces \"\"\" self . write ( \" \" * num ) return self","title":"space"},{"location":"api/screen/#pzp.screen.Screen.write","text":"Add data to be written on the stream Source code in pzp/screen.py 75 76 77 78 def write ( self , line : str ) -> \"Screen\" : \"Add data to be written on the stream\" self . data . append ( line ) return self","title":"write"},{"location":"examples/auto_refresh/","text":"Auto refresh #!/usr/bin/env python import argparse from datetime import datetime from pzp import Finder, GenericAction from pzp.info import InfoStyle from pzp.layout import list_layouts def num_format(item): return f\"{item}\" def candidates(n): for i in range(0, n): current_time = datetime.now().strftime(\"%H:%M:%S\") t = chr(65 + i % 26) * (i % 10) yield f\"{i:>4}# {current_time} {t}\" def main(): parser = argparse.ArgumentParser() parser.add_argument(\"-n\", type=int, default=30) parser.add_argument(\"-f\", \"--fullscreen\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--lazy\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--height\", type=int) parser.add_argument(\"--layout\", choices=list_layouts(), default=\"reverse-list\") parser.add_argument(\"--info\", choices=[\"default\", \"hidden\"], default=\"default\") parser.add_argument(\"--input\", type=str) args = parser.parse_args() info = InfoStyle.DEFAULT if args.info == \"default\" else InfoStyle.HIDDEN try: finder = Finder( candidates=lambda: candidates(args.n), fullscreen=args.fullscreen, height=args.height, layout=args.layout, format_fn=num_format, info_style=info, keys_binding={\"custom\": [\"ctrl-o\", \"enter\"], \"qu-qu\": [\"ctrl-q\"], \"oh-oh\": [\"!\"]}, header_str=\"Press enter or ctrl-o\", lazy=args.lazy, auto_refresh=1, ) finder.show(input=args.input) except GenericAction as action: print(f\"action: {action.action} selected item: {action.selected_item} line: {action.line}\") if __name__ == \"__main__\": main()","title":"Auto refresh"},{"location":"examples/auto_refresh/#auto-refresh","text":"#!/usr/bin/env python import argparse from datetime import datetime from pzp import Finder, GenericAction from pzp.info import InfoStyle from pzp.layout import list_layouts def num_format(item): return f\"{item}\" def candidates(n): for i in range(0, n): current_time = datetime.now().strftime(\"%H:%M:%S\") t = chr(65 + i % 26) * (i % 10) yield f\"{i:>4}# {current_time} {t}\" def main(): parser = argparse.ArgumentParser() parser.add_argument(\"-n\", type=int, default=30) parser.add_argument(\"-f\", \"--fullscreen\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--lazy\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--height\", type=int) parser.add_argument(\"--layout\", choices=list_layouts(), default=\"reverse-list\") parser.add_argument(\"--info\", choices=[\"default\", \"hidden\"], default=\"default\") parser.add_argument(\"--input\", type=str) args = parser.parse_args() info = InfoStyle.DEFAULT if args.info == \"default\" else InfoStyle.HIDDEN try: finder = Finder( candidates=lambda: candidates(args.n), fullscreen=args.fullscreen, height=args.height, layout=args.layout, format_fn=num_format, info_style=info, keys_binding={\"custom\": [\"ctrl-o\", \"enter\"], \"qu-qu\": [\"ctrl-q\"], \"oh-oh\": [\"!\"]}, header_str=\"Press enter or ctrl-o\", lazy=args.lazy, auto_refresh=1, ) finder.show(input=args.input) except GenericAction as action: print(f\"action: {action.action} selected item: {action.selected_item} line: {action.line}\") if __name__ == \"__main__\": main()","title":"Auto refresh"},{"location":"examples/file_picker/","text":"File picker #!/usr/bin/env python import argparse from pathlib import Path from pzp import pzp from pzp.layout import list_layouts def main(): parser = argparse.ArgumentParser() parser.add_argument(\"-f\", \"--fullscreen\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--height\", type=int) parser.add_argument(\"--layout\", choices=list_layouts(), default=\"reverse-list\") args = parser.parse_args() item = pzp( candidates=Path(\".\").iterdir(), layout=args.layout, fullscreen=args.fullscreen, height=args.height, ) print(str(item) if item else \"\") if __name__ == \"__main__\": main()","title":"File picker"},{"location":"examples/file_picker/#file-picker","text":"#!/usr/bin/env python import argparse from pathlib import Path from pzp import pzp from pzp.layout import list_layouts def main(): parser = argparse.ArgumentParser() parser.add_argument(\"-f\", \"--fullscreen\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--height\", type=int) parser.add_argument(\"--layout\", choices=list_layouts(), default=\"reverse-list\") args = parser.parse_args() item = pzp( candidates=Path(\".\").iterdir(), layout=args.layout, fullscreen=args.fullscreen, height=args.height, ) print(str(item) if item else \"\") if __name__ == \"__main__\": main()","title":"File picker"},{"location":"examples/number_picker/","text":"Number picker #!/usr/bin/env python import argparse from pzp import Finder, GenericAction from pzp.info import InfoStyle from pzp.layout import list_layouts def num_format(item): return f\"{item}\" def main(): parser = argparse.ArgumentParser() parser.add_argument(\"-n\", type=int, default=1000) parser.add_argument(\"-f\", \"--fullscreen\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--lazy\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--height\", type=int) parser.add_argument(\"--layout\", choices=list_layouts(), default=\"reverse-list\") parser.add_argument(\"--info\", choices=[\"default\", \"hidden\"], default=\"default\") parser.add_argument(\"--input\", type=str) args = parser.parse_args() info = InfoStyle.DEFAULT if args.info == \"default\" else InfoStyle.HIDDEN try: finder = Finder( candidates=range(0, args.n), fullscreen=args.fullscreen, height=args.height, layout=args.layout, format_fn=num_format, info_style=info, keys_binding={\"custom\": [\"ctrl-o\", \"enter\"], \"qu-qu\": [\"ctrl-q\"], \"oh-oh\": [\"!\"]}, header_str=\"Press enter or ctrl-o\", lazy=args.lazy, ) finder.show(input=args.input) except GenericAction as action: print(f\"action: {action.action} selected item: {action.selected_item} line: {action.line}\") if __name__ == \"__main__\": main()","title":"Number picker"},{"location":"examples/number_picker/#number-picker","text":"#!/usr/bin/env python import argparse from pzp import Finder, GenericAction from pzp.info import InfoStyle from pzp.layout import list_layouts def num_format(item): return f\"{item}\" def main(): parser = argparse.ArgumentParser() parser.add_argument(\"-n\", type=int, default=1000) parser.add_argument(\"-f\", \"--fullscreen\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--lazy\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--height\", type=int) parser.add_argument(\"--layout\", choices=list_layouts(), default=\"reverse-list\") parser.add_argument(\"--info\", choices=[\"default\", \"hidden\"], default=\"default\") parser.add_argument(\"--input\", type=str) args = parser.parse_args() info = InfoStyle.DEFAULT if args.info == \"default\" else InfoStyle.HIDDEN try: finder = Finder( candidates=range(0, args.n), fullscreen=args.fullscreen, height=args.height, layout=args.layout, format_fn=num_format, info_style=info, keys_binding={\"custom\": [\"ctrl-o\", \"enter\"], \"qu-qu\": [\"ctrl-q\"], \"oh-oh\": [\"!\"]}, header_str=\"Press enter or ctrl-o\", lazy=args.lazy, ) finder.show(input=args.input) except GenericAction as action: print(f\"action: {action.action} selected item: {action.selected_item} line: {action.line}\") if __name__ == \"__main__\": main()","title":"Number picker"},{"location":"examples/prompt/","text":"Prompts a user for input #!/usr/bin/env python from pzp import prompt def main(): test = prompt(\"write something\", type=int) print(\"-\" * 100) print(test) if __name__ == \"__main__\": main()","title":"User input"},{"location":"examples/prompt/#prompts-a-user-for-input","text":"#!/usr/bin/env python from pzp import prompt def main(): test = prompt(\"write something\", type=int) print(\"-\" * 100) print(test) if __name__ == \"__main__\": main()","title":"Prompts a user for input"},{"location":"examples/text_picker/","text":"Text line picker #!/usr/bin/env python import argparse from pathlib import Path from pzp import pzp from pzp.layout import list_layouts from pzp.matcher import list_matchers examples_dir = Path(__file__).parent code_of_conduct = examples_dir.parent / \"CODE_OF_CONDUCT.md\" class LineItem: def __init__(self, i, line): self.i = i self.line = line def __str__(self): raise Exception(\"Missing format_fn\") def main(): parser = argparse.ArgumentParser() parser.add_argument(\"-f\", \"--fullscreen\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"-n\", \"--line-numbers\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--height\", type=int) parser.add_argument(\"--layout\", choices=list_layouts(), default=\"reverse-list\") parser.add_argument(\"--matcher\", choices=list_matchers(), default=\"extended\") args = parser.parse_args() candidates = code_of_conduct.read_text().split(\"\\n\") if args.line_numbers: item = pzp( candidates=[LineItem(i, line) for i, line in enumerate(candidates, start=1)], layout=args.layout, matcher=args.matcher, fullscreen=args.fullscreen, height=args.height, format_fn=lambda item: f\"{item.i:3d}: {item.line}\", ) item = item.line if item else None else: item = pzp( candidates=candidates, layout=args.layout, matcher=args.matcher, fullscreen=args.fullscreen, height=args.height, ) print(item) if __name__ == \"__main__\": main()","title":"Text picker"},{"location":"examples/text_picker/#text-line-picker","text":"#!/usr/bin/env python import argparse from pathlib import Path from pzp import pzp from pzp.layout import list_layouts from pzp.matcher import list_matchers examples_dir = Path(__file__).parent code_of_conduct = examples_dir.parent / \"CODE_OF_CONDUCT.md\" class LineItem: def __init__(self, i, line): self.i = i self.line = line def __str__(self): raise Exception(\"Missing format_fn\") def main(): parser = argparse.ArgumentParser() parser.add_argument(\"-f\", \"--fullscreen\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"-n\", \"--line-numbers\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--height\", type=int) parser.add_argument(\"--layout\", choices=list_layouts(), default=\"reverse-list\") parser.add_argument(\"--matcher\", choices=list_matchers(), default=\"extended\") args = parser.parse_args() candidates = code_of_conduct.read_text().split(\"\\n\") if args.line_numbers: item = pzp( candidates=[LineItem(i, line) for i, line in enumerate(candidates, start=1)], layout=args.layout, matcher=args.matcher, fullscreen=args.fullscreen, height=args.height, format_fn=lambda item: f\"{item.i:3d}: {item.line}\", ) item = item.line if item else None else: item = pzp( candidates=candidates, layout=args.layout, matcher=args.matcher, fullscreen=args.fullscreen, height=args.height, ) print(item) if __name__ == \"__main__\": main()","title":"Text line picker"},{"location":"examples/yesno/","text":"Yes/No picker #!/usr/bin/env python import argparse from pzp import Finder, GenericAction from pzp.info import list_styles from pzp.layout import list_layouts def main(): parser = argparse.ArgumentParser() parser.add_argument(\"-f\", \"--fullscreen\", action=argparse.BooleanOptionalAction, default=False, help=\"toggle fullscreen\") parser.add_argument(\"--info\", choices=list_styles(), default=\"hidden\", help=\"determines the info style\") parser.add_argument(\"--layout\", choices=list_layouts(), default=\"reverse\", help=\"choose the layout\") args = parser.parse_args() try: finder = Finder( candidates=[\"Yes\", \"No\"], fullscreen=args.fullscreen, layout=args.layout, info_style=args.info, ) finder.show() except GenericAction as action: print(action.selected_item) if __name__ == \"__main__\": main()","title":"Yes/No picker"},{"location":"examples/yesno/#yesno-picker","text":"#!/usr/bin/env python import argparse from pzp import Finder, GenericAction from pzp.info import list_styles from pzp.layout import list_layouts def main(): parser = argparse.ArgumentParser() parser.add_argument(\"-f\", \"--fullscreen\", action=argparse.BooleanOptionalAction, default=False, help=\"toggle fullscreen\") parser.add_argument(\"--info\", choices=list_styles(), default=\"hidden\", help=\"determines the info style\") parser.add_argument(\"--layout\", choices=list_layouts(), default=\"reverse\", help=\"choose the layout\") args = parser.parse_args() try: finder = Finder( candidates=[\"Yes\", \"No\"], fullscreen=args.fullscreen, layout=args.layout, info_style=args.info, ) finder.show() except GenericAction as action: print(action.selected_item) if __name__ == \"__main__\": main()","title":"Yes/No picker"}]}