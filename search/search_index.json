{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pzp","title":"Pzp Docs"},{"location":"#pzp","text":"","title":"pzp"},{"location":"license/","text":"The MIT License (MIT) Copyright (c) 2013-2022 Andrea Bonomi andrea.bonomi@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"api/actions/","text":"Action Source code in pzp/actions.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Action : def __init__ ( self , action : str , keys : Optional [ Sequence [ str ]] = None ) -> None : \"\"\" Action decorator Args: action: Action \"\"\" self . action : str = action self . keys : Sequence [ str ] = keys or [] def __call__ ( self , func : ActionHandler ) -> ActionHandler : setattr ( func , \"pzp_action\" , self . action ) setattr ( func , \"pzp_keys\" , self . keys ) return func __init__ ( action , keys = None ) Action decorator Parameters: Name Type Description Default action str Action required Source code in pzp/actions.py 17 18 19 20 21 22 23 24 25 def __init__ ( self , action : str , keys : Optional [ Sequence [ str ]] = None ) -> None : \"\"\" Action decorator Args: action: Action \"\"\" self . action : str = action self . keys : Sequence [ str ] = keys or [] ActionsHandler Source code in pzp/actions.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 class ActionsHandler : def __init__ ( self , keys_handler : Optional [ KeysHandler ] = None , keys_binding : Optional [ KeysBinding ] = None , ) -> None : \"\"\" Action handler decorator Args: keys_handler: Keys handler keys_binding: Optional[Dict[str, Sequence[str]]] = None, Attributes: actions: map action names to action handlers keys_handler: Keys handler \"\"\" if keys_handler : self . keys_handler = keys_handler if keys_binding : keys_handler . update ( keys_binding ) else : self . keys_handler = KeysHandler ( keys_binding ) # Collect the methods with the Action decorator self . actions : Dict [ str , ActionHandler ] = {} for name , member in inspect . getmembers ( self ): action : Optional [ str ] = getattr ( member , \"pzp_action\" , None ) if action is not None : self . actions [ action ] = member # Default action if name == \"default\" : self . actions [ \"default\" ] = member # Keys binding keys : Optional [ Sequence [ str ]] = getattr ( member , \"pzp_keys\" , None ) if keys : self . keys_handler . set_keys_binding ( keys , action ) def process_key_event ( self , key_event : KeyEvent ) -> None : \"\"\" Execute the action hander for a give key event Args: key_event: Key event to be processed Raises: MissingHander: If there is no handler for the given key event \"\"\" action : str = key_event . action or \"default\" fn = self . actions . get ( action ) if not fn : raise MissingHander ( action = action , ch = key_event . ch ) # Check if the function has the key_event argument if \"key_event\" in inspect . getargs ( fn . __code__ ) . args : fn ( key_event = key_event ) # type: ignore else : fn () # type: ignore __init__ ( keys_handler = None , keys_binding = None ) Action handler decorator Parameters: Name Type Description Default keys_handler Optional [ KeysHandler ] Keys handler None keys_binding Optional [ KeysBinding ] Optional[Dict[str, Sequence[str]]] = None, None Attributes: Name Type Description actions map action names to action handlers keys_handler Keys handler Source code in pzp/actions.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def __init__ ( self , keys_handler : Optional [ KeysHandler ] = None , keys_binding : Optional [ KeysBinding ] = None , ) -> None : \"\"\" Action handler decorator Args: keys_handler: Keys handler keys_binding: Optional[Dict[str, Sequence[str]]] = None, Attributes: actions: map action names to action handlers keys_handler: Keys handler \"\"\" if keys_handler : self . keys_handler = keys_handler if keys_binding : keys_handler . update ( keys_binding ) else : self . keys_handler = KeysHandler ( keys_binding ) # Collect the methods with the Action decorator self . actions : Dict [ str , ActionHandler ] = {} for name , member in inspect . getmembers ( self ): action : Optional [ str ] = getattr ( member , \"pzp_action\" , None ) if action is not None : self . actions [ action ] = member # Default action if name == \"default\" : self . actions [ \"default\" ] = member # Keys binding keys : Optional [ Sequence [ str ]] = getattr ( member , \"pzp_keys\" , None ) if keys : self . keys_handler . set_keys_binding ( keys , action ) process_key_event ( key_event ) Execute the action hander for a give key event Parameters: Name Type Description Default key_event KeyEvent Key event to be processed required Raises: Type Description MissingHander If there is no handler for the given key event Source code in pzp/actions.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def process_key_event ( self , key_event : KeyEvent ) -> None : \"\"\" Execute the action hander for a give key event Args: key_event: Key event to be processed Raises: MissingHander: If there is no handler for the given key event \"\"\" action : str = key_event . action or \"default\" fn = self . actions . get ( action ) if not fn : raise MissingHander ( action = action , ch = key_event . ch ) # Check if the function has the key_event argument if \"key_event\" in inspect . getargs ( fn . __code__ ) . args : fn ( key_event = key_event ) # type: ignore else : fn () # type: ignore","title":"pzp.actions"},{"location":"api/actions/#pzp.actions.Action","text":"Source code in pzp/actions.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Action : def __init__ ( self , action : str , keys : Optional [ Sequence [ str ]] = None ) -> None : \"\"\" Action decorator Args: action: Action \"\"\" self . action : str = action self . keys : Sequence [ str ] = keys or [] def __call__ ( self , func : ActionHandler ) -> ActionHandler : setattr ( func , \"pzp_action\" , self . action ) setattr ( func , \"pzp_keys\" , self . keys ) return func","title":"Action"},{"location":"api/actions/#pzp.actions.Action.__init__","text":"Action decorator Parameters: Name Type Description Default action str Action required Source code in pzp/actions.py 17 18 19 20 21 22 23 24 25 def __init__ ( self , action : str , keys : Optional [ Sequence [ str ]] = None ) -> None : \"\"\" Action decorator Args: action: Action \"\"\" self . action : str = action self . keys : Sequence [ str ] = keys or []","title":"__init__()"},{"location":"api/actions/#pzp.actions.ActionsHandler","text":"Source code in pzp/actions.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 class ActionsHandler : def __init__ ( self , keys_handler : Optional [ KeysHandler ] = None , keys_binding : Optional [ KeysBinding ] = None , ) -> None : \"\"\" Action handler decorator Args: keys_handler: Keys handler keys_binding: Optional[Dict[str, Sequence[str]]] = None, Attributes: actions: map action names to action handlers keys_handler: Keys handler \"\"\" if keys_handler : self . keys_handler = keys_handler if keys_binding : keys_handler . update ( keys_binding ) else : self . keys_handler = KeysHandler ( keys_binding ) # Collect the methods with the Action decorator self . actions : Dict [ str , ActionHandler ] = {} for name , member in inspect . getmembers ( self ): action : Optional [ str ] = getattr ( member , \"pzp_action\" , None ) if action is not None : self . actions [ action ] = member # Default action if name == \"default\" : self . actions [ \"default\" ] = member # Keys binding keys : Optional [ Sequence [ str ]] = getattr ( member , \"pzp_keys\" , None ) if keys : self . keys_handler . set_keys_binding ( keys , action ) def process_key_event ( self , key_event : KeyEvent ) -> None : \"\"\" Execute the action hander for a give key event Args: key_event: Key event to be processed Raises: MissingHander: If there is no handler for the given key event \"\"\" action : str = key_event . action or \"default\" fn = self . actions . get ( action ) if not fn : raise MissingHander ( action = action , ch = key_event . ch ) # Check if the function has the key_event argument if \"key_event\" in inspect . getargs ( fn . __code__ ) . args : fn ( key_event = key_event ) # type: ignore else : fn () # type: ignore","title":"ActionsHandler"},{"location":"api/actions/#pzp.actions.ActionsHandler.__init__","text":"Action handler decorator Parameters: Name Type Description Default keys_handler Optional [ KeysHandler ] Keys handler None keys_binding Optional [ KeysBinding ] Optional[Dict[str, Sequence[str]]] = None, None Attributes: Name Type Description actions map action names to action handlers keys_handler Keys handler Source code in pzp/actions.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def __init__ ( self , keys_handler : Optional [ KeysHandler ] = None , keys_binding : Optional [ KeysBinding ] = None , ) -> None : \"\"\" Action handler decorator Args: keys_handler: Keys handler keys_binding: Optional[Dict[str, Sequence[str]]] = None, Attributes: actions: map action names to action handlers keys_handler: Keys handler \"\"\" if keys_handler : self . keys_handler = keys_handler if keys_binding : keys_handler . update ( keys_binding ) else : self . keys_handler = KeysHandler ( keys_binding ) # Collect the methods with the Action decorator self . actions : Dict [ str , ActionHandler ] = {} for name , member in inspect . getmembers ( self ): action : Optional [ str ] = getattr ( member , \"pzp_action\" , None ) if action is not None : self . actions [ action ] = member # Default action if name == \"default\" : self . actions [ \"default\" ] = member # Keys binding keys : Optional [ Sequence [ str ]] = getattr ( member , \"pzp_keys\" , None ) if keys : self . keys_handler . set_keys_binding ( keys , action )","title":"__init__()"},{"location":"api/actions/#pzp.actions.ActionsHandler.process_key_event","text":"Execute the action hander for a give key event Parameters: Name Type Description Default key_event KeyEvent Key event to be processed required Raises: Type Description MissingHander If there is no handler for the given key event Source code in pzp/actions.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def process_key_event ( self , key_event : KeyEvent ) -> None : \"\"\" Execute the action hander for a give key event Args: key_event: Key event to be processed Raises: MissingHander: If there is no handler for the given key event \"\"\" action : str = key_event . action or \"default\" fn = self . actions . get ( action ) if not fn : raise MissingHander ( action = action , ch = key_event . ch ) # Check if the function has the key_event argument if \"key_event\" in inspect . getargs ( fn . __code__ ) . args : fn ( key_event = key_event ) # type: ignore else : fn () # type: ignore","title":"process_key_event()"},{"location":"api/ansi/","text":"BLACK = f ' { ESC } [30m' module-attribute Black foreground color BLACK_BG = f ' { ESC } [40m' module-attribute Black background color BLUE = f ' { ESC } [34m' module-attribute Blue foreground color BLUE_BG = f ' { ESC } [44m' module-attribute Blue background color BOLD = f ' { ESC } [1m' module-attribute Set bold mode CURSOR_RESTORE_POS = f ' { ESC } 8' module-attribute Restores the cursor to the last saved position CURSOR_SAVE_POS = f ' { ESC } 7' module-attribute Save cursor position CYAN = f ' { ESC } [36m' module-attribute Cyan foreground color CYAN_BG = f ' { ESC } [46m' module-attribute Cyan background color ERASE_LINE = f ' { ESC } [2K' module-attribute Erase the entire line GREEN = f ' { ESC } [32m' module-attribute Green foreground color GREEN_BG = f ' { ESC } [42m' module-attribute Green background color NEGATIVE = f ' { ESC } [7m' module-attribute Set inverse mode PURPLE = f ' { ESC } [35m' module-attribute Purple foreground color PURPLE_BG = f ' { ESC } [45m' module-attribute Purple background color RED = f ' { ESC } [31m' module-attribute Red foreground color RED_BG = f ' { ESC } [41m' module-attribute Red background color RESET = f ' { ESC } [0m' module-attribute Reset styles and colors WHITE = f ' { ESC } [37m' module-attribute White foreground color WHITE_BG = f ' { ESC } [47m' module-attribute White background color YELLOW = f ' { ESC } [33m' module-attribute Yellow foreground color YELLOW_BG = f ' { ESC } [43m' module-attribute Yellow background color","title":"pzp.ansi"},{"location":"api/ansi/#pzp.ansi.BLACK","text":"Black foreground color","title":"BLACK"},{"location":"api/ansi/#pzp.ansi.BLACK_BG","text":"Black background color","title":"BLACK_BG"},{"location":"api/ansi/#pzp.ansi.BLUE","text":"Blue foreground color","title":"BLUE"},{"location":"api/ansi/#pzp.ansi.BLUE_BG","text":"Blue background color","title":"BLUE_BG"},{"location":"api/ansi/#pzp.ansi.BOLD","text":"Set bold mode","title":"BOLD"},{"location":"api/ansi/#pzp.ansi.CURSOR_RESTORE_POS","text":"Restores the cursor to the last saved position","title":"CURSOR_RESTORE_POS"},{"location":"api/ansi/#pzp.ansi.CURSOR_SAVE_POS","text":"Save cursor position","title":"CURSOR_SAVE_POS"},{"location":"api/ansi/#pzp.ansi.CYAN","text":"Cyan foreground color","title":"CYAN"},{"location":"api/ansi/#pzp.ansi.CYAN_BG","text":"Cyan background color","title":"CYAN_BG"},{"location":"api/ansi/#pzp.ansi.ERASE_LINE","text":"Erase the entire line","title":"ERASE_LINE"},{"location":"api/ansi/#pzp.ansi.GREEN","text":"Green foreground color","title":"GREEN"},{"location":"api/ansi/#pzp.ansi.GREEN_BG","text":"Green background color","title":"GREEN_BG"},{"location":"api/ansi/#pzp.ansi.NEGATIVE","text":"Set inverse mode","title":"NEGATIVE"},{"location":"api/ansi/#pzp.ansi.PURPLE","text":"Purple foreground color","title":"PURPLE"},{"location":"api/ansi/#pzp.ansi.PURPLE_BG","text":"Purple background color","title":"PURPLE_BG"},{"location":"api/ansi/#pzp.ansi.RED","text":"Red foreground color","title":"RED"},{"location":"api/ansi/#pzp.ansi.RED_BG","text":"Red background color","title":"RED_BG"},{"location":"api/ansi/#pzp.ansi.RESET","text":"Reset styles and colors","title":"RESET"},{"location":"api/ansi/#pzp.ansi.WHITE","text":"White foreground color","title":"WHITE"},{"location":"api/ansi/#pzp.ansi.WHITE_BG","text":"White background color","title":"WHITE_BG"},{"location":"api/ansi/#pzp.ansi.YELLOW","text":"Yellow foreground color","title":"YELLOW"},{"location":"api/ansi/#pzp.ansi.YELLOW_BG","text":"Yellow background color","title":"YELLOW_BG"},{"location":"api/exceptions/","text":"AbortAction Bases: GenericAction The AbortAction exception is raised when the user presses a key that is mapped to the \"abort\" action. Parameters: Name Type Description Default action str action required ch str pressed key required selected_item Any selected item, if any None Attributes: Name Type Description action action ch pressed key selected_item selected item, if any Source code in pzp/exceptions.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 class AbortAction ( GenericAction ): \"\"\" The AbortAction exception is raised when the user presses a key that is mapped to the \"abort\" action. Args: action: action ch: pressed key selected_item: selected item, if any Attributes: action: action ch: pressed key selected_item: selected item, if any \"\"\" def __init__ ( self , action : str , ch : str , selected_item : Any = None ): super () . __init__ ( action , ch , selected_item ) AcceptAction Bases: GenericAction The AcceptAction exception is raised when the user presses a key that is mapped to the \"accept\" action. Parameters: Name Type Description Default action str action required ch str pressed key required selected_item Any selected item, if any None Attributes: Name Type Description action action ch pressed key selected_item selected item, if any Source code in pzp/exceptions.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class AcceptAction ( GenericAction ): \"\"\" The AcceptAction exception is raised when the user presses a key that is mapped to the \"accept\" action. Args: action: action ch: pressed key selected_item: selected item, if any Attributes: action: action ch: pressed key selected_item: selected item, if any \"\"\" def __init__ ( self , action : str , ch : str , selected_item : Any = None ): super () . __init__ ( action , ch , selected_item ) CustomAction Bases: GenericAction The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Parameters: Name Type Description Default action str action required selected_item Any selected item, if any None ch str pressed key required Attributes: Name Type Description action action selected_item selected item, if any ch pressed key Source code in pzp/exceptions.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 class CustomAction ( GenericAction ): \"\"\" The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Args: action: action selected_item: selected item, if any ch: pressed key Attributes: action: action selected_item: selected item, if any ch: pressed key \"\"\" def __init__ ( self , action : str , ch : str , selected_item : Any = None ): super () . __init__ ( action , ch , selected_item ) GenericAction Bases: PZPException Generic Action Event Parameters: Name Type Description Default action str action required ch str pressed key required selected_item Any selected item, if any None Attributes: Name Type Description action action ch pressed key selected_item selected item, if any Source code in pzp/exceptions.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class GenericAction ( PZPException ): \"\"\" Generic Action Event Args: action: action ch: pressed key selected_item: selected item, if any Attributes: action: action ch: pressed key selected_item: selected item, if any \"\"\" def __init__ ( self , action : str , ch : str , selected_item : Any = None ): super () . __init__ ( action ) self . action = action self . ch = ch self . selected_item = selected_item MissingHander Bases: PZPException The MissingHander exception is raised when there is no handler for an action. Parameters: Name Type Description Default action str action required ch str pressed key required Attributes: Name Type Description action action ch pressed key Source code in pzp/exceptions.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 class MissingHander ( PZPException ): \"\"\" The MissingHander exception is raised when there is no handler for an action. Args: action: action ch: pressed key Attributes: action: action ch: pressed key \"\"\" def __init__ ( self , action : str , ch : str ): super () . __init__ ( action ) self . action = action self . ch = ch PZPException Bases: Exception Generic PZP Exception Source code in pzp/exceptions.py 15 16 17 18 class PZPException ( Exception ): \"\"\" Generic PZP Exception \"\"\"","title":"pzp.exceptions"},{"location":"api/exceptions/#pzp.exceptions.AbortAction","text":"Bases: GenericAction The AbortAction exception is raised when the user presses a key that is mapped to the \"abort\" action. Parameters: Name Type Description Default action str action required ch str pressed key required selected_item Any selected item, if any None Attributes: Name Type Description action action ch pressed key selected_item selected item, if any Source code in pzp/exceptions.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 class AbortAction ( GenericAction ): \"\"\" The AbortAction exception is raised when the user presses a key that is mapped to the \"abort\" action. Args: action: action ch: pressed key selected_item: selected item, if any Attributes: action: action ch: pressed key selected_item: selected item, if any \"\"\" def __init__ ( self , action : str , ch : str , selected_item : Any = None ): super () . __init__ ( action , ch , selected_item )","title":"AbortAction"},{"location":"api/exceptions/#pzp.exceptions.AcceptAction","text":"Bases: GenericAction The AcceptAction exception is raised when the user presses a key that is mapped to the \"accept\" action. Parameters: Name Type Description Default action str action required ch str pressed key required selected_item Any selected item, if any None Attributes: Name Type Description action action ch pressed key selected_item selected item, if any Source code in pzp/exceptions.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class AcceptAction ( GenericAction ): \"\"\" The AcceptAction exception is raised when the user presses a key that is mapped to the \"accept\" action. Args: action: action ch: pressed key selected_item: selected item, if any Attributes: action: action ch: pressed key selected_item: selected item, if any \"\"\" def __init__ ( self , action : str , ch : str , selected_item : Any = None ): super () . __init__ ( action , ch , selected_item )","title":"AcceptAction"},{"location":"api/exceptions/#pzp.exceptions.CustomAction","text":"Bases: GenericAction The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Parameters: Name Type Description Default action str action required selected_item Any selected item, if any None ch str pressed key required Attributes: Name Type Description action action selected_item selected item, if any ch pressed key Source code in pzp/exceptions.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 class CustomAction ( GenericAction ): \"\"\" The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Args: action: action selected_item: selected item, if any ch: pressed key Attributes: action: action selected_item: selected item, if any ch: pressed key \"\"\" def __init__ ( self , action : str , ch : str , selected_item : Any = None ): super () . __init__ ( action , ch , selected_item )","title":"CustomAction"},{"location":"api/exceptions/#pzp.exceptions.GenericAction","text":"Bases: PZPException Generic Action Event Parameters: Name Type Description Default action str action required ch str pressed key required selected_item Any selected item, if any None Attributes: Name Type Description action action ch pressed key selected_item selected item, if any Source code in pzp/exceptions.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class GenericAction ( PZPException ): \"\"\" Generic Action Event Args: action: action ch: pressed key selected_item: selected item, if any Attributes: action: action ch: pressed key selected_item: selected item, if any \"\"\" def __init__ ( self , action : str , ch : str , selected_item : Any = None ): super () . __init__ ( action ) self . action = action self . ch = ch self . selected_item = selected_item","title":"GenericAction"},{"location":"api/exceptions/#pzp.exceptions.MissingHander","text":"Bases: PZPException The MissingHander exception is raised when there is no handler for an action. Parameters: Name Type Description Default action str action required ch str pressed key required Attributes: Name Type Description action action ch pressed key Source code in pzp/exceptions.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 class MissingHander ( PZPException ): \"\"\" The MissingHander exception is raised when there is no handler for an action. Args: action: action ch: pressed key Attributes: action: action ch: pressed key \"\"\" def __init__ ( self , action : str , ch : str ): super () . __init__ ( action ) self . action = action self . ch = ch","title":"MissingHander"},{"location":"api/exceptions/#pzp.exceptions.PZPException","text":"Bases: Exception Generic PZP Exception Source code in pzp/exceptions.py 15 16 17 18 class PZPException ( Exception ): \"\"\" Generic PZP Exception \"\"\"","title":"PZPException"},{"location":"api/finder/","text":"DEFAULT_HEADER = '' module-attribute Default header DEFAULT_POINTER = '>' module-attribute Default pointer DEFAULT_PROMPT = '> ' module-attribute Default input prompt CustomAction Bases: GenericAction The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Parameters: Name Type Description Default action str action required selected_item Any selected item, if any None ch str pressed key required Attributes: Name Type Description action action selected_item selected item, if any ch pressed key Source code in pzp/exceptions.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 class CustomAction ( GenericAction ): \"\"\" The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Args: action: action selected_item: selected item, if any ch: pressed key Attributes: action: action selected_item: selected item, if any ch: pressed key \"\"\" def __init__ ( self , action : str , ch : str , selected_item : Any = None ): super () . __init__ ( action , ch , selected_item ) Finder Bases: ActionsHandler Source code in pzp/finder.pyclass Finder ( ActionsHandler ): def __init__ ( self , candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], fullscreen : bool = True , height : Optional [ int ] = None , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Layout = Layout . REVERSE_LIST , info_style : InfoStyle = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ]] = ExtendedMatcher , output_stream : TextIO = sys . stderr , ): \"\"\" Initializate Finder object Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher output_stream: Output stream \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . fullscreen = fullscreen self . height = height self . format_fn = format_fn self . layout : Layout = layout self . info_style : InfoStyle = info_style self . pointer_str = pointer_str self . no_pointer_str = \" \" * len ( pointer_str ) self . prompt_str = prompt_str self . header_str = header_str self . matcher = matcher () if callable ( matcher ) else matcher self . output_stream = output_stream # Get the candidates if isinstance ( candidates , Iterator ) or callable ( candidates ): self . get_items_fn : Union [ None , Callable [[], Sequence [ Any ]], Iterator [ Any ]] = candidates self . candidates : Sequence [ Any ] = [] else : self . get_items_fn = None self . candidates = candidates @property def screen_items ( self ) -> Sequence [ Any ]: \"Candidates to be displayed on the screen\" return self . matching_candidates [ self . offset : self . offset + self . max_candidates_lines ] @property def screen_items_len ( self ) -> int : \"Number of items on the screen\" return len ( self . screen_items ) @property def candidates_len ( self ) -> int : \"Number of candidates\" return len ( self . candidates ) @property def matching_candidates_len ( self ) -> int : \"Number of matching candidates\" return len ( self . matching_candidates ) @property def info_lines ( self ) -> int : \"Number of info lines\" return 1 if self . info_style == InfoStyle . DEFAULT else 0 @property def prompt_lines ( self ) -> int : \"Number of prompt lines\" return len ( self . prompt_str . split ( f \" { NL } \" )) @property def header_lines ( self ) -> int : \"Number of header lines\" return len ( self . header_str . split ( f \" { NL } \" )) if self . header_str else 0 @property def margin_lines ( self ) -> int : \"Screen margin\" return self . info_lines + self . prompt_lines + self . header_lines @property def max_candidates_lines ( self ) -> int : \"Maximun number of candidates printables on the screen\" return self . screen . height - self . margin_lines def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Finder execution Args: input: initial search string \"\"\" self . input = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) # Load the candidate list self . refresh_candidates () # Calculate the required height and setup the screen height = self . height if self . height is not None else self . candidates_len + self . margin_lines self . screen : Screen = Screen ( stream = self . output_stream , fullscreen = self . fullscreen , height = height ) # Filter the items, calculate the screen offset self . apply_filter () self . update_screen ( erase = False ) def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial search string Returns: item: the selected item \"\"\" self . setup ( input = input ) try : while True : self . process_key () self . apply_filter () self . update_screen () except AcceptAction as accept : return accept . selected_item except AbortAction : return None finally : self . screen . cleanup () def refresh_candidates ( self ) -> None : \"Load/reload the candidate list\" # Get items if isinstance ( self . get_items_fn , Iterator ): self . candidates = list ( self . get_items_fn ) elif callable ( self . get_items_fn ): self . candidates = list ( self . get_items_fn ()) # Reset selected/offset self . selected : int = 0 self . offset : int = 0 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch ) try : self . input . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result ()) # type: ignore def apply_filter ( self ) -> None : \"Filter the items, calculate the screen offset\" self . matching_candidates : Sequence [ Any ] = self . matcher . filter ( pattern = str ( self . input ), candidates = self . candidates , format_fn = self . format_fn ) # Adject selected self . selected = max ( min ( self . selected , self . matching_candidates_len - 1 ), 0 ) # Calculate the offset if self . selected >= self . offset + self . max_candidates_lines : self . offset = self . selected - self . max_candidates_lines + 1 elif self . selected < self . offset : self . offset = self . selected if self . offset < 0 : self . offset = 0 def update_screen ( self , erase : bool = True ) -> None : \"Update the screen - erase the old items, print the filtered items and the prompt\" if erase : self . screen . erase_screen () if self . layout == Layout . REVERSE_LIST : self . print_header () self . print_items () self . print_empty_lines () self . print_info () self . print_prompt () self . screen . flush () def print_header ( self ) -> None : \"Print header\" if self . header_str : self . screen . erase_line () . write ( self . header_str ) . nl () def print_items ( self ) -> None : \"Print candidates\" for i , item in enumerate ( self . screen_items ): is_selected = i + self . offset == self . selected self . screen . erase_line () if is_selected : self . screen . write ( f \" { RED }{ BOLD }{ BLACK_BG }{ self . pointer_str } \" ) . reset () . bold () else : self . screen . write ( f \" { BLACK_BG }{ self . no_pointer_str } \" ) . reset () self . screen . space ( 1 ) . write ( self . format_fn ( item )) . reset () . nl () def print_empty_lines ( self ) -> None : \"Print empty lines\" lines = self . max_candidates_lines - self . screen_items_len self . screen . nl ( lines ) def print_info ( self ) -> None : \"Print info\" if self . info_style == InfoStyle . DEFAULT : self . screen . erase_line () . space ( 2 ) . write ( f \" { YELLOW }{ self . matching_candidates_len } / { self . candidates_len } \" ) . reset () . nl () def print_prompt ( self ) -> None : \"Print prompt\" self . screen . erase_line () . write ( f \" { CYAN }{ self . prompt_str } \" ) . reset () self . input . print ( self . screen ) def match ( self , item : Any ) -> bool : return str ( self . input ) . lower () in self . format_fn ( item ) . lower () def prepare_result ( self ) -> Any : \"Output the selected item, if any\" try : return self . matching_candidates [ self . selected ] except IndexError : return None @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = self . prepare_result ()) @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch ) @Action ( \"down\" , keys = [ \"ctrl-j\" , \"ctrl-n\" , \"down\" ]) def down ( self ) -> None : \"Move one line down\" self . selected = self . selected + 1 @Action ( \"up\" , keys = [ \"ctrl-k\" , \"ctrl-p\" , \"up\" ]) def up ( self ) -> None : \"Move one line up\" self . selected = self . selected - 1 @Action ( \"page-down\" , keys = [ \"page-down\" , \"pgdn\" ]) def page_down ( self ) -> None : \"Move one page down\" self . selected = self . selected + self . max_candidates_lines @Action ( \"page-up\" , keys = [ \"page-up\" , \"pgup\" ]) def page_up ( self ) -> None : \"Move one page up\" self . selected = self . selected - self . max_candidates_lines @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass __init__ ( candidates , fullscreen = True , height = None , format_fn = lambda x : str ( x ), layout = Layout . REVERSE_LIST , info_style = InfoStyle . DEFAULT , pointer_str = DEFAULT_POINTER , prompt_str = DEFAULT_PROMPT , header_str = DEFAULT_HEADER , keys_binding = None , matcher = ExtendedMatcher , output_stream = sys . stderr ) Initializate Finder object Parameters: Name Type Description Default candidates Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]] Candidates required fullscreen bool Full screen mode True height Optional [ int ] Finder window height None format_fn Callable [[ Any ], str ] Items format function lambda x: str(x) layout Layout Finder layout Layout.REVERSE_LIST info_style InfoStyle Determines the display style of finder info InfoStyle.DEFAULT pointer_str str Pointer to the current line DEFAULT_POINTER prompt_str str Input prompt DEFAULT_PROMPT header_str str Header DEFAULT_HEADER keys_binding Optional [ KeysBinding ] Custom keys binding None matcher Union [ Matcher , Type [ Matcher ]] Matcher ExtendedMatcher output_stream TextIO Output stream sys.stderr Source code in pzp/finder.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def __init__ ( self , candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], fullscreen : bool = True , height : Optional [ int ] = None , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Layout = Layout . REVERSE_LIST , info_style : InfoStyle = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ]] = ExtendedMatcher , output_stream : TextIO = sys . stderr , ): \"\"\" Initializate Finder object Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher output_stream: Output stream \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . fullscreen = fullscreen self . height = height self . format_fn = format_fn self . layout : Layout = layout self . info_style : InfoStyle = info_style self . pointer_str = pointer_str self . no_pointer_str = \" \" * len ( pointer_str ) self . prompt_str = prompt_str self . header_str = header_str self . matcher = matcher () if callable ( matcher ) else matcher self . output_stream = output_stream # Get the candidates if isinstance ( candidates , Iterator ) or callable ( candidates ): self . get_items_fn : Union [ None , Callable [[], Sequence [ Any ]], Iterator [ Any ]] = candidates self . candidates : Sequence [ Any ] = [] else : self . get_items_fn = None self . candidates = candidates abort ( key_event ) Cancel Source code in pzp/finder.py 304 305 306 307 @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch ) accept ( key_event ) Confirm Source code in pzp/finder.py 299 300 301 302 @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = self . prepare_result ()) apply_filter () Filter the items, calculate the screen offset Source code in pzp/finder.py 231 232 233 234 235 236 237 238 239 240 241 242 243 244 def apply_filter ( self ) -> None : \"Filter the items, calculate the screen offset\" self . matching_candidates : Sequence [ Any ] = self . matcher . filter ( pattern = str ( self . input ), candidates = self . candidates , format_fn = self . format_fn ) # Adject selected self . selected = max ( min ( self . selected , self . matching_candidates_len - 1 ), 0 ) # Calculate the offset if self . selected >= self . offset + self . max_candidates_lines : self . offset = self . selected - self . max_candidates_lines + 1 elif self . selected < self . offset : self . offset = self . selected if self . offset < 0 : self . offset = 0 candidates_len () property Number of candidates Source code in pzp/finder.py 134 135 136 137 @property def candidates_len ( self ) -> int : \"Number of candidates\" return len ( self . candidates ) down () Move one line down Source code in pzp/finder.py 309 310 311 312 @Action ( \"down\" , keys = [ \"ctrl-j\" , \"ctrl-n\" , \"down\" ]) def down ( self ) -> None : \"Move one line down\" self . selected = self . selected + 1 header_lines () property Number of header lines Source code in pzp/finder.py 154 155 156 157 @property def header_lines ( self ) -> int : \"Number of header lines\" return len ( self . header_str . split ( f \" { NL } \" )) if self . header_str else 0 ignore () Do nothing Source code in pzp/finder.py 329 330 331 332 @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass info_lines () property Number of info lines Source code in pzp/finder.py 144 145 146 147 @property def info_lines ( self ) -> int : \"Number of info lines\" return 1 if self . info_style == InfoStyle . DEFAULT else 0 margin_lines () property Screen margin Source code in pzp/finder.py 159 160 161 162 @property def margin_lines ( self ) -> int : \"Screen margin\" return self . info_lines + self . prompt_lines + self . header_lines matching_candidates_len () property Number of matching candidates Source code in pzp/finder.py 139 140 141 142 @property def matching_candidates_len ( self ) -> int : \"Number of matching candidates\" return len ( self . matching_candidates ) max_candidates_lines () property Maximun number of candidates printables on the screen Source code in pzp/finder.py 164 165 166 167 @property def max_candidates_lines ( self ) -> int : \"Maximun number of candidates printables on the screen\" return self . screen . height - self . margin_lines page_down () Move one page down Source code in pzp/finder.py 319 320 321 322 @Action ( \"page-down\" , keys = [ \"page-down\" , \"pgdn\" ]) def page_down ( self ) -> None : \"Move one page down\" self . selected = self . selected + self . max_candidates_lines page_up () Move one page up Source code in pzp/finder.py 324 325 326 327 @Action ( \"page-up\" , keys = [ \"page-up\" , \"pgup\" ]) def page_up ( self ) -> None : \"Move one page up\" self . selected = self . selected - self . max_candidates_lines prepare_result () Output the selected item, if any Source code in pzp/finder.py 292 293 294 295 296 297 def prepare_result ( self ) -> Any : \"Output the selected item, if any\" try : return self . matching_candidates [ self . selected ] except IndexError : return None print_empty_lines () Print empty lines Source code in pzp/finder.py 274 275 276 277 def print_empty_lines ( self ) -> None : \"Print empty lines\" lines = self . max_candidates_lines - self . screen_items_len self . screen . nl ( lines ) print_header () Print header Source code in pzp/finder.py 258 259 260 261 def print_header ( self ) -> None : \"Print header\" if self . header_str : self . screen . erase_line () . write ( self . header_str ) . nl () print_info () Print info Source code in pzp/finder.py 279 280 281 282 def print_info ( self ) -> None : \"Print info\" if self . info_style == InfoStyle . DEFAULT : self . screen . erase_line () . space ( 2 ) . write ( f \" { YELLOW }{ self . matching_candidates_len } / { self . candidates_len } \" ) . reset () . nl () print_items () Print candidates Source code in pzp/finder.py 263 264 265 266 267 268 269 270 271 272 def print_items ( self ) -> None : \"Print candidates\" for i , item in enumerate ( self . screen_items ): is_selected = i + self . offset == self . selected self . screen . erase_line () if is_selected : self . screen . write ( f \" { RED }{ BOLD }{ BLACK_BG }{ self . pointer_str } \" ) . reset () . bold () else : self . screen . write ( f \" { BLACK_BG }{ self . no_pointer_str } \" ) . reset () self . screen . space ( 1 ) . write ( self . format_fn ( item )) . reset () . nl () print_prompt () Print prompt Source code in pzp/finder.py 284 285 286 287 def print_prompt ( self ) -> None : \"Print prompt\" self . screen . erase_line () . write ( f \" { CYAN }{ self . prompt_str } \" ) . reset () self . input . print ( self . screen ) process_key ( ch = None ) Process the pressed key Source code in pzp/finder.py 220 221 222 223 224 225 226 227 228 229 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch ) try : self . input . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result ()) # type: ignore prompt_lines () property Number of prompt lines Source code in pzp/finder.py 149 150 151 152 @property def prompt_lines ( self ) -> int : \"Number of prompt lines\" return len ( self . prompt_str . split ( f \" { NL } \" )) refresh_candidates () Load/reload the candidate list Source code in pzp/finder.py 209 210 211 212 213 214 215 216 217 218 def refresh_candidates ( self ) -> None : \"Load/reload the candidate list\" # Get items if isinstance ( self . get_items_fn , Iterator ): self . candidates = list ( self . get_items_fn ) elif callable ( self . get_items_fn ): self . candidates = list ( self . get_items_fn ()) # Reset selected/offset self . selected : int = 0 self . offset : int = 0 screen_items () property Candidates to be displayed on the screen Source code in pzp/finder.py 124 125 126 127 @property def screen_items ( self ) -> Sequence [ Any ]: \"Candidates to be displayed on the screen\" return self . matching_candidates [ self . offset : self . offset + self . max_candidates_lines ] screen_items_len () property Number of items on the screen Source code in pzp/finder.py 129 130 131 132 @property def screen_items_len ( self ) -> int : \"Number of items on the screen\" return len ( self . screen_items ) setup ( input = None ) Setup Finder execution Parameters: Name Type Description Default input Optional [ str ] initial search string None Source code in pzp/finder.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Finder execution Args: input: initial search string \"\"\" self . input = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) # Load the candidate list self . refresh_candidates () # Calculate the required height and setup the screen height = self . height if self . height is not None else self . candidates_len + self . margin_lines self . screen : Screen = Screen ( stream = self . output_stream , fullscreen = self . fullscreen , height = height ) # Filter the items, calculate the screen offset self . apply_filter () self . update_screen ( erase = False ) show ( input = None ) Open pzp and return the selected element Parameters: Name Type Description Default input Optional [ str ] initial search string None Returns: Name Type Description item Any the selected item Source code in pzp/finder.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial search string Returns: item: the selected item \"\"\" self . setup ( input = input ) try : while True : self . process_key () self . apply_filter () self . update_screen () except AcceptAction as accept : return accept . selected_item except AbortAction : return None finally : self . screen . cleanup () up () Move one line up Source code in pzp/finder.py 314 315 316 317 @Action ( \"up\" , keys = [ \"ctrl-k\" , \"ctrl-p\" , \"up\" ]) def up ( self ) -> None : \"Move one line up\" self . selected = self . selected - 1 update_screen ( erase = True ) Update the screen - erase the old items, print the filtered items and the prompt Source code in pzp/finder.py 246 247 248 249 250 251 252 253 254 255 256 def update_screen ( self , erase : bool = True ) -> None : \"Update the screen - erase the old items, print the filtered items and the prompt\" if erase : self . screen . erase_screen () if self . layout == Layout . REVERSE_LIST : self . print_header () self . print_items () self . print_empty_lines () self . print_info () self . print_prompt () self . screen . flush () InfoStyle Bases: Enum Display style of finder info Source code in pzp/finder.py 62 63 64 65 66 67 68 class InfoStyle ( Enum ): \"Display style of finder info\" DEFAULT = \"default\" \" Display on the next line to the prompt \" HIDDEN = \"hidden\" \" Do not display finder info\" DEFAULT = 'default' class-attribute Display on the next line to the prompt HIDDEN = 'hidden' class-attribute Do not display finder info Layout Bases: Enum Finder layouts Source code in pzp/finder.py 55 56 57 58 59 class Layout ( Enum ): \"Finder layouts\" REVERSE_LIST = \"reverse-list\" \" Display from the top of the screen, prompt at the bottom \" REVERSE_LIST = 'reverse-list' class-attribute Display from the top of the screen, prompt at the bottom","title":"pzp.finder"},{"location":"api/finder/#pzp.finder.DEFAULT_HEADER","text":"Default header","title":"DEFAULT_HEADER"},{"location":"api/finder/#pzp.finder.DEFAULT_POINTER","text":"Default pointer","title":"DEFAULT_POINTER"},{"location":"api/finder/#pzp.finder.DEFAULT_PROMPT","text":"Default input prompt","title":"DEFAULT_PROMPT"},{"location":"api/finder/#pzp.finder.CustomAction","text":"Bases: GenericAction The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Parameters: Name Type Description Default action str action required selected_item Any selected item, if any None ch str pressed key required Attributes: Name Type Description action action selected_item selected item, if any ch pressed key Source code in pzp/exceptions.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 class CustomAction ( GenericAction ): \"\"\" The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Args: action: action selected_item: selected item, if any ch: pressed key Attributes: action: action selected_item: selected item, if any ch: pressed key \"\"\" def __init__ ( self , action : str , ch : str , selected_item : Any = None ): super () . __init__ ( action , ch , selected_item )","title":"CustomAction"},{"location":"api/finder/#pzp.finder.Finder","text":"Bases: ActionsHandler Source code in pzp/finder.pyclass Finder ( ActionsHandler ): def __init__ ( self , candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], fullscreen : bool = True , height : Optional [ int ] = None , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Layout = Layout . REVERSE_LIST , info_style : InfoStyle = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ]] = ExtendedMatcher , output_stream : TextIO = sys . stderr , ): \"\"\" Initializate Finder object Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher output_stream: Output stream \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . fullscreen = fullscreen self . height = height self . format_fn = format_fn self . layout : Layout = layout self . info_style : InfoStyle = info_style self . pointer_str = pointer_str self . no_pointer_str = \" \" * len ( pointer_str ) self . prompt_str = prompt_str self . header_str = header_str self . matcher = matcher () if callable ( matcher ) else matcher self . output_stream = output_stream # Get the candidates if isinstance ( candidates , Iterator ) or callable ( candidates ): self . get_items_fn : Union [ None , Callable [[], Sequence [ Any ]], Iterator [ Any ]] = candidates self . candidates : Sequence [ Any ] = [] else : self . get_items_fn = None self . candidates = candidates @property def screen_items ( self ) -> Sequence [ Any ]: \"Candidates to be displayed on the screen\" return self . matching_candidates [ self . offset : self . offset + self . max_candidates_lines ] @property def screen_items_len ( self ) -> int : \"Number of items on the screen\" return len ( self . screen_items ) @property def candidates_len ( self ) -> int : \"Number of candidates\" return len ( self . candidates ) @property def matching_candidates_len ( self ) -> int : \"Number of matching candidates\" return len ( self . matching_candidates ) @property def info_lines ( self ) -> int : \"Number of info lines\" return 1 if self . info_style == InfoStyle . DEFAULT else 0 @property def prompt_lines ( self ) -> int : \"Number of prompt lines\" return len ( self . prompt_str . split ( f \" { NL } \" )) @property def header_lines ( self ) -> int : \"Number of header lines\" return len ( self . header_str . split ( f \" { NL } \" )) if self . header_str else 0 @property def margin_lines ( self ) -> int : \"Screen margin\" return self . info_lines + self . prompt_lines + self . header_lines @property def max_candidates_lines ( self ) -> int : \"Maximun number of candidates printables on the screen\" return self . screen . height - self . margin_lines def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Finder execution Args: input: initial search string \"\"\" self . input = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) # Load the candidate list self . refresh_candidates () # Calculate the required height and setup the screen height = self . height if self . height is not None else self . candidates_len + self . margin_lines self . screen : Screen = Screen ( stream = self . output_stream , fullscreen = self . fullscreen , height = height ) # Filter the items, calculate the screen offset self . apply_filter () self . update_screen ( erase = False ) def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial search string Returns: item: the selected item \"\"\" self . setup ( input = input ) try : while True : self . process_key () self . apply_filter () self . update_screen () except AcceptAction as accept : return accept . selected_item except AbortAction : return None finally : self . screen . cleanup () def refresh_candidates ( self ) -> None : \"Load/reload the candidate list\" # Get items if isinstance ( self . get_items_fn , Iterator ): self . candidates = list ( self . get_items_fn ) elif callable ( self . get_items_fn ): self . candidates = list ( self . get_items_fn ()) # Reset selected/offset self . selected : int = 0 self . offset : int = 0 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch ) try : self . input . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result ()) # type: ignore def apply_filter ( self ) -> None : \"Filter the items, calculate the screen offset\" self . matching_candidates : Sequence [ Any ] = self . matcher . filter ( pattern = str ( self . input ), candidates = self . candidates , format_fn = self . format_fn ) # Adject selected self . selected = max ( min ( self . selected , self . matching_candidates_len - 1 ), 0 ) # Calculate the offset if self . selected >= self . offset + self . max_candidates_lines : self . offset = self . selected - self . max_candidates_lines + 1 elif self . selected < self . offset : self . offset = self . selected if self . offset < 0 : self . offset = 0 def update_screen ( self , erase : bool = True ) -> None : \"Update the screen - erase the old items, print the filtered items and the prompt\" if erase : self . screen . erase_screen () if self . layout == Layout . REVERSE_LIST : self . print_header () self . print_items () self . print_empty_lines () self . print_info () self . print_prompt () self . screen . flush () def print_header ( self ) -> None : \"Print header\" if self . header_str : self . screen . erase_line () . write ( self . header_str ) . nl () def print_items ( self ) -> None : \"Print candidates\" for i , item in enumerate ( self . screen_items ): is_selected = i + self . offset == self . selected self . screen . erase_line () if is_selected : self . screen . write ( f \" { RED }{ BOLD }{ BLACK_BG }{ self . pointer_str } \" ) . reset () . bold () else : self . screen . write ( f \" { BLACK_BG }{ self . no_pointer_str } \" ) . reset () self . screen . space ( 1 ) . write ( self . format_fn ( item )) . reset () . nl () def print_empty_lines ( self ) -> None : \"Print empty lines\" lines = self . max_candidates_lines - self . screen_items_len self . screen . nl ( lines ) def print_info ( self ) -> None : \"Print info\" if self . info_style == InfoStyle . DEFAULT : self . screen . erase_line () . space ( 2 ) . write ( f \" { YELLOW }{ self . matching_candidates_len } / { self . candidates_len } \" ) . reset () . nl () def print_prompt ( self ) -> None : \"Print prompt\" self . screen . erase_line () . write ( f \" { CYAN }{ self . prompt_str } \" ) . reset () self . input . print ( self . screen ) def match ( self , item : Any ) -> bool : return str ( self . input ) . lower () in self . format_fn ( item ) . lower () def prepare_result ( self ) -> Any : \"Output the selected item, if any\" try : return self . matching_candidates [ self . selected ] except IndexError : return None @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = self . prepare_result ()) @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch ) @Action ( \"down\" , keys = [ \"ctrl-j\" , \"ctrl-n\" , \"down\" ]) def down ( self ) -> None : \"Move one line down\" self . selected = self . selected + 1 @Action ( \"up\" , keys = [ \"ctrl-k\" , \"ctrl-p\" , \"up\" ]) def up ( self ) -> None : \"Move one line up\" self . selected = self . selected - 1 @Action ( \"page-down\" , keys = [ \"page-down\" , \"pgdn\" ]) def page_down ( self ) -> None : \"Move one page down\" self . selected = self . selected + self . max_candidates_lines @Action ( \"page-up\" , keys = [ \"page-up\" , \"pgup\" ]) def page_up ( self ) -> None : \"Move one page up\" self . selected = self . selected - self . max_candidates_lines @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass","title":"Finder"},{"location":"api/finder/#pzp.finder.Finder.__init__","text":"Initializate Finder object Parameters: Name Type Description Default candidates Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]] Candidates required fullscreen bool Full screen mode True height Optional [ int ] Finder window height None format_fn Callable [[ Any ], str ] Items format function lambda x: str(x) layout Layout Finder layout Layout.REVERSE_LIST info_style InfoStyle Determines the display style of finder info InfoStyle.DEFAULT pointer_str str Pointer to the current line DEFAULT_POINTER prompt_str str Input prompt DEFAULT_PROMPT header_str str Header DEFAULT_HEADER keys_binding Optional [ KeysBinding ] Custom keys binding None matcher Union [ Matcher , Type [ Matcher ]] Matcher ExtendedMatcher output_stream TextIO Output stream sys.stderr Source code in pzp/finder.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def __init__ ( self , candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], fullscreen : bool = True , height : Optional [ int ] = None , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Layout = Layout . REVERSE_LIST , info_style : InfoStyle = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ]] = ExtendedMatcher , output_stream : TextIO = sys . stderr , ): \"\"\" Initializate Finder object Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher output_stream: Output stream \"\"\" super () . __init__ ( keys_binding = keys_binding ) self . fullscreen = fullscreen self . height = height self . format_fn = format_fn self . layout : Layout = layout self . info_style : InfoStyle = info_style self . pointer_str = pointer_str self . no_pointer_str = \" \" * len ( pointer_str ) self . prompt_str = prompt_str self . header_str = header_str self . matcher = matcher () if callable ( matcher ) else matcher self . output_stream = output_stream # Get the candidates if isinstance ( candidates , Iterator ) or callable ( candidates ): self . get_items_fn : Union [ None , Callable [[], Sequence [ Any ]], Iterator [ Any ]] = candidates self . candidates : Sequence [ Any ] = [] else : self . get_items_fn = None self . candidates = candidates","title":"__init__()"},{"location":"api/finder/#pzp.finder.Finder.abort","text":"Cancel Source code in pzp/finder.py 304 305 306 307 @Action ( \"abort\" , keys = [ \"ctrl-c\" , \"ctrl-g\" , \"ctrl-q\" , \"esc\" ]) def abort ( self , key_event : KeyEvent ) -> None : \"Cancel\" raise AbortAction ( action = \"abort\" , ch = key_event . ch )","title":"abort()"},{"location":"api/finder/#pzp.finder.Finder.accept","text":"Confirm Source code in pzp/finder.py 299 300 301 302 @Action ( \"accept\" , keys = [ \"enter\" ]) def accept ( self , key_event : KeyEvent ) -> None : \"Confirm\" raise AcceptAction ( action = \"accept\" , ch = key_event . ch , selected_item = self . prepare_result ())","title":"accept()"},{"location":"api/finder/#pzp.finder.Finder.apply_filter","text":"Filter the items, calculate the screen offset Source code in pzp/finder.py 231 232 233 234 235 236 237 238 239 240 241 242 243 244 def apply_filter ( self ) -> None : \"Filter the items, calculate the screen offset\" self . matching_candidates : Sequence [ Any ] = self . matcher . filter ( pattern = str ( self . input ), candidates = self . candidates , format_fn = self . format_fn ) # Adject selected self . selected = max ( min ( self . selected , self . matching_candidates_len - 1 ), 0 ) # Calculate the offset if self . selected >= self . offset + self . max_candidates_lines : self . offset = self . selected - self . max_candidates_lines + 1 elif self . selected < self . offset : self . offset = self . selected if self . offset < 0 : self . offset = 0","title":"apply_filter()"},{"location":"api/finder/#pzp.finder.Finder.candidates_len","text":"Number of candidates Source code in pzp/finder.py 134 135 136 137 @property def candidates_len ( self ) -> int : \"Number of candidates\" return len ( self . candidates )","title":"candidates_len()"},{"location":"api/finder/#pzp.finder.Finder.down","text":"Move one line down Source code in pzp/finder.py 309 310 311 312 @Action ( \"down\" , keys = [ \"ctrl-j\" , \"ctrl-n\" , \"down\" ]) def down ( self ) -> None : \"Move one line down\" self . selected = self . selected + 1","title":"down()"},{"location":"api/finder/#pzp.finder.Finder.header_lines","text":"Number of header lines Source code in pzp/finder.py 154 155 156 157 @property def header_lines ( self ) -> int : \"Number of header lines\" return len ( self . header_str . split ( f \" { NL } \" )) if self . header_str else 0","title":"header_lines()"},{"location":"api/finder/#pzp.finder.Finder.ignore","text":"Do nothing Source code in pzp/finder.py 329 330 331 332 @Action ( \"ignore\" , keys = [ \"null\" , \"insert\" ]) def ignore ( self ) -> None : \"Do nothing\" pass","title":"ignore()"},{"location":"api/finder/#pzp.finder.Finder.info_lines","text":"Number of info lines Source code in pzp/finder.py 144 145 146 147 @property def info_lines ( self ) -> int : \"Number of info lines\" return 1 if self . info_style == InfoStyle . DEFAULT else 0","title":"info_lines()"},{"location":"api/finder/#pzp.finder.Finder.margin_lines","text":"Screen margin Source code in pzp/finder.py 159 160 161 162 @property def margin_lines ( self ) -> int : \"Screen margin\" return self . info_lines + self . prompt_lines + self . header_lines","title":"margin_lines()"},{"location":"api/finder/#pzp.finder.Finder.matching_candidates_len","text":"Number of matching candidates Source code in pzp/finder.py 139 140 141 142 @property def matching_candidates_len ( self ) -> int : \"Number of matching candidates\" return len ( self . matching_candidates )","title":"matching_candidates_len()"},{"location":"api/finder/#pzp.finder.Finder.max_candidates_lines","text":"Maximun number of candidates printables on the screen Source code in pzp/finder.py 164 165 166 167 @property def max_candidates_lines ( self ) -> int : \"Maximun number of candidates printables on the screen\" return self . screen . height - self . margin_lines","title":"max_candidates_lines()"},{"location":"api/finder/#pzp.finder.Finder.page_down","text":"Move one page down Source code in pzp/finder.py 319 320 321 322 @Action ( \"page-down\" , keys = [ \"page-down\" , \"pgdn\" ]) def page_down ( self ) -> None : \"Move one page down\" self . selected = self . selected + self . max_candidates_lines","title":"page_down()"},{"location":"api/finder/#pzp.finder.Finder.page_up","text":"Move one page up Source code in pzp/finder.py 324 325 326 327 @Action ( \"page-up\" , keys = [ \"page-up\" , \"pgup\" ]) def page_up ( self ) -> None : \"Move one page up\" self . selected = self . selected - self . max_candidates_lines","title":"page_up()"},{"location":"api/finder/#pzp.finder.Finder.prepare_result","text":"Output the selected item, if any Source code in pzp/finder.py 292 293 294 295 296 297 def prepare_result ( self ) -> Any : \"Output the selected item, if any\" try : return self . matching_candidates [ self . selected ] except IndexError : return None","title":"prepare_result()"},{"location":"api/finder/#pzp.finder.Finder.print_empty_lines","text":"Print empty lines Source code in pzp/finder.py 274 275 276 277 def print_empty_lines ( self ) -> None : \"Print empty lines\" lines = self . max_candidates_lines - self . screen_items_len self . screen . nl ( lines )","title":"print_empty_lines()"},{"location":"api/finder/#pzp.finder.Finder.print_header","text":"Print header Source code in pzp/finder.py 258 259 260 261 def print_header ( self ) -> None : \"Print header\" if self . header_str : self . screen . erase_line () . write ( self . header_str ) . nl ()","title":"print_header()"},{"location":"api/finder/#pzp.finder.Finder.print_info","text":"Print info Source code in pzp/finder.py 279 280 281 282 def print_info ( self ) -> None : \"Print info\" if self . info_style == InfoStyle . DEFAULT : self . screen . erase_line () . space ( 2 ) . write ( f \" { YELLOW }{ self . matching_candidates_len } / { self . candidates_len } \" ) . reset () . nl ()","title":"print_info()"},{"location":"api/finder/#pzp.finder.Finder.print_items","text":"Print candidates Source code in pzp/finder.py 263 264 265 266 267 268 269 270 271 272 def print_items ( self ) -> None : \"Print candidates\" for i , item in enumerate ( self . screen_items ): is_selected = i + self . offset == self . selected self . screen . erase_line () if is_selected : self . screen . write ( f \" { RED }{ BOLD }{ BLACK_BG }{ self . pointer_str } \" ) . reset () . bold () else : self . screen . write ( f \" { BLACK_BG }{ self . no_pointer_str } \" ) . reset () self . screen . space ( 1 ) . write ( self . format_fn ( item )) . reset () . nl ()","title":"print_items()"},{"location":"api/finder/#pzp.finder.Finder.print_prompt","text":"Print prompt Source code in pzp/finder.py 284 285 286 287 def print_prompt ( self ) -> None : \"Print prompt\" self . screen . erase_line () . write ( f \" { CYAN }{ self . prompt_str } \" ) . reset () self . input . print ( self . screen )","title":"print_prompt()"},{"location":"api/finder/#pzp.finder.Finder.process_key","text":"Process the pressed key Source code in pzp/finder.py 220 221 222 223 224 225 226 227 228 229 def process_key ( self , ch : Optional [ str ] = None ) -> None : \"Process the pressed key\" key_event = self . keys_handler . get_key_event ( ch ) try : self . input . process_key_event ( key_event ) except MissingHander : try : self . process_key_event ( key_event ) except MissingHander : raise CustomAction ( action = key_event . action , ch = key_event . ch , selected_item = self . prepare_result ()) # type: ignore","title":"process_key()"},{"location":"api/finder/#pzp.finder.Finder.prompt_lines","text":"Number of prompt lines Source code in pzp/finder.py 149 150 151 152 @property def prompt_lines ( self ) -> int : \"Number of prompt lines\" return len ( self . prompt_str . split ( f \" { NL } \" ))","title":"prompt_lines()"},{"location":"api/finder/#pzp.finder.Finder.refresh_candidates","text":"Load/reload the candidate list Source code in pzp/finder.py 209 210 211 212 213 214 215 216 217 218 def refresh_candidates ( self ) -> None : \"Load/reload the candidate list\" # Get items if isinstance ( self . get_items_fn , Iterator ): self . candidates = list ( self . get_items_fn ) elif callable ( self . get_items_fn ): self . candidates = list ( self . get_items_fn ()) # Reset selected/offset self . selected : int = 0 self . offset : int = 0","title":"refresh_candidates()"},{"location":"api/finder/#pzp.finder.Finder.screen_items","text":"Candidates to be displayed on the screen Source code in pzp/finder.py 124 125 126 127 @property def screen_items ( self ) -> Sequence [ Any ]: \"Candidates to be displayed on the screen\" return self . matching_candidates [ self . offset : self . offset + self . max_candidates_lines ]","title":"screen_items()"},{"location":"api/finder/#pzp.finder.Finder.screen_items_len","text":"Number of items on the screen Source code in pzp/finder.py 129 130 131 132 @property def screen_items_len ( self ) -> int : \"Number of items on the screen\" return len ( self . screen_items )","title":"screen_items_len()"},{"location":"api/finder/#pzp.finder.Finder.setup","text":"Setup Finder execution Parameters: Name Type Description Default input Optional [ str ] initial search string None Source code in pzp/finder.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 def setup ( self , input : Optional [ str ] = None ) -> None : \"\"\" Setup Finder execution Args: input: initial search string \"\"\" self . input = LineEditor ( line = input or \"\" , keys_handler = self . keys_handler ) # Load the candidate list self . refresh_candidates () # Calculate the required height and setup the screen height = self . height if self . height is not None else self . candidates_len + self . margin_lines self . screen : Screen = Screen ( stream = self . output_stream , fullscreen = self . fullscreen , height = height ) # Filter the items, calculate the screen offset self . apply_filter () self . update_screen ( erase = False )","title":"setup()"},{"location":"api/finder/#pzp.finder.Finder.show","text":"Open pzp and return the selected element Parameters: Name Type Description Default input Optional [ str ] initial search string None Returns: Name Type Description item Any the selected item Source code in pzp/finder.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 def show ( self , input : Optional [ str ] = None ) -> Any : \"\"\" Open pzp and return the selected element Args: input: initial search string Returns: item: the selected item \"\"\" self . setup ( input = input ) try : while True : self . process_key () self . apply_filter () self . update_screen () except AcceptAction as accept : return accept . selected_item except AbortAction : return None finally : self . screen . cleanup ()","title":"show()"},{"location":"api/finder/#pzp.finder.Finder.up","text":"Move one line up Source code in pzp/finder.py 314 315 316 317 @Action ( \"up\" , keys = [ \"ctrl-k\" , \"ctrl-p\" , \"up\" ]) def up ( self ) -> None : \"Move one line up\" self . selected = self . selected - 1","title":"up()"},{"location":"api/finder/#pzp.finder.Finder.update_screen","text":"Update the screen - erase the old items, print the filtered items and the prompt Source code in pzp/finder.py 246 247 248 249 250 251 252 253 254 255 256 def update_screen ( self , erase : bool = True ) -> None : \"Update the screen - erase the old items, print the filtered items and the prompt\" if erase : self . screen . erase_screen () if self . layout == Layout . REVERSE_LIST : self . print_header () self . print_items () self . print_empty_lines () self . print_info () self . print_prompt () self . screen . flush ()","title":"update_screen()"},{"location":"api/finder/#pzp.finder.InfoStyle","text":"Bases: Enum Display style of finder info Source code in pzp/finder.py 62 63 64 65 66 67 68 class InfoStyle ( Enum ): \"Display style of finder info\" DEFAULT = \"default\" \" Display on the next line to the prompt \" HIDDEN = \"hidden\" \" Do not display finder info\"","title":"InfoStyle"},{"location":"api/finder/#pzp.finder.InfoStyle.DEFAULT","text":"Display on the next line to the prompt","title":"DEFAULT"},{"location":"api/finder/#pzp.finder.InfoStyle.HIDDEN","text":"Do not display finder info","title":"HIDDEN"},{"location":"api/finder/#pzp.finder.Layout","text":"Bases: Enum Finder layouts Source code in pzp/finder.py 55 56 57 58 59 class Layout ( Enum ): \"Finder layouts\" REVERSE_LIST = \"reverse-list\" \" Display from the top of the screen, prompt at the bottom \"","title":"Layout"},{"location":"api/finder/#pzp.finder.Layout.REVERSE_LIST","text":"Display from the top of the screen, prompt at the bottom","title":"REVERSE_LIST"},{"location":"api/input/","text":"get_char () Read a keypress and return the resulting character as a string. Returns: Name Type Description char str the pressed key or the key description (e.g. \"home\") Source code in pzp/input_win.py 23 24 25 26 27 28 29 30 31 32 33 34 def get_char () -> str : \"\"\" Read a keypress and return the resulting character as a string. Returns: char: the pressed key or the key description (e.g. \"home\") \"\"\" ch : str = getwch () if ch == WIN_ESC : # When reading arrow/insert/del key, the first call returnx 0xe0 ch = getwch () # The second call returns the key code return KEYS_MAPPING . get ( ch , NULL ) return ch","title":"pzp.input"},{"location":"api/input/#pzp.input.get_char","text":"Read a keypress and return the resulting character as a string. Returns: Name Type Description char str the pressed key or the key description (e.g. \"home\") Source code in pzp/input_win.py 23 24 25 26 27 28 29 30 31 32 33 34 def get_char () -> str : \"\"\" Read a keypress and return the resulting character as a string. Returns: char: the pressed key or the key description (e.g. \"home\") \"\"\" ch : str = getwch () if ch == WIN_ESC : # When reading arrow/insert/del key, the first call returnx 0xe0 ch = getwch () # The second call returns the key code return KEYS_MAPPING . get ( ch , NULL ) return ch","title":"get_char()"},{"location":"api/keys/","text":"KeyEvent Source code in pzp/keys.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 class KeyEvent : def __init__ ( self , ch : str , action : Optional [ str ]) -> None : \"\"\" Key Event represents a key action on the keyboard. Args: ch: Pressed key action: Action Attributes: ch: Pressed key action: Action \"\"\" self . ch = ch self . action = action def __str__ ( self ) -> str : return f \"< { self . ch } , { self . action or '-' } >\" __init__ ( ch , action ) Key Event represents a key action on the keyboard. Parameters: Name Type Description Default ch str Pressed key required action Optional [ str ] Action required Attributes: Name Type Description ch Pressed key action Action Source code in pzp/keys.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def __init__ ( self , ch : str , action : Optional [ str ]) -> None : \"\"\" Key Event represents a key action on the keyboard. Args: ch: Pressed key action: Action Attributes: ch: Pressed key action: Action \"\"\" self . ch = ch self . action = action KeysHandler Source code in pzp/keys.py 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 class KeysHandler : def __init__ ( self , keys_binding : Optional [ KeysBinding ] = None ) -> None : \"\"\" Keys handler is a collection of bindings of keys to actions. Args: keys_binding: Custom key binding Attributes: keycodes_actions: key => action mapping \"\"\" self . keycodes_actions : Dict [ str , str ] = {} if keys_binding : self . update ( keys_binding ) def update ( self , keys_binding : KeysBinding ) -> None : for action , keys in keys_binding . items (): self . set_keys_binding ( keys , action ) def set_keys_binding ( self , keys : Sequence [ str ], action : str ) -> None : \"Add a binding for one or more keys to an action\" for key in keys : self . set_key_binding ( key , action ) def set_key_binding ( self , key : str , action : str ) -> None : \"Add a binding for one key to an action\" self . keycodes_actions [ KEYS [ key ] if len ( key ) > 1 else key ] = action def get_key_event ( self , ch : Optional [ str ] = None ) -> KeyEvent : if ch is None : ch = get_char () action = self . keycodes_actions . get ( ch ) return KeyEvent ( ch = ch , action = action ) __init__ ( keys_binding = None ) Keys handler is a collection of bindings of keys to actions. Parameters: Name Type Description Default keys_binding Optional [ KeysBinding ] Custom key binding None Attributes: Name Type Description keycodes_actions key => action mapping Source code in pzp/keys.py 89 90 91 92 93 94 95 96 97 98 99 100 101 def __init__ ( self , keys_binding : Optional [ KeysBinding ] = None ) -> None : \"\"\" Keys handler is a collection of bindings of keys to actions. Args: keys_binding: Custom key binding Attributes: keycodes_actions: key => action mapping \"\"\" self . keycodes_actions : Dict [ str , str ] = {} if keys_binding : self . update ( keys_binding ) set_key_binding ( key , action ) Add a binding for one key to an action Source code in pzp/keys.py 112 113 114 def set_key_binding ( self , key : str , action : str ) -> None : \"Add a binding for one key to an action\" self . keycodes_actions [ KEYS [ key ] if len ( key ) > 1 else key ] = action set_keys_binding ( keys , action ) Add a binding for one or more keys to an action Source code in pzp/keys.py 107 108 109 110 def set_keys_binding ( self , keys : Sequence [ str ], action : str ) -> None : \"Add a binding for one or more keys to an action\" for key in keys : self . set_key_binding ( key , action )","title":"pzp.keys"},{"location":"api/keys/#pzp.keys.KeyEvent","text":"Source code in pzp/keys.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 class KeyEvent : def __init__ ( self , ch : str , action : Optional [ str ]) -> None : \"\"\" Key Event represents a key action on the keyboard. Args: ch: Pressed key action: Action Attributes: ch: Pressed key action: Action \"\"\" self . ch = ch self . action = action def __str__ ( self ) -> str : return f \"< { self . ch } , { self . action or '-' } >\"","title":"KeyEvent"},{"location":"api/keys/#pzp.keys.KeyEvent.__init__","text":"Key Event represents a key action on the keyboard. Parameters: Name Type Description Default ch str Pressed key required action Optional [ str ] Action required Attributes: Name Type Description ch Pressed key action Action Source code in pzp/keys.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def __init__ ( self , ch : str , action : Optional [ str ]) -> None : \"\"\" Key Event represents a key action on the keyboard. Args: ch: Pressed key action: Action Attributes: ch: Pressed key action: Action \"\"\" self . ch = ch self . action = action","title":"__init__()"},{"location":"api/keys/#pzp.keys.KeysHandler","text":"Source code in pzp/keys.py 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 class KeysHandler : def __init__ ( self , keys_binding : Optional [ KeysBinding ] = None ) -> None : \"\"\" Keys handler is a collection of bindings of keys to actions. Args: keys_binding: Custom key binding Attributes: keycodes_actions: key => action mapping \"\"\" self . keycodes_actions : Dict [ str , str ] = {} if keys_binding : self . update ( keys_binding ) def update ( self , keys_binding : KeysBinding ) -> None : for action , keys in keys_binding . items (): self . set_keys_binding ( keys , action ) def set_keys_binding ( self , keys : Sequence [ str ], action : str ) -> None : \"Add a binding for one or more keys to an action\" for key in keys : self . set_key_binding ( key , action ) def set_key_binding ( self , key : str , action : str ) -> None : \"Add a binding for one key to an action\" self . keycodes_actions [ KEYS [ key ] if len ( key ) > 1 else key ] = action def get_key_event ( self , ch : Optional [ str ] = None ) -> KeyEvent : if ch is None : ch = get_char () action = self . keycodes_actions . get ( ch ) return KeyEvent ( ch = ch , action = action )","title":"KeysHandler"},{"location":"api/keys/#pzp.keys.KeysHandler.__init__","text":"Keys handler is a collection of bindings of keys to actions. Parameters: Name Type Description Default keys_binding Optional [ KeysBinding ] Custom key binding None Attributes: Name Type Description keycodes_actions key => action mapping Source code in pzp/keys.py 89 90 91 92 93 94 95 96 97 98 99 100 101 def __init__ ( self , keys_binding : Optional [ KeysBinding ] = None ) -> None : \"\"\" Keys handler is a collection of bindings of keys to actions. Args: keys_binding: Custom key binding Attributes: keycodes_actions: key => action mapping \"\"\" self . keycodes_actions : Dict [ str , str ] = {} if keys_binding : self . update ( keys_binding )","title":"__init__()"},{"location":"api/keys/#pzp.keys.KeysHandler.set_key_binding","text":"Add a binding for one key to an action Source code in pzp/keys.py 112 113 114 def set_key_binding ( self , key : str , action : str ) -> None : \"Add a binding for one key to an action\" self . keycodes_actions [ KEYS [ key ] if len ( key ) > 1 else key ] = action","title":"set_key_binding()"},{"location":"api/keys/#pzp.keys.KeysHandler.set_keys_binding","text":"Add a binding for one or more keys to an action Source code in pzp/keys.py 107 108 109 110 def set_keys_binding ( self , keys : Sequence [ str ], action : str ) -> None : \"Add a binding for one or more keys to an action\" for key in keys : self . set_key_binding ( key , action )","title":"set_keys_binding()"},{"location":"api/line_editor/","text":"LineEditor Bases: ActionsHandler Source code in pzp/line_editor.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 class LineEditor ( ActionsHandler ): def __init__ ( self , line : Optional [ str ] = None , keys_handler : Optional [ KeysHandler ] = None ) -> None : \"\"\" Line editor Args: line: Initial value keys_handler: Keys handler \"\"\" super () . __init__ ( keys_handler = keys_handler ) self . line = line or \"\" self . cursor_pos : int = len ( self . line ) def set_cursor_pos ( self , cursor_pos : int ) -> None : \"Set cursor position (absolute)\" self . cursor_pos = max ( min ( cursor_pos , len ( self . line )), 0 ) def adj_cursor_pos ( self , characters : int ) -> None : \"Set cursor position (relative to current position)\" self . cursor_pos = max ( min ( self . cursor_pos + characters , len ( self . line )), 0 ) def insert ( self , ch : str ) -> None : \"Insert characters at the current cursor position\" if ch >= SPACE : # Add the character to line self . line = self . line [ 0 : self . cursor_pos ] + ch + self . line [ self . cursor_pos :] self . adj_cursor_pos ( len ( ch )) @Action ( \"backward-char\" , keys = [ \"ctrl-b\" , \"left\" ]) def backward_char ( self ) -> None : \"Move the cursor back one character\" self . set_cursor_pos ( self . cursor_pos - 1 ) @Action ( \"forward-char\" , keys = [ \"ctrl-f\" , \"right\" ]) def forward_char ( self ) -> None : \"Move the cursor forward one character\" self . set_cursor_pos ( self . cursor_pos + 1 ) @Action ( \"beginning-of-line\" , keys = [ \"ctrl-a\" , \"home\" ]) def beginning_of_line ( self ) -> None : \"Move the cursor to the line start\" self . set_cursor_pos ( 0 ) @Action ( \"end-of-line\" , keys = [ \"ctrl-e\" , \"end\" ]) def end_of_line ( self ) -> None : \"Move the cursor to the line end\" self . set_cursor_pos ( len ( self )) @Action ( \"backward-delete-char\" , keys = [ \"ctrl-h\" , \"bspace\" ]) def delete_backward_char ( self ) -> None : \"Delete the previous character\" if self . cursor_pos > 0 : self . line = self . line [: self . cursor_pos - 1 ] + self . line [ self . cursor_pos :] self . adj_cursor_pos ( - 1 ) @Action ( \"delete-char\" , keys = [ \"ctrl-d\" , \"del\" ]) def delete_char ( self ) -> None : \"Delete the current character\" self . line = self . line [: self . cursor_pos ] + self . line [ self . cursor_pos + 1 :] self . adj_cursor_pos ( 0 ) @Action ( \"default\" ) def default ( self , key_event : KeyEvent ) -> None : self . insert ( key_event . ch ) def print ( self , screen : \"Screen\" ) -> None : \"\"\" Print the line and set the cursor position Args: screen: Screen instance \"\"\" screen . write ( self . line ) . move_left ( len ( self ) - self . cursor_pos ) def __len__ ( self ) -> int : \"Return line length\" return len ( self . line ) def __str__ ( self ) -> str : \"Return the line\" return self . line __init__ ( line = None , keys_handler = None ) Line editor Parameters: Name Type Description Default line Optional [ str ] Initial value None keys_handler Optional [ KeysHandler ] Keys handler None Source code in pzp/line_editor.py 15 16 17 18 19 20 21 22 23 24 25 def __init__ ( self , line : Optional [ str ] = None , keys_handler : Optional [ KeysHandler ] = None ) -> None : \"\"\" Line editor Args: line: Initial value keys_handler: Keys handler \"\"\" super () . __init__ ( keys_handler = keys_handler ) self . line = line or \"\" self . cursor_pos : int = len ( self . line ) __len__ () Return line length Source code in pzp/line_editor.py 87 88 89 def __len__ ( self ) -> int : \"Return line length\" return len ( self . line ) __str__ () Return the line Source code in pzp/line_editor.py 91 92 93 def __str__ ( self ) -> str : \"Return the line\" return self . line adj_cursor_pos ( characters ) Set cursor position (relative to current position) Source code in pzp/line_editor.py 31 32 33 def adj_cursor_pos ( self , characters : int ) -> None : \"Set cursor position (relative to current position)\" self . cursor_pos = max ( min ( self . cursor_pos + characters , len ( self . line )), 0 ) backward_char () Move the cursor back one character Source code in pzp/line_editor.py 41 42 43 44 @Action ( \"backward-char\" , keys = [ \"ctrl-b\" , \"left\" ]) def backward_char ( self ) -> None : \"Move the cursor back one character\" self . set_cursor_pos ( self . cursor_pos - 1 ) beginning_of_line () Move the cursor to the line start Source code in pzp/line_editor.py 51 52 53 54 @Action ( \"beginning-of-line\" , keys = [ \"ctrl-a\" , \"home\" ]) def beginning_of_line ( self ) -> None : \"Move the cursor to the line start\" self . set_cursor_pos ( 0 ) delete_backward_char () Delete the previous character Source code in pzp/line_editor.py 61 62 63 64 65 66 @Action ( \"backward-delete-char\" , keys = [ \"ctrl-h\" , \"bspace\" ]) def delete_backward_char ( self ) -> None : \"Delete the previous character\" if self . cursor_pos > 0 : self . line = self . line [: self . cursor_pos - 1 ] + self . line [ self . cursor_pos :] self . adj_cursor_pos ( - 1 ) delete_char () Delete the current character Source code in pzp/line_editor.py 68 69 70 71 72 @Action ( \"delete-char\" , keys = [ \"ctrl-d\" , \"del\" ]) def delete_char ( self ) -> None : \"Delete the current character\" self . line = self . line [: self . cursor_pos ] + self . line [ self . cursor_pos + 1 :] self . adj_cursor_pos ( 0 ) end_of_line () Move the cursor to the line end Source code in pzp/line_editor.py 56 57 58 59 @Action ( \"end-of-line\" , keys = [ \"ctrl-e\" , \"end\" ]) def end_of_line ( self ) -> None : \"Move the cursor to the line end\" self . set_cursor_pos ( len ( self )) forward_char () Move the cursor forward one character Source code in pzp/line_editor.py 46 47 48 49 @Action ( \"forward-char\" , keys = [ \"ctrl-f\" , \"right\" ]) def forward_char ( self ) -> None : \"Move the cursor forward one character\" self . set_cursor_pos ( self . cursor_pos + 1 ) insert ( ch ) Insert characters at the current cursor position Source code in pzp/line_editor.py 35 36 37 38 39 def insert ( self , ch : str ) -> None : \"Insert characters at the current cursor position\" if ch >= SPACE : # Add the character to line self . line = self . line [ 0 : self . cursor_pos ] + ch + self . line [ self . cursor_pos :] self . adj_cursor_pos ( len ( ch )) print ( screen ) Print the line and set the cursor position Parameters: Name Type Description Default screen Screen Screen instance required Source code in pzp/line_editor.py 78 79 80 81 82 83 84 85 def print ( self , screen : \"Screen\" ) -> None : \"\"\" Print the line and set the cursor position Args: screen: Screen instance \"\"\" screen . write ( self . line ) . move_left ( len ( self ) - self . cursor_pos ) set_cursor_pos ( cursor_pos ) Set cursor position (absolute) Source code in pzp/line_editor.py 27 28 29 def set_cursor_pos ( self , cursor_pos : int ) -> None : \"Set cursor position (absolute)\" self . cursor_pos = max ( min ( cursor_pos , len ( self . line )), 0 )","title":"pzp.line_editor"},{"location":"api/line_editor/#pzp.line_editor.LineEditor","text":"Bases: ActionsHandler Source code in pzp/line_editor.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 class LineEditor ( ActionsHandler ): def __init__ ( self , line : Optional [ str ] = None , keys_handler : Optional [ KeysHandler ] = None ) -> None : \"\"\" Line editor Args: line: Initial value keys_handler: Keys handler \"\"\" super () . __init__ ( keys_handler = keys_handler ) self . line = line or \"\" self . cursor_pos : int = len ( self . line ) def set_cursor_pos ( self , cursor_pos : int ) -> None : \"Set cursor position (absolute)\" self . cursor_pos = max ( min ( cursor_pos , len ( self . line )), 0 ) def adj_cursor_pos ( self , characters : int ) -> None : \"Set cursor position (relative to current position)\" self . cursor_pos = max ( min ( self . cursor_pos + characters , len ( self . line )), 0 ) def insert ( self , ch : str ) -> None : \"Insert characters at the current cursor position\" if ch >= SPACE : # Add the character to line self . line = self . line [ 0 : self . cursor_pos ] + ch + self . line [ self . cursor_pos :] self . adj_cursor_pos ( len ( ch )) @Action ( \"backward-char\" , keys = [ \"ctrl-b\" , \"left\" ]) def backward_char ( self ) -> None : \"Move the cursor back one character\" self . set_cursor_pos ( self . cursor_pos - 1 ) @Action ( \"forward-char\" , keys = [ \"ctrl-f\" , \"right\" ]) def forward_char ( self ) -> None : \"Move the cursor forward one character\" self . set_cursor_pos ( self . cursor_pos + 1 ) @Action ( \"beginning-of-line\" , keys = [ \"ctrl-a\" , \"home\" ]) def beginning_of_line ( self ) -> None : \"Move the cursor to the line start\" self . set_cursor_pos ( 0 ) @Action ( \"end-of-line\" , keys = [ \"ctrl-e\" , \"end\" ]) def end_of_line ( self ) -> None : \"Move the cursor to the line end\" self . set_cursor_pos ( len ( self )) @Action ( \"backward-delete-char\" , keys = [ \"ctrl-h\" , \"bspace\" ]) def delete_backward_char ( self ) -> None : \"Delete the previous character\" if self . cursor_pos > 0 : self . line = self . line [: self . cursor_pos - 1 ] + self . line [ self . cursor_pos :] self . adj_cursor_pos ( - 1 ) @Action ( \"delete-char\" , keys = [ \"ctrl-d\" , \"del\" ]) def delete_char ( self ) -> None : \"Delete the current character\" self . line = self . line [: self . cursor_pos ] + self . line [ self . cursor_pos + 1 :] self . adj_cursor_pos ( 0 ) @Action ( \"default\" ) def default ( self , key_event : KeyEvent ) -> None : self . insert ( key_event . ch ) def print ( self , screen : \"Screen\" ) -> None : \"\"\" Print the line and set the cursor position Args: screen: Screen instance \"\"\" screen . write ( self . line ) . move_left ( len ( self ) - self . cursor_pos ) def __len__ ( self ) -> int : \"Return line length\" return len ( self . line ) def __str__ ( self ) -> str : \"Return the line\" return self . line","title":"LineEditor"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.__init__","text":"Line editor Parameters: Name Type Description Default line Optional [ str ] Initial value None keys_handler Optional [ KeysHandler ] Keys handler None Source code in pzp/line_editor.py 15 16 17 18 19 20 21 22 23 24 25 def __init__ ( self , line : Optional [ str ] = None , keys_handler : Optional [ KeysHandler ] = None ) -> None : \"\"\" Line editor Args: line: Initial value keys_handler: Keys handler \"\"\" super () . __init__ ( keys_handler = keys_handler ) self . line = line or \"\" self . cursor_pos : int = len ( self . line )","title":"__init__()"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.__len__","text":"Return line length Source code in pzp/line_editor.py 87 88 89 def __len__ ( self ) -> int : \"Return line length\" return len ( self . line )","title":"__len__()"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.__str__","text":"Return the line Source code in pzp/line_editor.py 91 92 93 def __str__ ( self ) -> str : \"Return the line\" return self . line","title":"__str__()"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.adj_cursor_pos","text":"Set cursor position (relative to current position) Source code in pzp/line_editor.py 31 32 33 def adj_cursor_pos ( self , characters : int ) -> None : \"Set cursor position (relative to current position)\" self . cursor_pos = max ( min ( self . cursor_pos + characters , len ( self . line )), 0 )","title":"adj_cursor_pos()"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.backward_char","text":"Move the cursor back one character Source code in pzp/line_editor.py 41 42 43 44 @Action ( \"backward-char\" , keys = [ \"ctrl-b\" , \"left\" ]) def backward_char ( self ) -> None : \"Move the cursor back one character\" self . set_cursor_pos ( self . cursor_pos - 1 )","title":"backward_char()"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.beginning_of_line","text":"Move the cursor to the line start Source code in pzp/line_editor.py 51 52 53 54 @Action ( \"beginning-of-line\" , keys = [ \"ctrl-a\" , \"home\" ]) def beginning_of_line ( self ) -> None : \"Move the cursor to the line start\" self . set_cursor_pos ( 0 )","title":"beginning_of_line()"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.delete_backward_char","text":"Delete the previous character Source code in pzp/line_editor.py 61 62 63 64 65 66 @Action ( \"backward-delete-char\" , keys = [ \"ctrl-h\" , \"bspace\" ]) def delete_backward_char ( self ) -> None : \"Delete the previous character\" if self . cursor_pos > 0 : self . line = self . line [: self . cursor_pos - 1 ] + self . line [ self . cursor_pos :] self . adj_cursor_pos ( - 1 )","title":"delete_backward_char()"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.delete_char","text":"Delete the current character Source code in pzp/line_editor.py 68 69 70 71 72 @Action ( \"delete-char\" , keys = [ \"ctrl-d\" , \"del\" ]) def delete_char ( self ) -> None : \"Delete the current character\" self . line = self . line [: self . cursor_pos ] + self . line [ self . cursor_pos + 1 :] self . adj_cursor_pos ( 0 )","title":"delete_char()"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.end_of_line","text":"Move the cursor to the line end Source code in pzp/line_editor.py 56 57 58 59 @Action ( \"end-of-line\" , keys = [ \"ctrl-e\" , \"end\" ]) def end_of_line ( self ) -> None : \"Move the cursor to the line end\" self . set_cursor_pos ( len ( self ))","title":"end_of_line()"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.forward_char","text":"Move the cursor forward one character Source code in pzp/line_editor.py 46 47 48 49 @Action ( \"forward-char\" , keys = [ \"ctrl-f\" , \"right\" ]) def forward_char ( self ) -> None : \"Move the cursor forward one character\" self . set_cursor_pos ( self . cursor_pos + 1 )","title":"forward_char()"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.insert","text":"Insert characters at the current cursor position Source code in pzp/line_editor.py 35 36 37 38 39 def insert ( self , ch : str ) -> None : \"Insert characters at the current cursor position\" if ch >= SPACE : # Add the character to line self . line = self . line [ 0 : self . cursor_pos ] + ch + self . line [ self . cursor_pos :] self . adj_cursor_pos ( len ( ch ))","title":"insert()"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.print","text":"Print the line and set the cursor position Parameters: Name Type Description Default screen Screen Screen instance required Source code in pzp/line_editor.py 78 79 80 81 82 83 84 85 def print ( self , screen : \"Screen\" ) -> None : \"\"\" Print the line and set the cursor position Args: screen: Screen instance \"\"\" screen . write ( self . line ) . move_left ( len ( self ) - self . cursor_pos )","title":"print()"},{"location":"api/line_editor/#pzp.line_editor.LineEditor.set_cursor_pos","text":"Set cursor position (absolute) Source code in pzp/line_editor.py 27 28 29 def set_cursor_pos ( self , cursor_pos : int ) -> None : \"Set cursor position (absolute)\" self . cursor_pos = max ( min ( cursor_pos , len ( self . line )), 0 )","title":"set_cursor_pos()"},{"location":"api/matcher/","text":"ExactMatcher Bases: Matcher Exact matcher Source code in pzp/matcher.py 33 34 35 36 37 38 39 class ExactMatcher ( Matcher ): \"\"\" Exact matcher \"\"\" def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: pattern = pattern . lower () return [ item for item in candidates if pattern in format_fn ( item ) . lower ()] ExtendedMatcher Bases: Matcher Extended Matcher This matcher accept multiple patterns delimited by spaces, such as: 'aaa ^bbb ccc$ !ddd If patter is prefixed by a single-quote character ', it is interpreted as an \"exact-match\" and it will not be splitted by spaces. A backslash can be prepend to a space to match a literal space character. A term can be prefixed by ^, or suffixed by $ to become an anchored-match term. Then matcher will search for the lines that start with or end with the given string. If a term is prefixed by !, the matcher will exclude the lines that satisfy the term from the result. Source code in pzp/matcher.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 class ExtendedMatcher ( Matcher ): \"\"\" Extended Matcher This matcher accept multiple patterns delimited by spaces, such as: 'aaa ^bbb ccc$ !ddd If patter is prefixed by a single-quote character ', it is interpreted as an \"exact-match\" and it will not be splitted by spaces. A backslash can be prepend to a space to match a literal space character. A term can be prefixed by ^, or suffixed by $ to become an anchored-match term. Then matcher will search for the lines that start with or end with the given string. If a term is prefixed by !, the matcher will exclude the lines that satisfy the term from the result. \"\"\" def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: # Prepare the filters filters = [ ExtendedMatcherFilter ( term ) for term in self . split_pattern ( pattern )] # Filter items return [ item for item in candidates if self . filter_item ( filters , item )] def filter_item ( self , filters : Sequence [ ExtendedMatcherFilter ], item : Any , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ) ) -> bool : txt : str = format_fn ( item ) . lower () return all ([ filter_fn ( txt ) for filter_fn in filters ]) def split_pattern ( self , pattern : str ) -> Sequence [ str ]: \"Split a pattern into terms\" if pattern . startswith ( \"'\" ) or pattern . startswith ( \"!'\" ): # quote - keep spaces return [ pattern . lower ()] else : return [ term . replace ( \" \\\\ \" , \"\" ) for term in SPLIT_ESCAPED_RE . split ( pattern . lower ()) if term ] split_pattern ( pattern ) Split a pattern into terms Source code in pzp/matcher.py 133 134 135 136 137 138 def split_pattern ( self , pattern : str ) -> Sequence [ str ]: \"Split a pattern into terms\" if pattern . startswith ( \"'\" ) or pattern . startswith ( \"!'\" ): # quote - keep spaces return [ pattern . lower ()] else : return [ term . replace ( \" \\\\ \" , \"\" ) for term in SPLIT_ESCAPED_RE . split ( pattern . lower ()) if term ] ExtendedMatcherFilter Source code in pzp/matcher.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 class ExtendedMatcherFilter : def __init__ ( self , term : str ) -> None : self . prefix , self . term , self . suffix = self . split ( term ) # If a term is prefixed by !, the filter will exclude the lines that satisfy the term if \"!\" in self . prefix : self . exclude = True else : self . exclude = False if not self . term : self . exclude = False self . fn = self . always elif \"'\" in self . prefix : # Quoted - Check if the text contains the given term self . fn = self . in_match elif \"^\" in self . prefix : # If a term is prefixed by ^, the filter will include the lines than start with the given term if \"$\" in self . suffix : self . fn = self . exact_match else : self . fn = self . startswith_match elif \"$\" in self . suffix : # If a term is suffixed by $, the filter will include the lines than end with the given term self . fn = self . endswith_match else : # Check if the text contains the given term self . fn = self . in_match @classmethod def split ( cls , term : str ) -> Tuple [ str , str , str ]: \"Split term in prefix, term, suffix\" term , prefix = [( term [ len ( p ) :], p ) for p in ( \"!^\" , \"!'\" , \"^\" , \"'\" , \"!\" , \"\" ) if term . startswith ( p )][ 0 ] term , suffix = [( term [: len ( term ) - len ( s )], s ) for s in ( \"$\" , \"\" ) if term . endswith ( s )][ 0 ] return prefix , term , suffix def __call__ ( self , txt : str ) -> bool : \"Evaluate the filter on the given text\" if self . exclude : return not self . fn ( txt ) else : return self . fn ( txt ) def startswith_match ( self , txt : str ) -> bool : \"True if the text startswith the given term\" return txt . startswith ( self . term ) def endswith_match ( self , txt : str ) -> bool : \"True if the text endswith the given term\" return txt . endswith ( self . term ) def in_match ( self , txt : str ) -> bool : \"True if the text contains the given term\" return self . term in txt def exact_match ( self , txt : str ) -> bool : \"Exact match\" return self . term == txt def always ( self , txt : str ) -> bool : \"Always return True\" return True def __str__ ( self ) -> str : return f \"< { self . prefix } , { self . term } , { self . suffix } >\" # pragma: no cover __call__ ( txt ) Evaluate the filter on the given text Source code in pzp/matcher.py 76 77 78 79 80 81 def __call__ ( self , txt : str ) -> bool : \"Evaluate the filter on the given text\" if self . exclude : return not self . fn ( txt ) else : return self . fn ( txt ) always ( txt ) Always return True Source code in pzp/matcher.py 99 100 101 def always ( self , txt : str ) -> bool : \"Always return True\" return True endswith_match ( txt ) True if the text endswith the given term Source code in pzp/matcher.py 87 88 89 def endswith_match ( self , txt : str ) -> bool : \"True if the text endswith the given term\" return txt . endswith ( self . term ) exact_match ( txt ) Exact match Source code in pzp/matcher.py 95 96 97 def exact_match ( self , txt : str ) -> bool : \"Exact match\" return self . term == txt in_match ( txt ) True if the text contains the given term Source code in pzp/matcher.py 91 92 93 def in_match ( self , txt : str ) -> bool : \"True if the text contains the given term\" return self . term in txt split ( term ) classmethod Split term in prefix, term, suffix Source code in pzp/matcher.py 69 70 71 72 73 74 @classmethod def split ( cls , term : str ) -> Tuple [ str , str , str ]: \"Split term in prefix, term, suffix\" term , prefix = [( term [ len ( p ) :], p ) for p in ( \"!^\" , \"!'\" , \"^\" , \"'\" , \"!\" , \"\" ) if term . startswith ( p )][ 0 ] term , suffix = [( term [: len ( term ) - len ( s )], s ) for s in ( \"$\" , \"\" ) if term . endswith ( s )][ 0 ] return prefix , term , suffix startswith_match ( txt ) True if the text startswith the given term Source code in pzp/matcher.py 83 84 85 def startswith_match ( self , txt : str ) -> bool : \"True if the text startswith the given term\" return txt . startswith ( self . term ) Matcher Bases: ABC Source code in pzp/matcher.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Matcher ( ABC ): @abstractmethod def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: \"\"\" Filter candidates according to the given pattern Args: pattern: Pattern candidates: Candidates format_fn: Items format function Returns: result: Filtered candidates \"\"\" pass # pragma: no cover filter ( pattern , candidates , format_fn = lambda x : str ( x )) abstractmethod Filter candidates according to the given pattern Parameters: Name Type Description Default pattern str Pattern required candidates Sequence [ Any ] Candidates required format_fn Callable [[ Any ], str ] Items format function lambda x: str(x) Returns: Name Type Description result Sequence [ Any ] Filtered candidates Source code in pzp/matcher.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 @abstractmethod def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: \"\"\" Filter candidates according to the given pattern Args: pattern: Pattern candidates: Candidates format_fn: Items format function Returns: result: Filtered candidates \"\"\" pass # pragma: no cover","title":"pzp.matcher"},{"location":"api/matcher/#pzp.matcher.ExactMatcher","text":"Bases: Matcher Exact matcher Source code in pzp/matcher.py 33 34 35 36 37 38 39 class ExactMatcher ( Matcher ): \"\"\" Exact matcher \"\"\" def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: pattern = pattern . lower () return [ item for item in candidates if pattern in format_fn ( item ) . lower ()]","title":"ExactMatcher"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcher","text":"Bases: Matcher Extended Matcher This matcher accept multiple patterns delimited by spaces, such as: 'aaa ^bbb ccc$ !ddd If patter is prefixed by a single-quote character ', it is interpreted as an \"exact-match\" and it will not be splitted by spaces. A backslash can be prepend to a space to match a literal space character. A term can be prefixed by ^, or suffixed by $ to become an anchored-match term. Then matcher will search for the lines that start with or end with the given string. If a term is prefixed by !, the matcher will exclude the lines that satisfy the term from the result. Source code in pzp/matcher.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 class ExtendedMatcher ( Matcher ): \"\"\" Extended Matcher This matcher accept multiple patterns delimited by spaces, such as: 'aaa ^bbb ccc$ !ddd If patter is prefixed by a single-quote character ', it is interpreted as an \"exact-match\" and it will not be splitted by spaces. A backslash can be prepend to a space to match a literal space character. A term can be prefixed by ^, or suffixed by $ to become an anchored-match term. Then matcher will search for the lines that start with or end with the given string. If a term is prefixed by !, the matcher will exclude the lines that satisfy the term from the result. \"\"\" def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: # Prepare the filters filters = [ ExtendedMatcherFilter ( term ) for term in self . split_pattern ( pattern )] # Filter items return [ item for item in candidates if self . filter_item ( filters , item )] def filter_item ( self , filters : Sequence [ ExtendedMatcherFilter ], item : Any , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ) ) -> bool : txt : str = format_fn ( item ) . lower () return all ([ filter_fn ( txt ) for filter_fn in filters ]) def split_pattern ( self , pattern : str ) -> Sequence [ str ]: \"Split a pattern into terms\" if pattern . startswith ( \"'\" ) or pattern . startswith ( \"!'\" ): # quote - keep spaces return [ pattern . lower ()] else : return [ term . replace ( \" \\\\ \" , \"\" ) for term in SPLIT_ESCAPED_RE . split ( pattern . lower ()) if term ]","title":"ExtendedMatcher"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcher.split_pattern","text":"Split a pattern into terms Source code in pzp/matcher.py 133 134 135 136 137 138 def split_pattern ( self , pattern : str ) -> Sequence [ str ]: \"Split a pattern into terms\" if pattern . startswith ( \"'\" ) or pattern . startswith ( \"!'\" ): # quote - keep spaces return [ pattern . lower ()] else : return [ term . replace ( \" \\\\ \" , \"\" ) for term in SPLIT_ESCAPED_RE . split ( pattern . lower ()) if term ]","title":"split_pattern()"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter","text":"Source code in pzp/matcher.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 class ExtendedMatcherFilter : def __init__ ( self , term : str ) -> None : self . prefix , self . term , self . suffix = self . split ( term ) # If a term is prefixed by !, the filter will exclude the lines that satisfy the term if \"!\" in self . prefix : self . exclude = True else : self . exclude = False if not self . term : self . exclude = False self . fn = self . always elif \"'\" in self . prefix : # Quoted - Check if the text contains the given term self . fn = self . in_match elif \"^\" in self . prefix : # If a term is prefixed by ^, the filter will include the lines than start with the given term if \"$\" in self . suffix : self . fn = self . exact_match else : self . fn = self . startswith_match elif \"$\" in self . suffix : # If a term is suffixed by $, the filter will include the lines than end with the given term self . fn = self . endswith_match else : # Check if the text contains the given term self . fn = self . in_match @classmethod def split ( cls , term : str ) -> Tuple [ str , str , str ]: \"Split term in prefix, term, suffix\" term , prefix = [( term [ len ( p ) :], p ) for p in ( \"!^\" , \"!'\" , \"^\" , \"'\" , \"!\" , \"\" ) if term . startswith ( p )][ 0 ] term , suffix = [( term [: len ( term ) - len ( s )], s ) for s in ( \"$\" , \"\" ) if term . endswith ( s )][ 0 ] return prefix , term , suffix def __call__ ( self , txt : str ) -> bool : \"Evaluate the filter on the given text\" if self . exclude : return not self . fn ( txt ) else : return self . fn ( txt ) def startswith_match ( self , txt : str ) -> bool : \"True if the text startswith the given term\" return txt . startswith ( self . term ) def endswith_match ( self , txt : str ) -> bool : \"True if the text endswith the given term\" return txt . endswith ( self . term ) def in_match ( self , txt : str ) -> bool : \"True if the text contains the given term\" return self . term in txt def exact_match ( self , txt : str ) -> bool : \"Exact match\" return self . term == txt def always ( self , txt : str ) -> bool : \"Always return True\" return True def __str__ ( self ) -> str : return f \"< { self . prefix } , { self . term } , { self . suffix } >\" # pragma: no cover","title":"ExtendedMatcherFilter"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.__call__","text":"Evaluate the filter on the given text Source code in pzp/matcher.py 76 77 78 79 80 81 def __call__ ( self , txt : str ) -> bool : \"Evaluate the filter on the given text\" if self . exclude : return not self . fn ( txt ) else : return self . fn ( txt )","title":"__call__()"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.always","text":"Always return True Source code in pzp/matcher.py 99 100 101 def always ( self , txt : str ) -> bool : \"Always return True\" return True","title":"always()"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.endswith_match","text":"True if the text endswith the given term Source code in pzp/matcher.py 87 88 89 def endswith_match ( self , txt : str ) -> bool : \"True if the text endswith the given term\" return txt . endswith ( self . term )","title":"endswith_match()"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.exact_match","text":"Exact match Source code in pzp/matcher.py 95 96 97 def exact_match ( self , txt : str ) -> bool : \"Exact match\" return self . term == txt","title":"exact_match()"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.in_match","text":"True if the text contains the given term Source code in pzp/matcher.py 91 92 93 def in_match ( self , txt : str ) -> bool : \"True if the text contains the given term\" return self . term in txt","title":"in_match()"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.split","text":"Split term in prefix, term, suffix Source code in pzp/matcher.py 69 70 71 72 73 74 @classmethod def split ( cls , term : str ) -> Tuple [ str , str , str ]: \"Split term in prefix, term, suffix\" term , prefix = [( term [ len ( p ) :], p ) for p in ( \"!^\" , \"!'\" , \"^\" , \"'\" , \"!\" , \"\" ) if term . startswith ( p )][ 0 ] term , suffix = [( term [: len ( term ) - len ( s )], s ) for s in ( \"$\" , \"\" ) if term . endswith ( s )][ 0 ] return prefix , term , suffix","title":"split()"},{"location":"api/matcher/#pzp.matcher.ExtendedMatcherFilter.startswith_match","text":"True if the text startswith the given term Source code in pzp/matcher.py 83 84 85 def startswith_match ( self , txt : str ) -> bool : \"True if the text startswith the given term\" return txt . startswith ( self . term )","title":"startswith_match()"},{"location":"api/matcher/#pzp.matcher.Matcher","text":"Bases: ABC Source code in pzp/matcher.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Matcher ( ABC ): @abstractmethod def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: \"\"\" Filter candidates according to the given pattern Args: pattern: Pattern candidates: Candidates format_fn: Items format function Returns: result: Filtered candidates \"\"\" pass # pragma: no cover","title":"Matcher"},{"location":"api/matcher/#pzp.matcher.Matcher.filter","text":"Filter candidates according to the given pattern Parameters: Name Type Description Default pattern str Pattern required candidates Sequence [ Any ] Candidates required format_fn Callable [[ Any ], str ] Items format function lambda x: str(x) Returns: Name Type Description result Sequence [ Any ] Filtered candidates Source code in pzp/matcher.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 @abstractmethod def filter ( self , pattern : str , candidates : Sequence [ Any ], format_fn : Callable [[ Any ], str ] = lambda x : str ( x )) -> Sequence [ Any ]: \"\"\" Filter candidates according to the given pattern Args: pattern: Pattern candidates: Candidates format_fn: Items format function Returns: result: Filtered candidates \"\"\" pass # pragma: no cover","title":"filter()"},{"location":"api/module/","text":"__version__ = '0.0.10' module-attribute PZP Version CustomAction Bases: GenericAction The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Parameters: Name Type Description Default action str action required selected_item Any selected item, if any None ch str pressed key required Attributes: Name Type Description action action selected_item selected item, if any ch pressed key Source code in pzp/exceptions.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 class CustomAction ( GenericAction ): \"\"\" The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Args: action: action selected_item: selected item, if any ch: pressed key Attributes: action: action selected_item: selected item, if any ch: pressed key \"\"\" def __init__ ( self , action : str , ch : str , selected_item : Any = None ): super () . __init__ ( action , ch , selected_item ) pzp ( candidates , height = None , fullscreen = True , format_fn = lambda x : str ( x ), layout = Layout . REVERSE_LIST , info_style = InfoStyle . DEFAULT , pointer_str = DEFAULT_POINTER , prompt_str = DEFAULT_PROMPT , header_str = DEFAULT_HEADER , keys_binding = None , matcher = ExtendedMatcher , input = None ) Open pzp and return the selected element Examples: >>> pzp ( candidates = list ( Path ( '.' ) . iterdir ())) PosixPath('README.md') Parameters: Name Type Description Default candidates Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]] Candidates required fullscreen bool Full screen mode True height Optional [ int ] Finder window height None format_fn Callable [[ Any ], str ] Items format function lambda x: str(x) layout Layout Finder layout Layout.REVERSE_LIST info_style InfoStyle Determines the display style of finder info InfoStyle.DEFAULT pointer_str str Pointer to the current line DEFAULT_POINTER prompt_str str Input prompt DEFAULT_PROMPT header_str str Header DEFAULT_HEADER keys_binding Optional [ KeysBinding ] Custom keys binding None matcher Union [ Matcher , Type [ Matcher ]] Matcher ExtendedMatcher Returns: Name Type Description item Any the selected item Source code in pzp/__init__.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def pzp ( candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], height : Optional [ int ] = None , fullscreen : bool = True , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Layout = Layout . REVERSE_LIST , info_style : InfoStyle = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ]] = ExtendedMatcher , input : Optional [ str ] = None , ) -> Any : \"\"\" Open pzp and return the selected element Examples: >>> pzp(candidates=list(Path('.').iterdir())) PosixPath('README.md') Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher Returns: item: the selected item \"\"\" finder = Finder ( candidates = candidates , fullscreen = fullscreen , height = height , format_fn = format_fn , layout = layout , info_style = info_style , pointer_str = pointer_str , prompt_str = prompt_str , header_str = header_str , keys_binding = keys_binding , matcher = matcher , ) return finder . show ( input = input )","title":"pzp"},{"location":"api/module/#pzp.__version__","text":"PZP Version","title":"__version__"},{"location":"api/module/#pzp.CustomAction","text":"Bases: GenericAction The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Parameters: Name Type Description Default action str action required selected_item Any selected item, if any None ch str pressed key required Attributes: Name Type Description action action selected_item selected item, if any ch pressed key Source code in pzp/exceptions.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 class CustomAction ( GenericAction ): \"\"\" The CustomAction exception is raised when the user presses a key that is mapped to the \"custom\" action. Args: action: action selected_item: selected item, if any ch: pressed key Attributes: action: action selected_item: selected item, if any ch: pressed key \"\"\" def __init__ ( self , action : str , ch : str , selected_item : Any = None ): super () . __init__ ( action , ch , selected_item )","title":"CustomAction"},{"location":"api/module/#pzp.pzp","text":"Open pzp and return the selected element Examples: >>> pzp ( candidates = list ( Path ( '.' ) . iterdir ())) PosixPath('README.md') Parameters: Name Type Description Default candidates Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]] Candidates required fullscreen bool Full screen mode True height Optional [ int ] Finder window height None format_fn Callable [[ Any ], str ] Items format function lambda x: str(x) layout Layout Finder layout Layout.REVERSE_LIST info_style InfoStyle Determines the display style of finder info InfoStyle.DEFAULT pointer_str str Pointer to the current line DEFAULT_POINTER prompt_str str Input prompt DEFAULT_PROMPT header_str str Header DEFAULT_HEADER keys_binding Optional [ KeysBinding ] Custom keys binding None matcher Union [ Matcher , Type [ Matcher ]] Matcher ExtendedMatcher Returns: Name Type Description item Any the selected item Source code in pzp/__init__.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def pzp ( candidates : Union [ Callable [[], Sequence [ Any ]], Iterator [ Any ], Sequence [ Any ]], height : Optional [ int ] = None , fullscreen : bool = True , format_fn : Callable [[ Any ], str ] = lambda x : str ( x ), layout : Layout = Layout . REVERSE_LIST , info_style : InfoStyle = InfoStyle . DEFAULT , pointer_str : str = DEFAULT_POINTER , prompt_str : str = DEFAULT_PROMPT , header_str : str = DEFAULT_HEADER , keys_binding : Optional [ KeysBinding ] = None , matcher : Union [ Matcher , Type [ Matcher ]] = ExtendedMatcher , input : Optional [ str ] = None , ) -> Any : \"\"\" Open pzp and return the selected element Examples: >>> pzp(candidates=list(Path('.').iterdir())) PosixPath('README.md') Args: candidates: Candidates fullscreen: Full screen mode height: Finder window height format_fn: Items format function layout: Finder layout info_style: Determines the display style of finder info pointer_str: Pointer to the current line prompt_str: Input prompt header_str: Header keys_binding: Custom keys binding matcher: Matcher Returns: item: the selected item \"\"\" finder = Finder ( candidates = candidates , fullscreen = fullscreen , height = height , format_fn = format_fn , layout = layout , info_style = info_style , pointer_str = pointer_str , prompt_str = prompt_str , header_str = header_str , keys_binding = keys_binding , matcher = matcher , ) return finder . show ( input = input )","title":"pzp()"},{"location":"api/screen/","text":"DEFAULT_HEIGHT = 24 module-attribute Default screen height DEFAULT_WIDTH = 80 module-attribute Default screen width Screen Source code in pzp/screen.pyclass Screen : def __init__ ( self , stream : TextIO = sys . stderr , fullscreen : bool = True , height : Optional [ int ] = None ): \"\"\" Initialize screen Args: stream: Output stream fullscreen: Full screen mode height: Screen height Attributes: stream: Output stream data: Data to be written on the stream fullscreen: Full screen mode height: Screen height \"\"\" self . stream : TextIO = stream self . data : List [ str ] = [] self . fullscreen = fullscreen if self . fullscreen or height is None : self . height : int = self . get_terminal_height () else : self . height = min ( height , self . get_terminal_height ()) # Save cursor position self . write ( f \" { CURSOR_SAVE_POS } \" ) self . flush () @classmethod def get_terminal_height ( cls ) -> int : \"\"\" Get the terminal height Returns: height: terminal height \"\"\" return shutil . get_terminal_size ( fallback = ( DEFAULT_WIDTH , DEFAULT_HEIGHT )) . lines def write ( self , line : str ) -> \"Screen\" : \"Add data to be written on the stream\" self . data . append ( line ) return self def flush ( self ) -> \"Screen\" : \"Write data to the stream and flush it\" self . stream . write ( \"\" . join ( self . data )) self . data = [] self . stream . flush () return self def cleanup ( self ) -> \"Screen\" : \"Clean screen and restore cursor position\" self . erase_screen () if self . fullscreen : self . write ( f \" { CURSOR_RESTORE_POS } \" ) self . move_up ( self . height - 1 ) self . flush () return self def nl ( self , lines : int = 1 ) -> \"Screen\" : \"\"\" Add n newlines Args: lines: number of newlines to be added \"\"\" self . data . append ( f \" { NL } \" * lines ) return self def space ( self , num : int = 1 ) -> \"Screen\" : \"\"\" Add n spaces Args: num: number of spaces \"\"\" self . data . append ( \" \" * num ) return self def reset ( self ) -> \"Screen\" : \"Reset style and color\" self . write ( f \" { RESET } \" ) return self def bold ( self ) -> \"Screen\" : \"Set bold mode\" self . write ( f \" { BOLD } \" ) return self def erase_screen ( self ) -> \"Screen\" : \"Erase the screen\" lines : int = self . height - 1 return self . erase_line () . erase_lines ( lines ) def erase_line ( self ) -> \"Screen\" : \"Erase the current line\" self . write ( f \" { ERASE_LINE } \" ) return self def erase_lines ( self , lines : int ) -> \"Screen\" : \"\"\" Erase n lines Args: lines: number of lines to be erased \"\"\" self . move_up ( lines ) self . write ( f \" { ERASE_LINE }{ NL } \" * lines ) return self . move_up ( lines ) def move_up ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor up If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } A\" ) def move_down ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor down If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } B\" ) def move_right ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor right If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } C\" ) return self def move_left ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor left If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } D\" ) return self __init__ ( stream = sys . stderr , fullscreen = True , height = None ) Initialize screen Parameters: Name Type Description Default stream TextIO Output stream sys.stderr fullscreen bool Full screen mode True height Optional [ int ] Screen height None Attributes: Name Type Description stream Output stream data Data to be written on the stream fullscreen Full screen mode height Screen height Source code in pzp/screen.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def __init__ ( self , stream : TextIO = sys . stderr , fullscreen : bool = True , height : Optional [ int ] = None ): \"\"\" Initialize screen Args: stream: Output stream fullscreen: Full screen mode height: Screen height Attributes: stream: Output stream data: Data to be written on the stream fullscreen: Full screen mode height: Screen height \"\"\" self . stream : TextIO = stream self . data : List [ str ] = [] self . fullscreen = fullscreen if self . fullscreen or height is None : self . height : int = self . get_terminal_height () else : self . height = min ( height , self . get_terminal_height ()) # Save cursor position self . write ( f \" { CURSOR_SAVE_POS } \" ) self . flush () bold () Set bold mode Source code in pzp/screen.py 116 117 118 119 def bold ( self ) -> \"Screen\" : \"Set bold mode\" self . write ( f \" { BOLD } \" ) return self cleanup () Clean screen and restore cursor position Source code in pzp/screen.py 82 83 84 85 86 87 88 89 def cleanup ( self ) -> \"Screen\" : \"Clean screen and restore cursor position\" self . erase_screen () if self . fullscreen : self . write ( f \" { CURSOR_RESTORE_POS } \" ) self . move_up ( self . height - 1 ) self . flush () return self erase_line () Erase the current line Source code in pzp/screen.py 126 127 128 129 def erase_line ( self ) -> \"Screen\" : \"Erase the current line\" self . write ( f \" { ERASE_LINE } \" ) return self erase_lines ( lines ) Erase n lines Parameters: Name Type Description Default lines int number of lines to be erased required Source code in pzp/screen.py 131 132 133 134 135 136 137 138 139 140 def erase_lines ( self , lines : int ) -> \"Screen\" : \"\"\" Erase n lines Args: lines: number of lines to be erased \"\"\" self . move_up ( lines ) self . write ( f \" { ERASE_LINE }{ NL } \" * lines ) return self . move_up ( lines ) erase_screen () Erase the screen Source code in pzp/screen.py 121 122 123 124 def erase_screen ( self ) -> \"Screen\" : \"Erase the screen\" lines : int = self . height - 1 return self . erase_line () . erase_lines ( lines ) flush () Write data to the stream and flush it Source code in pzp/screen.py 75 76 77 78 79 80 def flush ( self ) -> \"Screen\" : \"Write data to the stream and flush it\" self . stream . write ( \"\" . join ( self . data )) self . data = [] self . stream . flush () return self get_terminal_height () classmethod Get the terminal height Returns: Name Type Description height int terminal height Source code in pzp/screen.py 60 61 62 63 64 65 66 67 68 @classmethod def get_terminal_height ( cls ) -> int : \"\"\" Get the terminal height Returns: height: terminal height \"\"\" return shutil . get_terminal_size ( fallback = ( DEFAULT_WIDTH , DEFAULT_HEIGHT )) . lines move_down ( lines ) Move cursor down If the cursor is already at the edge of the screen, this has no effect. Parameters: Name Type Description Default lines int number of lines required Source code in pzp/screen.py 152 153 154 155 156 157 158 159 160 def move_down ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor down If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } B\" ) move_left ( characters ) Move cursor left If the cursor is already at the edge of the screen, this has no effect. Parameters: Name Type Description Default characters int number of characters required Source code in pzp/screen.py 174 175 176 177 178 179 180 181 182 183 184 def move_left ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor left If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } D\" ) return self move_right ( characters ) Move cursor right If the cursor is already at the edge of the screen, this has no effect. Parameters: Name Type Description Default characters int number of characters required Source code in pzp/screen.py 162 163 164 165 166 167 168 169 170 171 172 def move_right ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor right If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } C\" ) return self move_up ( lines ) Move cursor up If the cursor is already at the edge of the screen, this has no effect. Parameters: Name Type Description Default lines int number of lines required Source code in pzp/screen.py 142 143 144 145 146 147 148 149 150 def move_up ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor up If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } A\" ) nl ( lines = 1 ) Add n newlines Parameters: Name Type Description Default lines int number of newlines to be added 1 Source code in pzp/screen.py 91 92 93 94 95 96 97 98 99 def nl ( self , lines : int = 1 ) -> \"Screen\" : \"\"\" Add n newlines Args: lines: number of newlines to be added \"\"\" self . data . append ( f \" { NL } \" * lines ) return self reset () Reset style and color Source code in pzp/screen.py 111 112 113 114 def reset ( self ) -> \"Screen\" : \"Reset style and color\" self . write ( f \" { RESET } \" ) return self space ( num = 1 ) Add n spaces Parameters: Name Type Description Default num int number of spaces 1 Source code in pzp/screen.py 101 102 103 104 105 106 107 108 109 def space ( self , num : int = 1 ) -> \"Screen\" : \"\"\" Add n spaces Args: num: number of spaces \"\"\" self . data . append ( \" \" * num ) return self write ( line ) Add data to be written on the stream Source code in pzp/screen.py 70 71 72 73 def write ( self , line : str ) -> \"Screen\" : \"Add data to be written on the stream\" self . data . append ( line ) return self","title":"pzp.screen"},{"location":"api/screen/#pzp.screen.DEFAULT_HEIGHT","text":"Default screen height","title":"DEFAULT_HEIGHT"},{"location":"api/screen/#pzp.screen.DEFAULT_WIDTH","text":"Default screen width","title":"DEFAULT_WIDTH"},{"location":"api/screen/#pzp.screen.Screen","text":"Source code in pzp/screen.pyclass Screen : def __init__ ( self , stream : TextIO = sys . stderr , fullscreen : bool = True , height : Optional [ int ] = None ): \"\"\" Initialize screen Args: stream: Output stream fullscreen: Full screen mode height: Screen height Attributes: stream: Output stream data: Data to be written on the stream fullscreen: Full screen mode height: Screen height \"\"\" self . stream : TextIO = stream self . data : List [ str ] = [] self . fullscreen = fullscreen if self . fullscreen or height is None : self . height : int = self . get_terminal_height () else : self . height = min ( height , self . get_terminal_height ()) # Save cursor position self . write ( f \" { CURSOR_SAVE_POS } \" ) self . flush () @classmethod def get_terminal_height ( cls ) -> int : \"\"\" Get the terminal height Returns: height: terminal height \"\"\" return shutil . get_terminal_size ( fallback = ( DEFAULT_WIDTH , DEFAULT_HEIGHT )) . lines def write ( self , line : str ) -> \"Screen\" : \"Add data to be written on the stream\" self . data . append ( line ) return self def flush ( self ) -> \"Screen\" : \"Write data to the stream and flush it\" self . stream . write ( \"\" . join ( self . data )) self . data = [] self . stream . flush () return self def cleanup ( self ) -> \"Screen\" : \"Clean screen and restore cursor position\" self . erase_screen () if self . fullscreen : self . write ( f \" { CURSOR_RESTORE_POS } \" ) self . move_up ( self . height - 1 ) self . flush () return self def nl ( self , lines : int = 1 ) -> \"Screen\" : \"\"\" Add n newlines Args: lines: number of newlines to be added \"\"\" self . data . append ( f \" { NL } \" * lines ) return self def space ( self , num : int = 1 ) -> \"Screen\" : \"\"\" Add n spaces Args: num: number of spaces \"\"\" self . data . append ( \" \" * num ) return self def reset ( self ) -> \"Screen\" : \"Reset style and color\" self . write ( f \" { RESET } \" ) return self def bold ( self ) -> \"Screen\" : \"Set bold mode\" self . write ( f \" { BOLD } \" ) return self def erase_screen ( self ) -> \"Screen\" : \"Erase the screen\" lines : int = self . height - 1 return self . erase_line () . erase_lines ( lines ) def erase_line ( self ) -> \"Screen\" : \"Erase the current line\" self . write ( f \" { ERASE_LINE } \" ) return self def erase_lines ( self , lines : int ) -> \"Screen\" : \"\"\" Erase n lines Args: lines: number of lines to be erased \"\"\" self . move_up ( lines ) self . write ( f \" { ERASE_LINE }{ NL } \" * lines ) return self . move_up ( lines ) def move_up ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor up If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } A\" ) def move_down ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor down If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } B\" ) def move_right ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor right If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } C\" ) return self def move_left ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor left If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } D\" ) return self","title":"Screen"},{"location":"api/screen/#pzp.screen.Screen.__init__","text":"Initialize screen Parameters: Name Type Description Default stream TextIO Output stream sys.stderr fullscreen bool Full screen mode True height Optional [ int ] Screen height None Attributes: Name Type Description stream Output stream data Data to be written on the stream fullscreen Full screen mode height Screen height Source code in pzp/screen.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def __init__ ( self , stream : TextIO = sys . stderr , fullscreen : bool = True , height : Optional [ int ] = None ): \"\"\" Initialize screen Args: stream: Output stream fullscreen: Full screen mode height: Screen height Attributes: stream: Output stream data: Data to be written on the stream fullscreen: Full screen mode height: Screen height \"\"\" self . stream : TextIO = stream self . data : List [ str ] = [] self . fullscreen = fullscreen if self . fullscreen or height is None : self . height : int = self . get_terminal_height () else : self . height = min ( height , self . get_terminal_height ()) # Save cursor position self . write ( f \" { CURSOR_SAVE_POS } \" ) self . flush ()","title":"__init__()"},{"location":"api/screen/#pzp.screen.Screen.bold","text":"Set bold mode Source code in pzp/screen.py 116 117 118 119 def bold ( self ) -> \"Screen\" : \"Set bold mode\" self . write ( f \" { BOLD } \" ) return self","title":"bold()"},{"location":"api/screen/#pzp.screen.Screen.cleanup","text":"Clean screen and restore cursor position Source code in pzp/screen.py 82 83 84 85 86 87 88 89 def cleanup ( self ) -> \"Screen\" : \"Clean screen and restore cursor position\" self . erase_screen () if self . fullscreen : self . write ( f \" { CURSOR_RESTORE_POS } \" ) self . move_up ( self . height - 1 ) self . flush () return self","title":"cleanup()"},{"location":"api/screen/#pzp.screen.Screen.erase_line","text":"Erase the current line Source code in pzp/screen.py 126 127 128 129 def erase_line ( self ) -> \"Screen\" : \"Erase the current line\" self . write ( f \" { ERASE_LINE } \" ) return self","title":"erase_line()"},{"location":"api/screen/#pzp.screen.Screen.erase_lines","text":"Erase n lines Parameters: Name Type Description Default lines int number of lines to be erased required Source code in pzp/screen.py 131 132 133 134 135 136 137 138 139 140 def erase_lines ( self , lines : int ) -> \"Screen\" : \"\"\" Erase n lines Args: lines: number of lines to be erased \"\"\" self . move_up ( lines ) self . write ( f \" { ERASE_LINE }{ NL } \" * lines ) return self . move_up ( lines )","title":"erase_lines()"},{"location":"api/screen/#pzp.screen.Screen.erase_screen","text":"Erase the screen Source code in pzp/screen.py 121 122 123 124 def erase_screen ( self ) -> \"Screen\" : \"Erase the screen\" lines : int = self . height - 1 return self . erase_line () . erase_lines ( lines )","title":"erase_screen()"},{"location":"api/screen/#pzp.screen.Screen.flush","text":"Write data to the stream and flush it Source code in pzp/screen.py 75 76 77 78 79 80 def flush ( self ) -> \"Screen\" : \"Write data to the stream and flush it\" self . stream . write ( \"\" . join ( self . data )) self . data = [] self . stream . flush () return self","title":"flush()"},{"location":"api/screen/#pzp.screen.Screen.get_terminal_height","text":"Get the terminal height Returns: Name Type Description height int terminal height Source code in pzp/screen.py 60 61 62 63 64 65 66 67 68 @classmethod def get_terminal_height ( cls ) -> int : \"\"\" Get the terminal height Returns: height: terminal height \"\"\" return shutil . get_terminal_size ( fallback = ( DEFAULT_WIDTH , DEFAULT_HEIGHT )) . lines","title":"get_terminal_height()"},{"location":"api/screen/#pzp.screen.Screen.move_down","text":"Move cursor down If the cursor is already at the edge of the screen, this has no effect. Parameters: Name Type Description Default lines int number of lines required Source code in pzp/screen.py 152 153 154 155 156 157 158 159 160 def move_down ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor down If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } B\" )","title":"move_down()"},{"location":"api/screen/#pzp.screen.Screen.move_left","text":"Move cursor left If the cursor is already at the edge of the screen, this has no effect. Parameters: Name Type Description Default characters int number of characters required Source code in pzp/screen.py 174 175 176 177 178 179 180 181 182 183 184 def move_left ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor left If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } D\" ) return self","title":"move_left()"},{"location":"api/screen/#pzp.screen.Screen.move_right","text":"Move cursor right If the cursor is already at the edge of the screen, this has no effect. Parameters: Name Type Description Default characters int number of characters required Source code in pzp/screen.py 162 163 164 165 166 167 168 169 170 171 172 def move_right ( self , characters : int ) -> \"Screen\" : \"\"\" Move cursor right If the cursor is already at the edge of the screen, this has no effect. Args: characters: number of characters \"\"\" if characters > 0 : return self . write ( f \" { ESC } [ { characters } C\" ) return self","title":"move_right()"},{"location":"api/screen/#pzp.screen.Screen.move_up","text":"Move cursor up If the cursor is already at the edge of the screen, this has no effect. Parameters: Name Type Description Default lines int number of lines required Source code in pzp/screen.py 142 143 144 145 146 147 148 149 150 def move_up ( self , lines : int ) -> \"Screen\" : \"\"\" Move cursor up If the cursor is already at the edge of the screen, this has no effect. Args: lines: number of lines \"\"\" return self . write ( f \" { ESC } [ { lines } A\" )","title":"move_up()"},{"location":"api/screen/#pzp.screen.Screen.nl","text":"Add n newlines Parameters: Name Type Description Default lines int number of newlines to be added 1 Source code in pzp/screen.py 91 92 93 94 95 96 97 98 99 def nl ( self , lines : int = 1 ) -> \"Screen\" : \"\"\" Add n newlines Args: lines: number of newlines to be added \"\"\" self . data . append ( f \" { NL } \" * lines ) return self","title":"nl()"},{"location":"api/screen/#pzp.screen.Screen.reset","text":"Reset style and color Source code in pzp/screen.py 111 112 113 114 def reset ( self ) -> \"Screen\" : \"Reset style and color\" self . write ( f \" { RESET } \" ) return self","title":"reset()"},{"location":"api/screen/#pzp.screen.Screen.space","text":"Add n spaces Parameters: Name Type Description Default num int number of spaces 1 Source code in pzp/screen.py 101 102 103 104 105 106 107 108 109 def space ( self , num : int = 1 ) -> \"Screen\" : \"\"\" Add n spaces Args: num: number of spaces \"\"\" self . data . append ( \" \" * num ) return self","title":"space()"},{"location":"api/screen/#pzp.screen.Screen.write","text":"Add data to be written on the stream Source code in pzp/screen.py 70 71 72 73 def write ( self , line : str ) -> \"Screen\" : \"Add data to be written on the stream\" self . data . append ( line ) return self","title":"write()"},{"location":"examples/file_selector/","text":"#!/usr/bin/env python from pathlib import Path from pzp import pzp def main(): item = pzp(candidates=Path(\".\").iterdir()) print(str(item) if item else \"\") if __name__ == \"__main__\": main()","title":"file selector"},{"location":"examples/number_selector/","text":"#!/usr/bin/env python from pzp import pzp, CustomAction import argparse def num_format(item): return f\"{item}\" def main(): parser = argparse.ArgumentParser() parser.add_argument(\"-n\", type=int, default=1000) parser.add_argument(\"-f\", \"--fullscreen\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--height\", type=int) args = parser.parse_args() try: item = pzp( candidates=range(0, args.n), format_fn=num_format, fullscreen=args.fullscreen, height=args.height, keys_binding={\"custom\": [\"ctrl-o\"], \"oh-oh\": [\"!\"]}, header_str=\"Press enter or ctrl-o\", ) print(item) except CustomAction as action: print(action.action) print(action.selected_item) if __name__ == \"__main__\": main()","title":"number selector"},{"location":"examples/text_selector/","text":"#!/usr/bin/env python import argparse from pathlib import Path from pzp import pzp examples_dir = Path(__file__).parent code_of_conduct = examples_dir.parent / \"CODE_OF_CONDUCT.md\" def main(): parser = argparse.ArgumentParser() parser.add_argument(\"-f\", \"--fullscreen\", action=argparse.BooleanOptionalAction, default=False) parser.add_argument(\"--height\", type=int) args = parser.parse_args() candidates = code_of_conduct.read_text().split(\"\\n\") item = pzp( candidates=candidates, fullscreen=args.fullscreen, height=args.height, ) print(item) if __name__ == \"__main__\": main()","title":"text selector"}]}